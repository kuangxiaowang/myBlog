{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/NPM 指令.md","hash":"3434f1196d48fd948d6fa8ed60a4580c38d837d6","modified":1648606824485},{"_id":"source/categories/index.md","hash":"c5aa4e4fd01191d65d29ee4bb492704008ccd8db","modified":1648547052501},{"_id":"source/tags/index.md","hash":"7b9f03d1b173a1c9d68e8941b966560201d00cbd","modified":1648547057858},{"_id":"source/_posts/面试题整理.md","hash":"1e5e56eb1736e0af5c46d21fbd36153d7b1bf0cc","modified":1648606867676},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1648621926128},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1648621926164},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"7ac5700b08830381131a212c8cda65d73375b438","modified":1648621926730},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"b218746129e16d405b450da1c66d029ac1a94ba1","modified":1648621926733},{"_id":"node_modules/hexo-theme-next/package.json","hash":"196c358209e374cc6abfb76030b394a3f05ef7df","modified":1648621926058},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1648621926081},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1648621926087},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1648621926726},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1648621926157},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1648621926734},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1648621926751},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1648621926754},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1648621926752},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1648621926755},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1648621926757},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1648621926775},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1648621926778},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1648621926782},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1648621926782},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1648621926779},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1648621926801},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1648621926802},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1648621926805},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1648621926807},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1648621926814},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1648621926810},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1648621926843},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1648621926828},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1648621926851},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1648621926883},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1648621926868},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1648621926886},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1648621926232},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1648621926170},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1648621926192},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1648621926331},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1648621926373},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1648621926413},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1648621926432},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1648621926137},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1648621926111},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1648621926121},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1648621926143},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1648621926389},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b65899433ce2ebee572a34fc0bd9e712d205f90d","modified":1648621926410},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1648621926424},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1648621926259},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1648621926279},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1648621926338},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1648621926375},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1648621926440},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1648621926315},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1648621926438},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1648621926271},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1648621926319},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1648621926367},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1648621926416},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1648621926419},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1648621925672},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1648621925169},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1648621925832},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1648621925876},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1648621925984},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"a2ae21ec522c9afd2a8c70f660a586ed0d8b97dc","modified":1648621925349},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1648621925446},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1648621925919},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1648621925930},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1648621925941},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1648621926452},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1648621926480},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1648621926604},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1648621926623},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1648621926442},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1648621923198},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1648621926445},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1648621926716},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1648621926443},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1648621926725},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1648621924314},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1648621924851},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1648621924888},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1648621925047},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1648621925881},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1648621925909},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1648621925980},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1648621926004},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1648621926027},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1648621924436},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1648621924509},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1648621925600},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1648621924382},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1648621925754},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1648621925689},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1648621925779},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1648621925857},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1648621925950},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1648621925964},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1648621926007},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1648621926050},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1648621926307},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1648621926222},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1648621926300},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1648621926229},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1648621926370},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1648621926421},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1648621926391},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1648621926393},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1648621926434},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1648621926395},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1648621926403},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1648621926405},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1648621926407},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1648621926308},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1648621926213},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1648621926356},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1648621926360},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1648621926179},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1648621926430},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1648621926348},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1648621926312},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1648621926429},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1648621926250},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1648621926285},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1648621926252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1648621926435},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1648621926204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1648621926290},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1648621926288},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1648621926316},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1648621926264},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"09ffc0b1175e9c11b9329cf8b398123418d7b0eb","modified":1648621926364},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1648621926239},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1648621926267},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1648621926281},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1648621926332},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1648621926342},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1648621926324},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1648621926437},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1648621926354},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1648621926336},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1648621926185},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1648621926327},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1648621926227},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1648621926351},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1648621926339},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1648621926275},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1648621926362},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1648621925015},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1648621926376},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1648621925644},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1648621925702},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":1648621926018},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":1648621926043},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1648621924635},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1648621925094},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1648621924905},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1648621925192},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1648621925282},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1648621925713},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1648621925488},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1648621925787},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1648621926538},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1648621926031},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1648621926614},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1648621926632},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1648621926617},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1648621925898},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1648621926512},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1648621925989},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1648621925995},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1648621925960},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1648621925382},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1648621926494},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1648621926544},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1648621926666},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1648621926617},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1648621926577},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1648621926506},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1648621926527},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1648621926523},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1648621926582},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1648621926627},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1648621926621},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1648621926705},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1648621926709},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1648621926588},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1648621926457},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1648621926465},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1648621926471},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1648621926483},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1648621926588},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1648621926462},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1648621926466},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1648621926473},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1648621926485},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1648621926591},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1648621926463},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1648621926488},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1648621926469},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1648621926475},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1648621926487},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1648621926592},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1648621926490},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1648621924191},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1648621925630},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1648621925582},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1648621924814},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1648621925555},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1648621924740},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1648621926010},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1648621925231},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1648621925525},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1648621925291},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1648621925728},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1648621925806},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1648621926036},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1648621925743},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1648621925841},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1648621925818},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1648621923629},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1648621925425},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1648621925767},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1648621925870},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1648621925971},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1648621926670},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1648621926524},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1648621926520},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1648621926549},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1648621926708},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1648621926562},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1648621926534},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1648621926539},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1648621926541},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1648621926605},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1648621926556},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1648621926667},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1648621926674},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1648621926712},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1648621926555},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1648621926633},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1648621926636},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1648621926639},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1648621926644},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1648621926642},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1648621926654},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1648621926657},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1648621926662},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1648621926663},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1648621926540},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1648621926518},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1648621926564},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1648621926608},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1648621926696},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1648621926699},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1648621926580},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1648621926676},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1648621926679},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1648621926683},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1648621926684},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1648621926685},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1648621926688},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1648621926692},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1648621926693},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1648621926704},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1648621926532},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1648621926582},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1648621926515},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1648621926542},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1648621926585},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1648621926596},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1648621926601},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1648621926612},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1648621926625},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1648621926629},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1648621926707},{"_id":"public/search.xml","hash":"6aefba066fab81127940deeb28b6af4b7c0cc0f3","modified":1648623243719},{"_id":"public/categories/index.html","hash":"cff887a3402d60fba05ce768bd30ee7a5ceaadff","modified":1648623243719},{"_id":"public/tags/index.html","hash":"fe21e2c3975ea9ca623068432b513de0d865be13","modified":1648623243719},{"_id":"public/archives/index.html","hash":"b1330056d9b6a77285eeeb84f636e763bc3f9feb","modified":1648623243719},{"_id":"public/archives/2020/index.html","hash":"f2eaf8d7c27654b066a7d94be6ce1cb12434117c","modified":1648623243719},{"_id":"public/archives/2020/10/index.html","hash":"a10f92361a3397e40d93a707c8d98ba958c7e565","modified":1648623243719},{"_id":"public/archives/2020/11/index.html","hash":"4e27129baa3f1392b2b3c33a550a299e40049c74","modified":1648623243719},{"_id":"public/categories/面试/index.html","hash":"41ce9c5b9abdbc301be1d08947d973e22f7fc23f","modified":1648623243719},{"_id":"public/categories/指令/index.html","hash":"4535048d1c0ee0afd1fdbd61cc42a5f2ed2679e4","modified":1648623243719},{"_id":"public/tags/面试/index.html","hash":"952bb1fd27e253eecdd0c03d407b5f8c5717d598","modified":1648623243719},{"_id":"public/tags/学习/index.html","hash":"acb5d15a3ffe1620279ba4706ffb3e8abe538be8","modified":1648623243719},{"_id":"public/tags/指令/index.html","hash":"7c83f894fd45cb1a54f7955f7434bc44e167bb2c","modified":1648623243719},{"_id":"public/2020/11/15/NPM 指令/index.html","hash":"907c9e9043e4e0b2bf68536fa2a184465c6221b1","modified":1648623243719},{"_id":"public/2020/10/15/面试题整理/index.html","hash":"d0c4b582c2527d65eae4dc114147b1407ed4a255","modified":1648623243719},{"_id":"public/index.html","hash":"7ae7b24d9de160a15682622d9701ed73097121f0","modified":1648623243719},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1648623243719},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1648623243719},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1648623243719},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1648623243719},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1648623243719},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1648623243719},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1648623243719},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1648623243719},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1648623243719},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1648623243719},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1648623243719},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1648623243719},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1648623243719},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1648623243719},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1648623243719},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1648623243719},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1648623243719},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1648623243719},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1648623243719},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1648623243719},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1648623243719},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1648623243719},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1648623243719},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1648623243719},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1648623243719},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1648623243719},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1648623243719},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1648623243719},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1648623243719},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1648623243719},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1648623243719},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1648623243719},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1648623243719},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1648623243719},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1648623243719},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1648623243719},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1648623243719},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1648623243719},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1648623243719},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1648623243719},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1648623243719},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1648623243719},{"_id":"public/css/main.css","hash":"65d611a08002782346f7deb9f823f1d5b1df47fb","modified":1648623243719}],"Category":[{"name":"面试","_id":"cl1d7pol5000418vqb15k7dex"},{"name":"指令","_id":"cl1d7pol7000618vq3jtxelw2"}],"Data":[],"Page":[{"title":"分类","date":"2022-03-29T08:39:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-03-29 16:39:17\ntype: \"categories\"\n---\n","updated":"2022-03-29T09:44:12.501Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl1d7poku000018vqed6y8qai","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2022-03-29T08:35:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-03-29 16:35:38\ntype: \"tags\"\n---\n","updated":"2022-03-29T09:44:17.858Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl1d7pol1000118vq3id3e87q","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"面试题整理","date":"2020-10-15T13:00:00.000Z","_content":"\n### HTML+CSS\n\n#### 1  双飞翼 ，圣杯布局\n\n```\n1 弹性盒子\n2 百分比 \n3 定位\n```\n\n```\n圣杯布局\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        html{\n            font-size: 31.25vw;\n        }\n        html,body{\n            height: 100%;\n        }\n        body{\n            display: flex;\n        }\n        header{\n            width:1rem;\n            height: 1rem;\n            background: red;\n        }\n        main{\n            flex: 1;\n            width: 100%;\n            height: 2rem;\n            background: yellow;\n        }\n        footer{\n            width:1rem;\n            height: 1rem;\n            background: springgreen;\n        }\n    </style>\n</head>\n<body>\n    <header></header>\n    <main></main>\n    <footer></footer>\n</body>\n</html>\n```\n<!-- more -->\n```\nBFC双飞翼布局\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        html,body{\n            height: 100%;\n        }\n        .left{\n            width: 200px;\n            height: 60%;\n            background: red;\n            float: left;\n        }\n        .right{\n            width: 200px;\n            height: 60%;\n            background: orange;\n            float: right;\n        }\n        .center{\n            height: 100%;\n            background: green;\n            overflow: hidden;\n        }\n    </style>\n</head>\n<body>\n    <!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面\n    先写left和right;后写中间！！！必须这样子！！ -->\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n    <div class=\"center\"></div>\n</body>\n</html>\n```\n\n```\n不用BFC来写双飞翼布局\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        html,body{\n            height: 100%;\n        }\n        .left{\n            width: 200px;\n            height: 60%;\n            background: red;\n            float: left;\n        }\n        .right{\n            width: 200px;\n            height: 65%;\n            background: orange;\n            float: right;\n        }\n        .center{\n            height: 100%;\n            background: green;\n            padding:0 200px;\n        }\n        .cenCon{\n            height: 100%;\n            background: purple;\n        }\n    </style>\n</head>\n<body>\n    <!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面\n    先写left和right;后写中间！！！必须这样子！！ -->\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n    <div class=\"center\">\n        <div class=\"cenCon\"></div>\n    </div>\n</body>\n</html>\n```\n\n#### 2  块元素垂直居中\n\n```\n1  弹性布局   ---  \n2  定位    50% 50%  减自身的一ban\n3  转行内块元素   line-height:100px  font-size:元素的高度    text-align：center\n4  把定位改成 transform \n```\n\n```\n1  弹性布局\ndisplay:flex;\njustify-content: center;\nalign-items: center;\n```\n\n```\n2  定位\nposition: absolute;\nleft:50%;\ntop:50%;\nmargin:-高度的一半 0 0 -宽度的一半。\n```\n\n```\n3  转行内块元素\ntext-align：center;\nline-height:100px;\nheight:100px;\n```\n\n```\n4  定位\nposition:absolute;\nleft:0;right:0;\ntop:0;bottom:0;\nmargin:auto;\n```\n\n#### 3  盒模型和怪异盒模型\n\n```\n普通盒模型     content + border*2 + paddign*2+margin*2 =  普通盒模型\n怪异盒模型     contnet + margin*2   = 怪异盒模型  \n```\n\n```\n1.两者区别\n\n标准盒模型总宽度 = width + 左右padding + 左右border + 左右margin\n\n标准盒模型总高度 = height + 上下padding + 上下border + 上下margin\n\n怪异盒模型总宽度 = width + 左右margin (width包含了padding和border)\n\n怪异盒模型总高度 = height + 上下margin (height包含了padding和border)\n\n注：当没有添加文档声明时，就会触发某些浏览器的怪异模式，如IE6\n\n2.如何将标准盒模型转换为怪异盒模型\n\n给给标准盒子加上这个属性：\n\n语法：box-sizing:border-box;\n\n注：box-sizing:content-box;  默认值\n```\n\n#### 4 解决浮动塌陷  \n\n```\n1 清除浮动\n2 overflow:hidden\n3 给父元素添加高度\n4 给父元素加边框\n5 给父元素加padding\n6 :after 给添加清除浮动\n```\n\n```\n方法1: 给父元素加overflow:hidden;\n方法2: 在浮动元素下面加空div,并添加样式\n       div{\n       \tclear:both;\n       \theight:0; \n       \toverflow:hidden;\n       \t}\n方法3: 万能清除浮动法：\n    选择符：after{\n           \tcontent: '';\n           \tclear: both;\n           \tdisplay:block;\n           \theight:0;\n           \tvisibility:hidden;\n           \toverflow: hidden;\n           }\n```\n\n#### 5 em ，rem , px,  vw,vh\n\n```\n1 em   父元素的倍数\n2 rem  根元素的倍数     （适配会根据rem来设定）  动态设置  html的font-size\n3 vw,vh   只适用于高版本浏览器  ie9以上   移动都可以用  【100%内核都是 -webkit-】\n4 px像素\n```\n\n```\n1 px就是像素，也是我们现在经常使用的基本单位，比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。\n2 em参考物是父元素的font-size，默认字体大小是16px，所以1em不是固定值，因为它会继承父元素的字体大小\n3 rem参考物是相对于根元素，我们在使用时可以在根元素设置一个参考值即可，相对于em使用，减少很大运算工作量，例：html大小为10px，12rem就是120px。\n4 % 是相对于父元素的大小设定的比率。\n5 vw是相对视口（viewport）的宽度而定的，长度等于视口宽度的1/100\n假如浏览器的宽度为200px，那么1vw就等于2px（200px/100）\n6 vh是相对视口（viewport）的高度而定的，长度等于视口高度的1/100\n假如浏览器的高度为500px，那么1vh就等于5px（500px/100）\n```\n\n####  6 边框一像素问题\n\n```\ntarnsfrom : scale(0.7)  缩放\n```\n\n```\n解决问题:移动端1像素变粗\n\t为什么移动端CSS里面写了1px，实际上看起来比1px粗；了解设备物理像素和逻辑像素的同学应该很容易理解，其实这两个px的含义其实是不一样的，UI设计师要求的1px是指设备的物理像素1px，而CSS里记录的像素是逻辑像素，它们之间存在一个比例关系，可以用javascript中的`window.devicePixelRatio`来获取，也可以用媒体查询的`-webkit-min-device-pixel-ratio`来获取。当然，比例多少与设备相关。在手机上border无法达到我们想要的效果。这是因为devicePixelRatio特性导致，iPhone的devicePixelRatio==2，而border-width: 1px描述的是设备独立像素，所以，border被放大到物理像素2px显示，在iPhone上就显得较粗。\n解决方案:transform: scale(0.5) 方案，用高度1px的div充当边框\n     div {\n            height: 1px;\n            background: #000;\n            overflow: hidden;\n        }\n        /* 2倍屏 */\n        @media only screen and (-webkit-min-device-pixel-ratio: 2.0) {\n            div {\n                -webkit-transform: scaleY(0.5);\n                transform: scaleY(0.5);\n            }\n        }\n        /* 3倍屏 */\n        @media only screen and (-webkit-min-device-pixel-ratio: 3.0) {\n            div {\n                -webkit-transform: scaleY(0.33);\n                transform: scaleY(0.33);\n            }\n        }\n```\n\n作者：果汁凉茶丶\n链接：https://www.jianshu.com/p/fa670b737a29\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n####  7  兼容问题 \n\n  链接1   https://blog.csdn.net/Jkssns/article/details/103456913   \n\n```\n1、IOS下input默认样式(圆角、阴影)\n解决方案\ninput {\n  -webkit-appearance: none;\n  border-radius: 0;\n  border: 1px #ccc solid;\n}\n\n2、在IOS下页面滑动卡顿，Android没问题\n解决方案\nbody {-webkit-overflow-scrolling:touch; overflow-scrolling: touch;}\n\n3、input type 改为button\n当input type为button，disabled为true，会出现背景色异常(其实就是禁用的样式)\n把input的disabled改为readonly\nopacity：1\n\n4、input type=text切换到英文输入法IOS下的问题\n解决方案\ninput添加autocapitalize属性\n<input class=\"SmallFour\" type=\"text\" autocapitalize=\"off\" />\n\n5、禁止数字自动识别为电话号码\n\n这个比较有用，因为一串数字在iphone的部分浏览器上会显示成蓝色，样式加成别的颜色也是不生效的。不是我亲测，在微信内部浏览器没问题，但是在safari上有问题，IOS系统版本12.1.4\n<div style=\"color: red\">1212312312321323</div>\n解决方案\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n6、input type=number之后，pc端出现上下箭头\n解决方案\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none !important;\n  margin: 0;\n}\n\n7、是图片填充到外层的框内，很好用，直接给图片添加样式。\n解决方案\nobject-fit: cover;\nwidth:100%;\nheight:100%;\n\n8、手机端按住不放 阻止浏览器默认响应事件 调试\n解决方案\n//clikMenu 你要点击的事件节点\nfunction touchendmovie(clikMenu){\n    var timeOutEvent = 0;\n    $(document).on('touchstart',clikMenu,function(e){\n        timeOutEvent = setTimeout(function(){\n        //这里编写你要执行的事件 },300);\n        //这里设置长按响应时间\n        e.preventDefault();\n    });\n    $(document).on('touchmove',clikMenu,function(e){\n        clearTimeout(timeOutEvent);\n        timeOutEvent = 0;\n    });\n    $(document).on('touchend',clikMenu,function(e){\n        e.stopPropagation();\n        if(timeOutEvent != 0 ){\n            console.log('这里是点击了一下'); \n        }\n        clearTimeout(timeOutEvent); \n    });\n}\n\n9、禁止复制、选中文本\n解决方案\n.el {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n   user-select: none;\n}\n\n10、input 的placeholder属性会使文本位置偏上\n解决方案\nline-height: （和input框的高度一样高）---pc端解决方法\nline-height：normal ---移动端解决方法\n```\n\n####  8 css预处理器\n\n​\t1 sass  less\n\n```\n\tCSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。\n```\n\n####  9 H5 新增新特性\n\n```\nnav , header ,footer ,session \n1  拖拽API\n2  input 新增类型\n3  视频音频\n4  canvas\n5  获取定位  谷歌浏览器不行（）  \n6  web存储   localStorage sessionStorage\n```\n\n```\nhttps://www.cnblogs.com/ainyi/p/9777841.html\nH5 新特性\n1. 语义化标签：header、footer、section、nav、aside、article\n2. 增强型表单：input 的多个 type\n3. 新增表单元素：datalist、keygen、output\n4. 新增表单属性：placehoder、required、min 和 max\n5. 音频视频：audio、video\n6. canvas\n7. 地理定位\n8. 拖拽\n9. 本地存储：localStorage - 没有时间限制的数据存储；sessionStorage - 针对一个 session 的数据存储，当用户关闭浏览器窗口后，数据会被删除\n10. 新事件：onresize、ondrag、onscroll、onmousewheel、onerror、onplay、onpause\n11. WebSocket：单个 TCP 连接上进行全双工通讯的协议\n```\n\n#### 10 适配 \n\n```\nrem来适配 \n1  后期字体大小不适配  就用px\n2  rem插件    \n```\n\n```\n\t由于rem是根据根元素的font-size大小而定，所以根据浏览器当前的分辨率改变font-size的值，就可以用rem作为统一单位适配移动端\n\t下图是不同宽度浏览器对应的font-size,可以引Rem自适应JS适配移动端。\n```\n\n![image-20201013185918101](https://vcdn.pharmcube.com/icon-close.png)\n\n#### 11 响应式布局\n\n```\n1  不同的终端显示不同的布局   media\n2  不同分辨率显示布局一样 （视频）\n```\n\n```\n@media screen and (max-width: 990px) and (min-width: 768px) {\n   css样式\n}\n```\n\n\n\n#### 12  翻译 \n\n```\n1  几版语言写几版页面\n2  vue-\n```\n\n\n\n### JAVASCRIPT\n\n#### 13   javascript 数据类型\n\n``` \n基本类型  String (显示)  Number(运算)  Boolean(判断)  Undefined(声明未赋值) == Null(对象的空) Symbol(做键值)\n引用类型  Object Array Function\n\n区别\n基本类型存在  栈中   用完就销毁    之不能长存\n引用类型      堆中   不会自动销毁\n\n引用赋值和浅拷贝和深拷贝\n\n引用赋值   就是 =   引用同一个地址  所有如果改变某个属性  所有引用都改变\n浅拷贝   只拷贝一层   [...arr] {...obj}\n深拷贝   遍历对象进行递归 ， JSON.stringify , JSON.parse ,  immutable.js\n```\n\n```\nhttps://www.jianshu.com/p/cf1e9d7e94fb\n1.数据类型：\n基本数据类型：String，Boolean，Number，Undefined，Null；\n引用数据类型：Object(Array，Date，RegExp，Function)；\n基本数据类型和引用数据类型的区别：\n    保存位置不同：基本数据类型保存在栈内存中，引用数据类型保存在堆内存中，然后在栈内存中保存了一个对堆内存中实际对象的引用，即数据在堆内存中的地址，JS对引用数据类型的操作都是操作对象的引用而不是实际的对象，如果obj1拷贝了obj2，那么这两个引用数据类型就指向了同一个堆内存对象，具体操作是obj1将栈内存的引用地址复制了一份给obj2，因而它们共同指向了一个堆内存对象；\n为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？\n1）堆比栈大，栈比堆速度快；\n2）基本数据类型比较稳定，而且相对来说占用的内存小；\n3）引用数据类型大小是动态的，而且是无限的，引用值的大小会改变，不能把它放在栈中，否则会降低变量查找的速度，因此放在变量栈空间的值是该对象存储在堆中的地址，地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响；\n4）堆内存是无序存储，可以根据引用直接获取；\n2.深拷贝，浅拷贝\n(1)深拷贝和浅拷贝简单解释：\n     浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；\n(2)区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；\n(3)浅拷贝：\n//手动实现\nfunction simpleCopy(obj1) {\n   var obj2 = Array.isArray(obj1) ? [] : {};\n   for (let i in obj1) {\n   obj2[i] = obj1[i];\n  }\n   return obj2;\n}\nvar obj1 = {\n   a: 1,\n   b: 2,\n   c: {\n   d: 3\n  }\n}\nvar obj2 = simpleCopy(obj1);\nobj2.a = 3;\nobj2.c.d = 4;\nalert(obj1.a); // 1\nalert(obj2.a); // 3\nalert(obj1.c.d); // 4\nalert(obj2.c.d); // 4\n//使用Object.assign()实现浅拷贝\nlet obj1 = {\n   a: {\n     b: 1\n   },\n   c: 2\n}\nlet obj2 = Object.assign({},obj1)\nobj2.a.b = 3;\nobj2.c = 3\nconsole.log(obj1.a.b); // 3\nconsole.log(obj2.a.b); // 3\nconsole.log(obj1.c); // 2\nconsole.log(obj2.c); // 3\n//展开运算实现浅拷贝\nvar obj1={\n    a:1,\n    b:2,\n    c:{\n        d:3\n    }\n}\nvar obj2={...obj1}\nobj2.a=11\nobj2.c.d=13\nconsole.log(obj1,obj2)\n(4)深拷贝\n//递归实现深拷贝\nfunction deepCopy(obj1) {\n  var obj2 = Array.isArray(obj1) ? [] : {};\n  if (obj1 && typeof obj1 === \"object\") {\n    for (var i in obj1) {\n      if (obj1.hasOwnProperty(i)) {\n        // 如果子属性为引用数据类型，递归复制\n        if (obj1[i] && typeof obj1[i] === \"object\") {\n          obj2[i] = deepCopy(obj1[i]);\n        } else {\n          // 如果是基本数据类型，只是简单的复制\n          obj2[i] = obj1[i];\n        }\n      }\n    }\n  }\n  return obj2;\n}\nvar obj1 = {\n  a: 1,\n  b: 2,\n  c: {\n    d: 3\n  }\n}\nvar obj2 = deepCopy(obj1);\nobj2.a = 3;\nobj2.c.d = 4;\nalert(obj1.a); // 1\nalert(obj2.a); // 3\nalert(obj1.c.d); // 3\nalert(obj2.c.d); // 4\n//使用JSON.stringify和JSON.parse实现深拷贝\n function deepCopy(obj1){\n    let _obj = JSON.stringify(obj1);\n    let obj2 = JSON.parse(_obj);\n    return obj2;\n  }\nvar a = [1, [1, 2], 3, 4];\nvar b = deepCopy(a);\nb[1][0] = 2;\nalert(a); // 1,1,2,3,4\nalert(b); // 2,2,2,3,4\n缺点：对象里的值为函数无法拷贝\nlet obj1 = {\n   fun:function(){\n      alert(123);\n   }\n}\nlet obj2 = JSON.parse(JSON.stringify(obj1));\nconsole.log(typeof obj1.fun); // function\nconsole.log(typeof obj2.fun); // undefined\n//jquery实现深拷贝\njquery 提供一个$.extend可以用来做深拷贝；\n```\n\n\n\n#### 14   排序\n\n```\nhttps://segmentfault.com/a/1190000016286789 \nsort\n冒泡\n```\n\n```\n1.sort排序\n按升序排列\narr.sort(\n    function(n1,n2){\n    \treturn n1-n2\n})\n按降序排列\narr.sort(\n\tfunction(n1,n2){\n\t\treturn n2-n1\n})\n2.冒泡排序\nfunction bubbleSort(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        for (var j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[i]) {\n                [arr[j], arr[i]] = [arr[i], arr[j]]\n            }\n        }\n    }\n}\n3.选择排序\nfunction selectSort(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        var min = i\n        for (var j = i + 1; j < arr.length; j++) {\n            if (arr[min] > arr[j]) {\n                min = j\n            }\n        }\n        if (i != min) {\n            [arr[min], arr[i]] = [arr[i], arr[min]]\n        }\n    }\n}\n4.快速排序\nfunction quickSort(arr){\n  qSort(0, arr.length - 1);\n  return arr;\n  function qSort(left, right){\n    if (left >= right)//两个数相遇则结束该轮排序\n      return;\n    var key = arr[left];//取最左边的元素作为标识数\n    var i = left;\n    var j = right;\n    while (i != j){//两个数相遇则结束该轮排序\n      while (i != j && arr[j] >= key) j--;//j前移\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n      while (i != j && arr[i] <= key) i++;//i后移\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n    }\n    qSort(left, j - 1);//对标识数前面的数继续该方法排序\n    qSort(j + 1, right);//对标识数后面的数继续该方法排序\n  }\n}\n```\n\n#### 15  去重  \n\n```\nhttps://www.cnblogs.com/lewiscutey/p/8269567.html\n```\n\n```\nSet()方法去重(ES6新增)\nfunction unique(arr){\n    return [...(new Set(arr))];\n}\n```\n\n#### 16 闭包   \n\n```\n1  声明局部变量供外部使用，防止变量污染全局\n2  闭包因为有函数  所以会存在堆中   可以存储值   一般会用来做缓存\n缺点  容易造成内存泄漏  \n解决方案  手动清除\n\n3 写法 \n\t函数嵌套\n\t内部函数会作为外部函数的返回值\n\t内部函数因为作用域链可以访问外部函数的变量 会做为内部函数的返回值\n\n代码 \n  function fn1(){\n          var a = 10\n          return function(){\n              return  a\n          }\n      }\n```\n\n```\n闭包概念：\n1. 有一个 A 函数，再 A 函数内部返回一个 B 函数\n2. 再 A 函数外部有变量引用这个 B 函数\n3. B 函数内部访问着 A 函数内部的私有变量\n以上三个条件缺一不可\n闭包特点：\n1. 作用域空间不销毁\n- 优点： 因为不销毁，变量页不会销毁，增加了变量的生命周期\n- 缺点： 因为不销毁，会一直占用内存，多了以后就会导致内存溢出\n2. 可以利用闭包访问再一个函数外部访问函数内部的变量\n- 优点： 可以再函数外部访问内部数据\n- 缺点： 必须要时刻保持引用，导致函数执行栈不被销毁\n3. 保护私有变量\n- 优点： 可以把一些变量放在函数里面，不会污染全局\n- 缺点： 要利用闭包函数才能访问，不是很方便\n代码：\nfunction fun() {\n    var count = 1;\n    return function () {\n        count++\n        console.log(count)\n    }\n}\nvar fn = fun()\nfn()  /* 2 */\nfn()  /* 3 */\n```\n\n#### 17 面向对象\t--- 封装\n\n```\n面向对象是一种编程思想  符合我们的生活逻辑\n解\n（面向过程）\n答案\n\n面向过程也是一种编程思想   数学逻辑的映射   \n解  \n第一步骤\n第二步骤\n第三步骤\n结果\n\n```\n\n```\n面向对象编程，使用构造函数构造对象\n1. 先书写一个构造函数\n2. 在构造函数内向对象添加一些成员\n3.使用这个构造函数创造一个对象（和 new 连用）\n4.构造函数可以创建对象，并且创建一个带有属性和方法的对象\n5.面向对象就是要想办法找到一个有属性和方法的对象\n6.面向对象就是我们自己制造构造函数的过程\n代码：\n// 1. 先创造一个构造函数\nfunction Person(name, gender) {\n  this.age = 18\n  this.name = name\n  this.gender = gender\n}\n// 2. 使用构造函数创建对象\nvar p1 = new Person('Jack', 'man')\nvar p2 = new Person('Rose', 'woman')\n// 3. 使用原型向构造函数添加方法：\nPerson.prototype.sayHi = function () {\n  console.log('hello')\n}\np1.sayHi()\n// 4. 实例化对象的 __proto__ 和所属的构造函数的 prototype 是一个对象空间\nconsole.log(p1.__proto__ === Person.prototype) // true\n// 5. p1和p2都是Person的实例,p1.__proto__ 和 p2.__proto__ 指向的都是 Person.prototype,两个实例化对象p1和p2执行的是同一个方法。即构造函数原型Person.prototype里的方法。\nconsole.log(p1.sayHi === p2.sayHi) // true\n```\n\n#### 18 原型链\n\n```\n每一个对象都有原型对象 ， 原型对象也有原型对象 ，依次向上，直到Object.prototype如果还没有最会指向null,这样形成一个线性的链就叫做原型链\n原型链特点 原型链上的方法和属性 实例可以共享\n\n共享的原因是什么？\n实例会有指针  __proto__ 会指向源性对象\n```\n\n```\n原型链：\n实例化对象的__proto__指向其构造函数的prototype,实例化对象的__proto__里面也有一个成员叫做constructor指向当前这个对象所属的构造函数。实例化对象的__proto__的__proto__指向顶级构造函数Object的prototype,实例化对象的__proto__的__proto__里面的constructor指向顶级构造函数Object。Object.prototype就到顶了，Object.prototype 的 __proto__ 就是 null。\n原型链的访问原则\n访问一个对象的成员的时候,自己没有就会去 __proto__ 中找,如果 __proto__ 里面没有就再去 __proto__ 里面找,一直找到 Object.prototype 里面都没有，那么就会返回 undefiend。\n```\n\n#### 19 继承  说话的继承都是为了优化代码，优化性 \n\n```\n组合继承 = 借用构造函数继承 + 原型对象继承\n\n //超类  父类   假继承\n function A(name, age) {\n \tthis.name = name;\n \tthis.age = age;\n }\n A.prototype.eat = function () {\n\t console.log(this.name + \"吃 \" + this.name);\n };\nDog.prototype = new A();\nCat.prototype = new A();\n function Dog(name, age) {\n \t\tA.call(this, name, age);\n }\n function Cat(name, age) {\n\t A.call(this, name, age);\n }\n var dog1 = new Dog(\"小白\", 3);\n var dog2 = new Dog(\"小白1\", 31);\n var cat1 = new Cat(\"喵咪\", 3);\n console.log(dog1, cat1);\n dog1.eat();\n cat1.eat();\nconsole.log(dog1.eat === dog2.eat); //true\n```\n\n```\n1.组合继承\nfunction Person() {\n    this.name = 'Jack'\n}\nPerson.prototype.sayHi = function () {\n    console.log('hello')\n}\nfunction Student() {\n    Person.call(this)\n}\nStudent.prototype = new Person()\nvar s1 = new Student()\n2.ES6继承\nfunction Person() {\n    this.name = 'Jack'\n}\nPerson.prototype.sayHi = function () {\n    console.log('hello')\n}\n// 下面表示创造一个 Student 类，继承自 Person 类\nclass Student extends Person {\n    constructor() {\n        // 必须在 constructor 里面执行一下 super() 完成继承 \n        super()\n    }\n}\nvar s1 = new Student()\n```\n\n#### 20   本地存储    \n\n```\ncookie  （一般情况下  cookie都是从后台发送的）\nweb存储  (低版本不兼容)   localStorage （长存）  sesstionStorage (会话 关闭浏览器销毁)\n\nif(localStorage){\n\t使用localStorage\n}else{\n\tcookie\n}\n```\n\n```\n1.cookie:\ncookie是一个以字符串的形式存储数据的位置,在字符串中以key=value的形式出现,每一个key=value是一条数据,多个数据之间以 ; 分割。每一个 HTTP 请求都会在请求头中携带 cookie 到服务端,每一个 HTTP 响应都会在响应头中携带 cookie 到客户端,也就是,cookie 是不需要我们手动设置，就会自动在 客户端 和 服务端之间游走的数据。\n读取cookie：\nconst cookie = document.cookie\nconsole.log(cookie) // 就能得到当前 cookie 的值\n设置cookie：\n// 下面这个 cookie 数据会在 2043 年 12 月 18 日 12 点以后过期，过期后会自动消失\ndocument.cookie = 'b=200;expires=Thu, 18 Dec 2043 12:00:00 GMT\";'\n删除cookie：\n// 因为 cookie 不能直接删除\n// 所以我们只能把某一条 cookie 的过期时间设置成当前时间之前\n// 那么浏览器就会自动删除 cookie\ndocument.cookie = 'b=200;expires=Thu, 18 Dec 2018 12:00:00 GMT\";'\n2.localStorage 本地存储：\n没有过期时间,不会跟随服务器发送,大小5M,不用在服务器下运行。\n// 设置\nlocalStorage.setItem('item', 'abc')\n// 获取\nconsole.log(localStorage.getItem('item'))\n// 删除\nlocalStorage.removeItem('item')\n// 清空\nlocalStorage.clear()\n3.sessionStorage 本地存储:\n会话结束就没有了,不会跟随服务器发送,大小5M,不用在服务器下运行,写法和localStorage完全一样。\n// 设置\nsessionStorage.setItem('item', 'abc')\n// 获取\nconsole.log(sessionStorage.getItem('item'))\n// 删除\nsessionStorage.removeItem('item')\n// 清空\nsessionStorage.clear()\n```\n\n\n\n#### 21  ajax  \n\n```\n前后端交互技术  核心两个\nXMLHttpRequest   ---  $.ajax  axios\nfetch  -- fetch\n\n1 ajax 原理\n  1） 获取核心对象  做兼容\n  2） 发送请求   xhr.open(\"methods\",url,true)\n  3)  发送参数   xhr.send(null)\n  4)  监听变化触发函数   xhr.onreadystatechange\n \n2 axios 二次分装    \n\t请求拦截器  修改参数类型 ， 统一传固定参数 。。。\n\t相应拦截器  错误几种处理  \n\n3 $.ajax  当你想用 jsonp的时候  用封装$.ajax \n```\n\n```\n1. ajax：\najax全名async javascript and XML(异步的javascript和XML),客户端给服务端发送消息的工具，以及接受响应的工具。\n(1)创建一个 ajax 对象\nconst xhr = new XMLHttpRequest()\n(2)配置链接信息\n// xhr.open('请求方式', '请求地址', 是否异步默认 true 表示异步false 表示同步)\nxhr.open('get', './data.php')\n(3)发送请求\nxhr.send()\n(4)获得相应数据\n// ajax状态码 xhr.readyState,只有当 readyState === 4 的时候，我们才可以正常使用服务端给我们的数据\n// 记录http状态码 xhr.status,200 ~ 299 表示本次请求成功了\n// readyStateChange事件专门用来监听ajax对象\n// responseText用来记录服务端给我们的响应体内容的\nxhr.onreadyStateChange = function () {\n  if (xhr.readyState === 4 && /^2\\d{2|$/.test(xhr.status)) {\n    console.log(xhr.responseText)\n  }\n}\n(5)发送参数\n// get 请求的参数就直接在 url 后面进行拼接就可以\nxhr.open('get', './data.php?a=100&b=200')\n// post 请求的参数是携带在请求体中的,必须要先设置一下请求头中的 content-type\n// application/x-www-form-urlencoded 表示的数据格式就是 key=value&key=value\nxhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded')\nxhr.send('a=100&b=200')\n2. axios:\n(1)设置拦截器\nimport axios from \"axios\";\nconst fetchData = axios.create({\n    baseURL: \"http://localhost:3000\", // 请求地址前缀\n    withCredentials: true, // 允许携带cookie\n});\n//添加请求拦截器\nfetchData.interceptors.request.use(\n    function (config) {\n        if (config.method == \"get\") {\n            config.params = {\n                ...config.params,\n                token: JSON.parse(localStorage.getItem(\"user\")).token,  //携带token\n                cookie: JSON.parse(localStorage.getItem(\"user\")).cookie,  //携带cookie\n            };\n        }\n        if (config.method == \"post\") {\n            config.data = {\n                ...config.data,\n                token: JSON.parse(localStorage.getItem(\"user\")).token,  //携带token\n                cookie: JSON.parse(localStorage.getItem(\"user\")).cookie,   //携带cookie\n            };\n        }\n        return config;\n    },\n    function (error) {\n        //请求错误时做些事\n        return Promise.reject(error);\n    }\n);\n//添加响应拦截器\nfetchData.interceptors.response.use(\n    function (response) {\n        //对响应数据做些事\n        return response;\n    },\n    function (error) {\n        //响应错误时做些事\n        return Promise.reject(error);\n    }\n);\nexport default fetchData;\n(2)二次封装\n// 导入拦截器\nimport fetchData from \"./fetchData\";\n// get请求用params传参\nexport async function getPlayList(data = {}) {\n  return await fetchData.get(\"/top/playlist\", {\n    params: data,\n  });\n}\n// post请求用data传参\nexport async function login(data) {\n  return await fetchData.post(\"/login/cellphone\", data);\n}\n3. jsonp:\n(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。\n(2)使用Jquery封装函数$.ajax\n$.ajax({\n    url: \"http://127.0.0.1:8081/list\",\n    dataType: \"jsonp\",\n    success: (res) => {\n    \tconsole.log(res)\n    },\n});\n```\n\n#### 22 防抖 和 节流  \n\n```\n1 使用场景 \n   1 ) 搜索的时候 ， 很容易重复触发请求，怎么避免这个问题\n   2 ) 根据移动坐标来触发验证  ， 滑动验证码\n   \nhttps://segmentfault.com/a/1190000018428170    看看文章 （）\n```\n\n```\n1. 防抖：\n对于短时间内连续触发的事件（如滚动事件），防抖的含义就是让某个时间期限内，事件处理函数只执行一次。\nfunction debounce(fn,delay){\n    let timer = null //借助闭包\n    return function() {\n        if(timer){\n            clearTimeout(timer) \n        }\n        timer = setTimeout(fn,delay) // 简化写法\n    }\n}\nfunction showTop  () {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n　　console.log('滚动条位置：' + scrollTop);\n}\nwindow.onscroll = debounce(showTop,1000)\n2. 节流：\n如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效。\nfunction throttle(fn,delay){\n    let valid = true\n    return function() {\n       if(!valid){\n           //休息时间 暂不接客\n           return false \n       }\n       // 工作时间，执行函数并且在间隔期内把状态位设为无效\n        valid = false\n        setTimeout(() => {\n            fn()\n            valid = true;\n        }, delay)\n    }\n}\nfunction showTop  () {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n　　console.log('滚动条位置：' + scrollTop);\n}\nwindow.onscroll = throttle(showTop,1000) \n```\n\n\n\n#### 23  事件委托   提高性能\n\n```\n1  利用的是冒泡原理 ，将事件注册给父辈组件，因为冒泡点击本身的时候父组件会触发，可以通过判断事件源，来判断是谁触发的从而实现事件委托\n2  减少了事件注册   ， 动态添加的元素依然会享有事件\n```\n\n```\n事件委托：\n可以给未来元素添加事件\n<body>\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n  </ul>\n  <script>\n  \tvar oUl = docuemnt.querySelector('ul')   \n    oUl.addEventListener('click', function (e) {\n      e = e || window.event\n      var target = e.target || e.srcElement\n      if (target.nodeName === 'LI') {\n        console.log('我是 li，我被点击了')\n      }\n    })\n  </script>\n</body>\n```\n\n\n\n#### 24 事件流    \n\n```\n冒泡  --  从内向外  -- 事件委托\n捕获  --  从外向内  --  改热键 \n\ndiv.addEventListener(\"click\",function(){},false) --  removeEventLisener\ndiv.onclick=function(){}\n```\n\n```\n1. 冒泡：\n就是从事件目标的事件处理函数开始，依次向外，直到 window 的事件处理函数触发，也就是从下向上的执行事件处理函数\n2. 捕获：\n就是从 window 的事件处理函数开始，依次向内，直到事件目标的事件处理函数执行，也就是从上向下的执行事件处理函数\n事件触发默认冒泡，从内向外触发。\n阻止冒泡的几种方式：\n(1) e.stopPropagation() 点击只出现li\n<ul>\n    <li>1</li>\n</ul>\n<script>\n    var ul = document.querySelector('ul')\n    var li = document.querySelector('li')\n    li.addEventListener('click', function (e) {\n        e.stopPropagation()\n        console.log('li')\n    })\n    ul.addEventListener('click', function () {\n        console.log('ul')\n    })\n</script>\n(2)e.cancelBubble = true 点击只出现li\n<ul>\n    <li>1</li>\n</ul>\n<script>\n    var ul = document.querySelector('ul')\n    var li = document.querySelector('li')\n    li.addEventListener('click', function (e) {\n        e.cancelBubble = true\n        console.log('li')\n    })\n    ul.addEventListener('click', function () {\n        console.log('ul')\n    })\n</script>\n(3)事件监听第三个参数true,事件捕获，默认false,事件冒泡。冒泡先出现li,再出现ul。捕获先出现ul,再出现li。\n<ul>\n    <li>1</li>\n</ul>\n<script>\n    var ul = document.querySelector('ul')\n    var li = document.querySelector('li')\n    li.addEventListener('click', function (e) {\n        console.log('li')\n    })\n    ul.addEventListener('click', function () {\n        console.log('ul')\n    },true)\n</script>\n\n```\n\n\n\n#### 25  跨域 \n\n```\n1  同源策略    端口号  协议  域名     部署到同原\n2  cors 服务器设置响应头    允许访问      nginx\n3  使用webpack代理 （开发过程中有用）    打包之后不生效\n    proxy: {\n        \"/api\": {\n        target: \"http://192.168.x.xxx:8090\", // 要访问的接口域名\n        ws: true, // 是否启用websockets\n        changeOrigin: true, //开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题\n        pathRewrite: {\n        \"^/api\": \"\", //这里理解成用'/api'代替target里面的地址,比如我要调用'http://40.00.100.100:3002/user/add'，直接写'/api/user/add'即可\n        },\n        },\n    },\n 4  jsonp  原理    纯前端技术跨域  （需要后端配合）\n 5  iframe 跨域\n 6  websocket  可以做跨域\n```\n\n```\nhttps://juejin.im/post/6844904126246027278?utm_source=wechat_session&utm_medium=social&utm_oi=665117609675198464#heading-28\n1 同源策略：请求协议/域名/端口号全部相同。\n2 CORS：跨域资源共享(浏览器自带机制)\n跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。对于前端来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求,实现CORS通信的关键是服务器。\nNode 中的解决方案\n直接使用中间件\nconst cors = require(\"koa-cors\");\napp.use(cors());\n传递cookie前端需设置 withCredentials: true,后端需设置Access-Control-Allow-Credentials为true,Access-Control-Allow-Origin不为*\n3 nginx反向代理\n(1)安装nginx\n(2)配置nginx，把localhost:8080和localhost:8000统一配置在统一服务器local.test(自定义域名)下。\nserver {\n        listen 80;\n        server_name local.test;\n        location /api {\n            proxy_pass http://localhost:8080;\n        }\n        location / {\n            proxy_pass http://localhost:8000;\n        }\n}\n(3)重启nginx\n(4)前端请求\n<script> \n\taxios.defaults.withCredentials = true; \n\tlogin.onclick = () => { \n\t\taxios.post(\"/api/login\");\n\t};\n</script>\n4 使用webpack代理(开发过程中有用,打包之后不生效)\n配置webpack中的devServe\ndevServer: {\n    open: true,\n    host: 'localhost',\n    port: 8000,\n    https: false,\n    hotOnly: false,\n    proxy: {\n        // 配置跨域\n        '/api': {\n            target: 'http://localhost:8080/',  // 要访问的接口域名\n            ws: true,  // 是否启用websockets\n            changOrigin: true, //开启代理\n       \t\tpathRewrite: {\n        \t'^/api': '' //这里理解成用'/api'代替target里面的地址,比如我要调\t用'http://localhost:8080/login'，直接写'/api/login'即可\n        \t}\n        }\n    },\n    before: app => { }\n}\n5 jsonp跨域\n(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。\n<script>\n    var script=document.createElement('script')\n    function getData(data){\n        console.log(data)\n    }\n    script.src='http://localhost:8080?callback=getData'\n    document.body.appendChild(script)\n</script>\n(2)使用Jquery封装函数$.ajax\n$.ajax({\n    url: \"http://127.0.0.1:8081/list\",\n    dataType: \"jsonp\",\n    success: (res) => {\n    \tconsole.log(res)\n    },\n});\n\n```\n\n#### 26  当你输入网址的时候经历了什么？\n\n```\nhttps://segmentfault.com/a/1190000006879700  \n```\n\n```\n1.DNS解析:DNS解析的过程就是网址到IP地址的转换,当发送请求时，可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡。\n2.TCP连接\nTCP/IP 协议\n三次握手：\n(1)客户端发送一个消息给到服务端\n(2)服务端回给客户端一个消息\n(3)客户端再回给服务端一个消息\n四次挥手：\n(1)客户端发送一个我要断开的消息给服务端\n(2)服务端接受到以后发送一个消息告诉客户端我已经进入关闭等待状态\n(3)服务端再次发送一个消息告诉客户端，这个是我的最后一次消息给你，当我再接受到消息的时候就会关闭\n(4)客户端接受到服务端的消息以后，告诉服务器，我已经关闭，这个是给你的最后一个消息\n3.发送HTTP请求\n每一个请求都会有一个请求报文(请求行，请求头，请求空行，请求体)\n完整请求报文\n(1)请求行\nPOST /user HTTP/1.1     \n# POST 请求方式\n# /user 请求URL（不包含域名）\n# HTTP/1.1 请求协议版本    \n(2)请求头\nuser-agent: Mozilla/5.0 # 产生请求的浏览器信息\naccept: application/json # 表示客户端希望接受的数据类型\nContent-Type: application/x-www-form-urlencoded # 客户端发送的实体数据格式\nHost: 127.0.0.1 # 请求的主机名（IP） \n(3)请求空行\n#（此处必须有一空行\n(3)请求体\nname=world \n4.服务器处理请求并返回HTTP报文\n响应报文(状态行，响应头，响应体)\n(1)状态行\nHTTP/1.1 200 OK\n# HTTP/1.1 服务器使用的 HTTP 协议版本\n# 200 响应状态码\n# OK 对响应状态码的简单解释\n(2)响应头\nDate: Jan, 14 Aug 2019 12:42:30 GMT # 服务器时间\nServer: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45 # 服务器类型\nContent-Type: text/html # 服务端给客户端的数据类型\nContent-Length: 11 # 服务端给客户端的数据长度\n(3)响应体\nhello world\n# 服务端给客户端的响应数据\n5.浏览器解析渲染页面\n   浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为reflow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。\n6.连接结束\n```\n\n\n\n#### 27  GET POST 区别\n\n```\n1  post  上传   都可以用post\n2  get   明文请求     jsonp必须用get    请求内容在地址栏显示  不安全   \n```\n\n```\n1、传送方式：get通过地址栏传输，post通过报文传输。\n2、传送长度：get参数有长度限制（受限于url长度），而post无限制\n3、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；\n```\n\n#### 28 this指向\n\n```\n普通函数的this   谁调用指向谁     把谁找到   就看.前面的对象   全局window可以省略的\n箭头函数的this会指向上层环境  不会改变\n```\n\n```\n函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系\n1.全局定义的函数直接调用，this => window\n2.对象内部的方法调用，this => 调用者\n3.定时器的处理函数，this => window\n4.事件处理函数，this => 事件源\n5.自调用函数，this => window\n6.call 和 apply 和 bind强行改变this指向\n函数名.call(要改变的 this 指向，要给函数传递的参数1，要给函数传递的参数2， ...)\n函数名.apply(要改变的 this 指向，[要给函数传递的参数1， 要给函数传递的参数2， ...])\nbind方法不会立即执行函数，而是返回一个已经改变了 this 指向的函数\nvar newFn = 函数名.bind(要改变的 this 指向);\nnewFn(传递参数)\n7.在框架组件中this指向当前组件的实例化对象\n```\n\n\n\n#### 29  webpack  基础\n\n```\nentry :入口      多页应用 多入口多出口\noutput: 出口\nmodule:{   loader\n\trules:[]\n}\nplugins:[ ],\ndevServer:{}  //webpack服务器\n```\n\n```\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  mode: \"development\",\n  entry: \"./src/main.js\",     //入口文件\n  output: {                    //口文件\n    filename: \"main.js\",\n    path: path.join(__dirname, \"../dist\"),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: \"style-loader\", // 将 JS 字符串生成为 style 节点\n          },\n          {\n            loader: \"css-loader\", // 将 CSS 转化成 CommonJS 模块\n          },\n          {\n            loader: \"sass-loader\", // 将 Sass 编译成 CSS\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./index.html\"\n    }),\n  ],\n  devServer: {\n    // contentBase: path.join(__dirname, \"../dist\"),\n    port: 3000,   //端口号\n    open: true,  //是否自动打开浏览器\n    hot: true,  // 热更新\n    proxy: {\n      '/api': {// '/api':匹配项\n        target: 'http://www.baidu.com',// 接口的域名\n        // secure: false,// 如果是https接口，需要配置这个参数\n        changeOrigin: true,// 如果接口跨域，需要进行这个参数配置\n        // pathRewrite: {// 如果接口本身没有/api需要通过pathRewrite来重写了地址\n        //   '^api': ''\n        // }\n      }\n    }\n  }\n};\n\n```\n\n\n\n#### 30  call apply  bind \n\n```\n统一的作用都是  修改this指向\ncall(对象,参数1，参数2，参数3) 直接调用\napply(对象，[])  直接调用\nbind(对象，参数1，参数) 必须还需要加（）调用\n```\n\n### ES6\n\n#### 31 promise\n\n```\n1 解决异步回调问题  \n2  因为  我们开发程序 有可能是有关联的 \n\t例如   可以程序 有三步组成   第一步的结果会影响到第二步 ， 第二步结果会影响第三步  \t\n3 Promise.then().then().then().catch()\n\nnew Promise((resolve,reject)=>{\n\tresove('ok') // 传递给.then\n\treject(err)  // 传递catch\n})\n\nasync  --- await\n\nasync function () { }  返回promise对象\nawait 将异步转成同步\n\nPromise.all()\nPromise.race()\n```\n\n```\n1.promise语法\nnew Promise(function (resolve, reject) {\n  // resolve 表示成功的回调\n  // reject 表示失败的回调\n}).then(function (res) {\n  // 成功的函数\n}).catch(function (err) {\n  // 失败的函数\n})\n2.async/await语法\nasync function fn() {\n  const res = await promise对象\n}\n```\n\n\n\n#### 32  let const var  区别\n\n```\nlet,const 会产生块及作用域 ，声明的变量就是私有的\nvar  变量提升（预解析）  let const 没有\nlet  可以修改 但是不可重复声明  \nconst  不可以修改    我们一般定义 常量  配置属性\n\n使用的一般我们会根据 作用域来选    -----   解决了 变量徐然全局的问题  ----- 有点类似闭包的特性\n\n```\n\n\n\n#### 33 箭头函数 \n\n```\n1 使用情况  在vue和react或者其他框架里面，我们一般情况下  this都应该指向当前组件 ， 如果用普通函数会导致this指向不明确，所以用箭头函数比较合适\n2 箭头函数的this始终指向它的外部环境，不会发生改变\n3 let  foo = () => {}      后面有没有大括号是两种  如果有大括号就是普通函数   如果不加大括号  自动加return\n4 不能能做构造函数    因为this指向固话\n5 箭头函数没有 arguments对象 （获取实参的集合）， 我们可以通过 ...拓展运算符来模拟实参集合\n```\n\n```\n 箭头函数只能简写函数表达式，不能简写声明式函数\n 语法： (函数的行参) => { 函数体内要执行的代码 }\n 箭头函数内部没有 this，箭头函数的 this 是上下文的 this\n 箭头函数内部没有 arguments 这个参数集合\n 函数的行参只有一个的时候可以不写 ()其余情况必须写\n 函数体只有一行代码的时候，可以不写 {}，并且会自动 return\n```\n\n\n\n#### 34  解构赋值\n\n```\na=10  b=11   \n[b,a]= [a,b]\n```\n\n```\n解构对象\nconst obj = {\n  name: 'Jack',\n  age: 18,\n  gender: '男'\n}\nlet { name, age, gender } = obj\n解构数组\nconst arr = ['Jack', 'Rose', 'Tom']\nlet [a, b, c] = arr\n```\n\n\n\n#### 35 模板字符串 \n\n```\n` ${} `\n```\n\n```\nlet num = 100\nlet str = `hello${num}world${num}`\nconsole.log(str) // hello100world100\n```\n\n#### 36  新增方法\n\n\n\n#### 37  class  类\n\n```\nclass Person {}\nclass Man extends Preson{\n\tconstructor(){\n\t\tsuper()\n\t}\n}\n```\n\n```\n// 下面表示创造一个 Student 类，继承自 Person 类\nclass Student extends Person {\n    constructor () {\n        // 必须在 constructor 里面执行一下 super() 完成继承 \n        super()\n    }\n}\n```\n\n#### 38 Set ,Map   去重\n\n```\narr = [...new Set(arr)]\n```\n\n```\nhttps://www.cnblogs.com/leftJS/p/11080962.html\n1.set类似于数组，但是成员的值都是唯一的，没有重复的值。\n(1)实例对象方法\nadd(value)：添加某个值，返回 Set 结构本身(可以链式调用)。\ndelete(value)：删除某个值，删除成功返回true，否则返回false。\nhas(value)：返回一个布尔值，表示该值是否为Set的成员。\nclear()：清除所有成员，没有返回值。\nconst mySet = new Set(['a', 'a', 'b', 1, 2, 1])\nconsole.log(mySet)  // {'a', 'b', 1, 2}   \nmyset.add('c').add({'a': 1})\nconsole.log(mySet) // {'a', 'b', 1, 2, 'c', {a: 1}} \nconsole.log(mySet.size)     // 6\nmySet.has(2)     // true\n(2)遍历方法\nkeys()：返回键名的遍历器。\nvalues()：返回键值的遍历器。\nentries()：返回键值对的遍历器。\nforEach()：使用回调函数遍历每个成员。\n(3)数组去重\nfunction unique(arr){\n    return [...(new Set(arr))];\n}\n2.map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。\n(1)map对象的方法\nset(key, val): 向Map中添加新元素\nget(key): 通过键值查找特定的数值并返回\nhas(key): 判断Map对象中是否有Key所对应的值，有返回true,否则返回false\ndelete(key): 通过键值从Map中移除对应的数据\nclear(): 将这个Map中的所有元素删除\nconst m1 = new Map([['a', 111], ['b', 222]])\nconsole.log(m1) // {\"a\" => 111, \"b\" => 222}\nm1.get('a')  // 111\nconst m2 = new Map([['c', 3]])\nconst m3 = new Map(m2)\nm3.get('c') // 3\nm3.has('c') // true\nm3.set('d', 555)\nm3.get('d') // 555\n(2)遍历方法\nkeys()：返回键名的遍历器\nvalues()：返回键值的遍历器\nentries()：返回键值对的遍历器\nforEach()：使用回调函数遍历每个成员\n(3)数组去重\nfunction unique(arr) {\n    //定义常量 res,值为一个Map对象实例\n    const res = new Map();\n    //返回arr数组过滤后的结果，结果为一个数组\n    //过滤条件是，如果res中没有某个键，就设置这个键的值为1\n    return arr.filter((a) => !res.has(a) && res.set(a, 1))\n}\n\n```\n\n\n\n#### 39   ... 拓展运算符   浅拷贝\n\n```\nlet arr = [1,2,3,4,5]\nlet arr1 = [...arr] 浅拷贝\nlet obj = {name:\"zzz\"}\nlet obb1 = {...obj} \n```\n\n\n\n####  40  symbol  唯一   用做key值\n\n```\n1.Symbol 本质上是一种唯一标识符，可用作对象的唯一属性名，这样其他人就不会改写或覆盖你设置的属性值。\n2.声明方法：let id = Symbol(\"id\");\n3.Symbol 数据类型的特点是唯一性，即使是用同一个变量生成的值也不相等。\nlet id1 = Symbol('id');\nlet id2 = Symbol('id');\nconsole.log(id1 == id2);  //false\n4.Symbol 数据类型的另一特点是隐藏性，for···in，object.keys() 不能访问\n```\n\n\n\n### Jquery\n\n 1  选择器   \n\n  2 简单动画    animate   hide show    slideUp slideDown   \n\n 3  attr   removeAttr\n\n 4  ajax\n\n### Vue与Jquery区别  \n\n```\njquery开发 针对 每次修改dom  所有的思想是对于dom的修改, 好性能  \nVue  MVVM  ,虚拟dom , 组件化开发会大大提高开发效率，维护效率，提高组减的复用， 自带很多指令，可以直接遍历dom，所达到修改数据后，视图会自动更新，\nvue  可以做单页应用，这样可以大量的减少http请求\nvue  可以有想成缓存组件，更全面的 ui框架提供\nvue  官方提供脚手架，当我开发的时候可以组件化，打包之后更是压缩文件，省去了我们原生开发还需要手动压缩\nvue  逻辑实现比较简单，只要对数据增删改查就可以实现页面的增删改查\n```\n\n### 其他\n\n####   41 BFC(块级格式化上下文)\n\n```\nBFC(块级格式化上下文):它是一个独立的渲染区域，只有块级元素参与， 它规定了BFC内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\nBFC的布局规则（规定、标准）：\n    一、BFC内部的Box会在垂直方向，一个接一个地放置。\n    二、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠（按照最大margin值设置）\n    三、每个元素的margin box的左边， 与包含块border box的左边相接触\n    四、BFC的区域不会与float box重叠。\n    五、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n    六、计算BFC的高度时，浮动元素也参与计算\nBFC的触发条件：\n    根元素(html)\n    float属性不为none\n    position为absolute或fixed\n    display为inline-block, table-cell, table-caption, flex, inline-flex\n    overflow不为visible\n应用：\n    清除浮动\n    三栏布局\n```\n\n#### 42 MVC,MVP,MVVM\n\n```\n1.MVC:\nM:Model\nV:View\nC:ControllerPresenter\n调用关系：用户的对View操作以后，View捕获到这个操作，会把处理的权利交移给Controller；Controller会对来自View数据进行预处理、决定调用哪个Model的接口；然后由Model执行相关的业务逻辑；当Model变更了以后，会通过观察者模式通知View；View通过观察者模式收到Model变更的消息以后，会向Model请求最新的数据，然后重新更新界面。\n2.MVP\nM:Model\nV:View\nP:Presenter\n调用关系：和MVC模式一样，用户对View的操作都会从View交移给Presenter。Presenter会执行相应的应用程序逻辑，并且对Model进行相应的操作；而这时候Model执行完业务逻辑以后，也是通过观察者模式把自己变更的消息传递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，通过View提供的接口更新界面。\n3.MVVM\nM:Model\nV:View\nVM:Model of View\n调用关系：MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。\n```\n\n#### 43 检测数据类型\n\n```\n1.typeof\n对于基本类型，除 null 以外，均可以返回正确的结果。\n对于引用类型，除 function 以外，一律返回 object 类型。\n对于 null ，返回 object 类型。\n对于 function 返回  function 类型。\n2.instanceof\ninstanceof 检测的是原型,instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。\nfunction F(){}\nvar f=new F()\nconsole.log(f instanceof F) //true\n[] instanceof Array; // true\n[] instanceof Object; // true\n3.constructor\nconsole.log(''.constructor)   //ƒ String() { [native code] }\n4.toString\nconsole.log(Object.prototype.toString.call(''))   //[object String]\n```\n\n#### 44 git\n\n```\n1.GIT 初始化\n# git 初始化的指令\n$ git init\n2.GIT 暂存区\n# 把文件夹下的 index.txt 文本放在暂存区\n$ git add index.txt\n# 把文件夹下所有的内容都放在暂存区\n$ git add .\n3.GIT 历史区\n# 把暂存区的内容放到历史区\n$ git commit -m \"我是第一个版本\"\n# 查看当前历史区版本信息\n$ git log\n4.GIT 分支\n# 开辟一个 login 分支\n$ git branch login\n# 查看当前分支情况\n$ git branch\n# 切换到 login 分支\n$ git checkout login\n# 把 login 的内容合并到自己的分支(需要切换到其他主分支master)\n$ git merge login\n# 删除 login 分支(需要切换到其他分支)\n$ git branch -d login\n5.GIT 克隆\n# 直接克隆仓库\n$ git clone https://github.com/jquery/jquery.git\n6.GIT 下拉\n# 拉取远程最新代码\n$ git pull\n7.上传\n# 上传内容\n$ git push -u origin master\n# 表示把内容上传到 origin 这个地址\n# master 是上传到远程的 master 分支\n# 第二次上传\n$ git push\n```\n\n#### 45 sass和less\n\n```\n定义变量的符号不同，less 是用@，sass 使用\\$\n变量的作用域不同，less 在全局定义，就作用在全局，在代码块中定义，就作用于整个代码块。而 sass 只作用域全局。\n```\n\n#### 46 nodejs\n\n```\n1.核心模块\n(1)http模块（搭建服务器）\nconst http = require(\"http\");\n// request  请求对象  --- 获取请求对象的资源\n// responese 相应对象  --- 我需要给前端返回什么\nhttp\n  .createServer(function (req, res) {\n      console.log(req.url, \"res\");\n      console.log(req.headers,\"header\")\n      res.end(\"ok\");  // 必须要有结尾的\n  })\n  .listen(8089, function () {\n    console.log(\"启动成功\" + 8089);\n  });\n(2)url模块\ncosnt url = require(\"url\")\nurl.parse(地址,true/false)  // 地址栏转成对象    true表示将query字符串转对象\nurl.toString()        // 讲对象转成字符串\n(3)path模块\npath.resolve('资源路径','资源路径')   会拼接绝对路径  会自带 当前跟目录\npath.join() 路径合并  不会携带根目录\n__dirname  获取当前根目录的绝对路径\n(4)fs模块\nfs 分同步异步\n异步  一般都有回调函数   结果为回调函数的参数\n同步  返回值为回调函数的解构\nfs.writeFile()\nfs.WirteFileSync()\nfs.readFile()\nfs.readFileSync()\n2.commonjs规范\n暴露模块     module.exports    export default     export\n加载模块\t require           import from       import {} from\n3.使用express\nconst express = require(\"express\");\nconst app = express();\n// app.use()\n// 所有的请求都会经过这个回调函数\napp.use(function (req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  next();\n});\n// post请求参数\n// 作用向req.body 添加post请求参数\napp.use(express.urlencoded());   // application/x-www-form-urlencoded\napp.use(express.json());         //application/json\n// 路由\napp.get(function(req,res){\n\t请求参数  req.query\n})\napp.listen(8080, function () {\n  console.log(\"启动8080\");\n});\t\n4.上传文件\nconst multer = require(\"multer\");\nlet destUrl = path.join(__dirname, \"../\", \"public/imgs\");\nconst upl = multer({\n  dest: destUrl, //生成图片的路径\n});\nrouter.post(\"/\", upl.any(\"file\"), function (req, res) {\n  console.log(req.files, \"file\");\n  res.send({\n    code: 200,\n    msg: \"上传成功\",\n    imgs: imgs,\n  });\n});\n5. mongoose\n// 连接数据库\nconst mongoose = require(\"mongoose\");\nconst url = \"mongodb://127.0.0.1/topic\"; // 数据库名默认端口号 27017\nmongoose.connect(url);\nmongoose.connection.once(\"open\", () => {\n  console.log(url + \"数据库链接成功\");\n});\nmodule.exports = mongoose;\n// 导出数据模型\nconst mongoose = require(\"./mongoose\");\nconst { Schema } = mongoose;\nlet personSchema = new Schema({\n  username: String,\n  pass: String,\n  create_at: String,\n});\nlet UsersModel = mongoose.model(\"user\", personSchema, \"users\"); // \"users\"数据表名\nmodule.exports = UsersModel;\n```\n\n#### 47 react-hooks\n\n```\n常用hooks\n1.useState()\n当给 setCount 传入一个与 count 相同的原始值时，组件不会重新渲染。当传递一个对象时，无论是否一样都会渲染\nuseState()方法可以传递值也可以传递函数，可延迟初始化，此函数在多次渲染时只运行一次。\n2.useEffect\n函数组件中执行副作用操作。副作用: 数据获取，数据订阅，以及手动更改 React 组件中的 DOM 都属于副作用。\n3.useMemo\n使用 useMemo 方法可以避免无用方法的调用,\n4.useCallback\nuseCallback 解决的是传入子组件参数过度变化导致子组件过度渲染的问题\n5.useContext\n用来向所有后代组件传递 props\n6.useRef\n获取组件实例对象或者是DOM对象\n```\n\n#### 48 缓存\n\n```\n强制缓存优先于协商缓存进行\n1.强制缓存\nCache-Control优先于Expires\n2.协商缓存\n协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存。\nEtag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)\nIf-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200\nEtag / If-None-Match 优先级高于 Last-Modified / If-Modified-Since\n3.存储位置\n内存缓存优先硬盘缓存\n在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取；而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存。\n```\n\n#### 49 数组扁平化\n\n```\nhttps://www.cnblogs.com/wind-lanyan/p/9044130.html\n```\n\n#### 50 通用柯里化函数\n\n```\n//toString方法如果是直接调用那就返回当前函数的字符串，如果等于一个函数那就返回一个函数是直接可以被调用的\n//通用的柯力化函数\nfunction curry(){\n    //首先收集当前第一次传来的参数\n    let _args = Array.prototype.slice.call(arguments)\n    //收集二次或多次函数调用参数\n    let _collectArgs = function (){\n        _args.push(...arguments)\n        return _collectArgs\n    }\n    //难点 _collectArgs.toString()这样直接返回当前的函数的字符串 例如@1 \n    //难点  _collectArgs.toString = function(){} 返回这个函数会在自己执行\n    //难点toString隐式转换的特性\n    //闭包缓存当前参数\n    //还可以通过fn.length做性能优化\n    _collectArgs.toString = function(){\n        return _args.reduce((a,b)=>{\n            return a+b\n        })\n    }\n    return _collectArgs\n}\n//当传入不同的任何格式参数都参与计算\n//curry(1,2)(2)(3)\nconsole.log(curry(1)(2)(3))\n//例如@1\n//当前的函数变成字符串修改里面的内容 还有就是返回当前对象类型\nfunction x() { alert('asdf'); }\neval(x.toString().replace('asdf','hello 打工人'));\nx();\n\n————————————————\n版权声明：本文为CSDN博主「wy勇敢的心」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wangyun_gogo/article/details/109453414\n```\n\n#### 51有效大括号（leetcode 20）\n\n```\n var isValid = function(str){\n    var map = {\n      \"{\":\"}\",\n      \"[\":\"]\",\n      \"(\":\")\"\n    }\n    if(str.length % 2 === 1) return false;\n    var res = [];\n    for(var i = 0;i < str.length;i++){\n      if(map[str[i]]){\n        res.push(str[i]);\n      } else {\n        var a = res[res.length-1];\n        if(map[a] == str[i]) {\n          res.pop()\n        } else {\n          return false;\n        } \n      }\n    }\n    return res.length===0;\n  }\n```\n\n#### 52检索url参数\n\n```\n  function query() {\n        let url = window.location.search.split(\"?\")[1];\n        let params = url.split(\"&\");\n        const param = {};\n        params.forEach((i) => {\n            let item = i.split(\"=\");\n            param[item[0]] = item[1];\n        });\n        console.log(param);\n        return param;\n    }\n```\n\n#### 53大数相加\n\n```\n function bigSum(a, b) {\n        // 已 12345 和 678 为例\n        // 我们需要先把他们转换为位数相同，不够补零，记住要统一加一位，为了两个最大的位数相加后可能需要进位\n        // 12345 =>  012345    678 => 000678\n        // 然后让各自的个位个位相加，十位与十位相加   5 + 8 = 3  （1为进位） 4 + 7 + 1 = 2 （1） .....\n        a = '0' + a\n        b = '0' + b\n        let aArr = a.split('')\n        let bArr = b.split('')\n        let carry = 0\n        let res = []\n        let length = Math.max(aArr.length, bArr.length)\n        let distance = aArr.length - bArr.length\n        if (distance > 0) {\n            for (let i = 0; i < distance; i++) {\n                bArr.unshift('0');\n            }\n        } else {\n            for (let i = 0; i < Math.abs(distance); i++) {\n                aArr.unshift('0');\n            }\n        }\n        for (let i = length - 1; i >= 0; i--) {\n            let sum = Number(aArr[i]) + Number(bArr[i]) + Number(carry)\n            carry = sum >= 10 ? 1 : 0\n            sum = sum >= 10 ? parseInt(sum % 10) : sum\n            res.unshift(sum)\n        }\n        return res.join('').replace(/^0/, '')\n    }\n    console.log(bigSum('9007199254740993', '1'))\n// 注意： 传参时就需传入字符串，如果是数字类，在传参时就已经出现精度丢失\n\nhttps://www.jianshu.com/p/c373943f0e9e\n```\n\n#### 54 http协议\n\n```\n1.http/1.0\n   限制每次连接只处理一个请求，无状态：协议对于事务处理没有记忆能力。客户端向服务器请求服务时，只需传送请求方法和路径。HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。\n2.http/1.1\n\t增加了持久连接的方法，在一个TCP连接上可以传输多个http请求，只要浏览器或者服务器没有明确断开，该TCP连接会一直保持。浏览器为每个域名最多维护6个TCP持久连接。\n3.http/2.0\n\t影响http/1.1效率的三个主要因素：TCP的满启动、多条TCP连接竞争带宽和队头堵塞。\n\t引入多路复用机制：同一个连接并发处理多个请求。通过在协议栈中添加二进制分帧层来实现。能够实现请求的优先级、服务器推送、头部压缩等特性。\n\t头部压缩：使用HPACK算法进行压缩。\n\t服务器推送：页面请求资源a.css，接到服务器资源同时会返回a.js，存到缓存中，下次不用重复访问服务器。\n4.https\nHTTPS 在传输的过程中会涉及到三个密钥：\n- 服务器端的公钥和私钥，用来进行非对称加密\n- 客户端生成的随机密钥，用来进行对称加密\n一个 HTTPS 请求实际上包含了两次 HTTP 传输，可以细分为 8 步。\n1. 客户端向服务器发起 HTTPS 请求，连接到服务器的 443 端口\n2. 服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。\n3. 服务器将自己的公钥发送给客户端。\n4. 客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么 HTTPS 传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为 client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS 中的第一次 HTTP 请求结束。\n5. 客户端会发起 HTTPS 中的第二个 HTTP 请求，将加密之后的客户端密钥发送给服务器。\n6. 服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。\n7. 然后服务器将加密后的密文发送给客户端。\n8. 客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样 HTTPS 中的第二个 HTTP 请求结束，整个 HTTPS 传输完成。\n```\n\n","source":"_posts/面试题整理.md","raw":"---\ntitle: 面试题整理\ndate: 2020-10-15 21:00:00\ntags: \n      - 面试\n      - 学习\ncategories: 面试\n---\n\n### HTML+CSS\n\n#### 1  双飞翼 ，圣杯布局\n\n```\n1 弹性盒子\n2 百分比 \n3 定位\n```\n\n```\n圣杯布局\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        html{\n            font-size: 31.25vw;\n        }\n        html,body{\n            height: 100%;\n        }\n        body{\n            display: flex;\n        }\n        header{\n            width:1rem;\n            height: 1rem;\n            background: red;\n        }\n        main{\n            flex: 1;\n            width: 100%;\n            height: 2rem;\n            background: yellow;\n        }\n        footer{\n            width:1rem;\n            height: 1rem;\n            background: springgreen;\n        }\n    </style>\n</head>\n<body>\n    <header></header>\n    <main></main>\n    <footer></footer>\n</body>\n</html>\n```\n<!-- more -->\n```\nBFC双飞翼布局\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        html,body{\n            height: 100%;\n        }\n        .left{\n            width: 200px;\n            height: 60%;\n            background: red;\n            float: left;\n        }\n        .right{\n            width: 200px;\n            height: 60%;\n            background: orange;\n            float: right;\n        }\n        .center{\n            height: 100%;\n            background: green;\n            overflow: hidden;\n        }\n    </style>\n</head>\n<body>\n    <!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面\n    先写left和right;后写中间！！！必须这样子！！ -->\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n    <div class=\"center\"></div>\n</body>\n</html>\n```\n\n```\n不用BFC来写双飞翼布局\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        html,body{\n            height: 100%;\n        }\n        .left{\n            width: 200px;\n            height: 60%;\n            background: red;\n            float: left;\n        }\n        .right{\n            width: 200px;\n            height: 65%;\n            background: orange;\n            float: right;\n        }\n        .center{\n            height: 100%;\n            background: green;\n            padding:0 200px;\n        }\n        .cenCon{\n            height: 100%;\n            background: purple;\n        }\n    </style>\n</head>\n<body>\n    <!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面\n    先写left和right;后写中间！！！必须这样子！！ -->\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n    <div class=\"center\">\n        <div class=\"cenCon\"></div>\n    </div>\n</body>\n</html>\n```\n\n#### 2  块元素垂直居中\n\n```\n1  弹性布局   ---  \n2  定位    50% 50%  减自身的一ban\n3  转行内块元素   line-height:100px  font-size:元素的高度    text-align：center\n4  把定位改成 transform \n```\n\n```\n1  弹性布局\ndisplay:flex;\njustify-content: center;\nalign-items: center;\n```\n\n```\n2  定位\nposition: absolute;\nleft:50%;\ntop:50%;\nmargin:-高度的一半 0 0 -宽度的一半。\n```\n\n```\n3  转行内块元素\ntext-align：center;\nline-height:100px;\nheight:100px;\n```\n\n```\n4  定位\nposition:absolute;\nleft:0;right:0;\ntop:0;bottom:0;\nmargin:auto;\n```\n\n#### 3  盒模型和怪异盒模型\n\n```\n普通盒模型     content + border*2 + paddign*2+margin*2 =  普通盒模型\n怪异盒模型     contnet + margin*2   = 怪异盒模型  \n```\n\n```\n1.两者区别\n\n标准盒模型总宽度 = width + 左右padding + 左右border + 左右margin\n\n标准盒模型总高度 = height + 上下padding + 上下border + 上下margin\n\n怪异盒模型总宽度 = width + 左右margin (width包含了padding和border)\n\n怪异盒模型总高度 = height + 上下margin (height包含了padding和border)\n\n注：当没有添加文档声明时，就会触发某些浏览器的怪异模式，如IE6\n\n2.如何将标准盒模型转换为怪异盒模型\n\n给给标准盒子加上这个属性：\n\n语法：box-sizing:border-box;\n\n注：box-sizing:content-box;  默认值\n```\n\n#### 4 解决浮动塌陷  \n\n```\n1 清除浮动\n2 overflow:hidden\n3 给父元素添加高度\n4 给父元素加边框\n5 给父元素加padding\n6 :after 给添加清除浮动\n```\n\n```\n方法1: 给父元素加overflow:hidden;\n方法2: 在浮动元素下面加空div,并添加样式\n       div{\n       \tclear:both;\n       \theight:0; \n       \toverflow:hidden;\n       \t}\n方法3: 万能清除浮动法：\n    选择符：after{\n           \tcontent: '';\n           \tclear: both;\n           \tdisplay:block;\n           \theight:0;\n           \tvisibility:hidden;\n           \toverflow: hidden;\n           }\n```\n\n#### 5 em ，rem , px,  vw,vh\n\n```\n1 em   父元素的倍数\n2 rem  根元素的倍数     （适配会根据rem来设定）  动态设置  html的font-size\n3 vw,vh   只适用于高版本浏览器  ie9以上   移动都可以用  【100%内核都是 -webkit-】\n4 px像素\n```\n\n```\n1 px就是像素，也是我们现在经常使用的基本单位，比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。\n2 em参考物是父元素的font-size，默认字体大小是16px，所以1em不是固定值，因为它会继承父元素的字体大小\n3 rem参考物是相对于根元素，我们在使用时可以在根元素设置一个参考值即可，相对于em使用，减少很大运算工作量，例：html大小为10px，12rem就是120px。\n4 % 是相对于父元素的大小设定的比率。\n5 vw是相对视口（viewport）的宽度而定的，长度等于视口宽度的1/100\n假如浏览器的宽度为200px，那么1vw就等于2px（200px/100）\n6 vh是相对视口（viewport）的高度而定的，长度等于视口高度的1/100\n假如浏览器的高度为500px，那么1vh就等于5px（500px/100）\n```\n\n####  6 边框一像素问题\n\n```\ntarnsfrom : scale(0.7)  缩放\n```\n\n```\n解决问题:移动端1像素变粗\n\t为什么移动端CSS里面写了1px，实际上看起来比1px粗；了解设备物理像素和逻辑像素的同学应该很容易理解，其实这两个px的含义其实是不一样的，UI设计师要求的1px是指设备的物理像素1px，而CSS里记录的像素是逻辑像素，它们之间存在一个比例关系，可以用javascript中的`window.devicePixelRatio`来获取，也可以用媒体查询的`-webkit-min-device-pixel-ratio`来获取。当然，比例多少与设备相关。在手机上border无法达到我们想要的效果。这是因为devicePixelRatio特性导致，iPhone的devicePixelRatio==2，而border-width: 1px描述的是设备独立像素，所以，border被放大到物理像素2px显示，在iPhone上就显得较粗。\n解决方案:transform: scale(0.5) 方案，用高度1px的div充当边框\n     div {\n            height: 1px;\n            background: #000;\n            overflow: hidden;\n        }\n        /* 2倍屏 */\n        @media only screen and (-webkit-min-device-pixel-ratio: 2.0) {\n            div {\n                -webkit-transform: scaleY(0.5);\n                transform: scaleY(0.5);\n            }\n        }\n        /* 3倍屏 */\n        @media only screen and (-webkit-min-device-pixel-ratio: 3.0) {\n            div {\n                -webkit-transform: scaleY(0.33);\n                transform: scaleY(0.33);\n            }\n        }\n```\n\n作者：果汁凉茶丶\n链接：https://www.jianshu.com/p/fa670b737a29\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n####  7  兼容问题 \n\n  链接1   https://blog.csdn.net/Jkssns/article/details/103456913   \n\n```\n1、IOS下input默认样式(圆角、阴影)\n解决方案\ninput {\n  -webkit-appearance: none;\n  border-radius: 0;\n  border: 1px #ccc solid;\n}\n\n2、在IOS下页面滑动卡顿，Android没问题\n解决方案\nbody {-webkit-overflow-scrolling:touch; overflow-scrolling: touch;}\n\n3、input type 改为button\n当input type为button，disabled为true，会出现背景色异常(其实就是禁用的样式)\n把input的disabled改为readonly\nopacity：1\n\n4、input type=text切换到英文输入法IOS下的问题\n解决方案\ninput添加autocapitalize属性\n<input class=\"SmallFour\" type=\"text\" autocapitalize=\"off\" />\n\n5、禁止数字自动识别为电话号码\n\n这个比较有用，因为一串数字在iphone的部分浏览器上会显示成蓝色，样式加成别的颜色也是不生效的。不是我亲测，在微信内部浏览器没问题，但是在safari上有问题，IOS系统版本12.1.4\n<div style=\"color: red\">1212312312321323</div>\n解决方案\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n6、input type=number之后，pc端出现上下箭头\n解决方案\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none !important;\n  margin: 0;\n}\n\n7、是图片填充到外层的框内，很好用，直接给图片添加样式。\n解决方案\nobject-fit: cover;\nwidth:100%;\nheight:100%;\n\n8、手机端按住不放 阻止浏览器默认响应事件 调试\n解决方案\n//clikMenu 你要点击的事件节点\nfunction touchendmovie(clikMenu){\n    var timeOutEvent = 0;\n    $(document).on('touchstart',clikMenu,function(e){\n        timeOutEvent = setTimeout(function(){\n        //这里编写你要执行的事件 },300);\n        //这里设置长按响应时间\n        e.preventDefault();\n    });\n    $(document).on('touchmove',clikMenu,function(e){\n        clearTimeout(timeOutEvent);\n        timeOutEvent = 0;\n    });\n    $(document).on('touchend',clikMenu,function(e){\n        e.stopPropagation();\n        if(timeOutEvent != 0 ){\n            console.log('这里是点击了一下'); \n        }\n        clearTimeout(timeOutEvent); \n    });\n}\n\n9、禁止复制、选中文本\n解决方案\n.el {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n   user-select: none;\n}\n\n10、input 的placeholder属性会使文本位置偏上\n解决方案\nline-height: （和input框的高度一样高）---pc端解决方法\nline-height：normal ---移动端解决方法\n```\n\n####  8 css预处理器\n\n​\t1 sass  less\n\n```\n\tCSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。\n```\n\n####  9 H5 新增新特性\n\n```\nnav , header ,footer ,session \n1  拖拽API\n2  input 新增类型\n3  视频音频\n4  canvas\n5  获取定位  谷歌浏览器不行（）  \n6  web存储   localStorage sessionStorage\n```\n\n```\nhttps://www.cnblogs.com/ainyi/p/9777841.html\nH5 新特性\n1. 语义化标签：header、footer、section、nav、aside、article\n2. 增强型表单：input 的多个 type\n3. 新增表单元素：datalist、keygen、output\n4. 新增表单属性：placehoder、required、min 和 max\n5. 音频视频：audio、video\n6. canvas\n7. 地理定位\n8. 拖拽\n9. 本地存储：localStorage - 没有时间限制的数据存储；sessionStorage - 针对一个 session 的数据存储，当用户关闭浏览器窗口后，数据会被删除\n10. 新事件：onresize、ondrag、onscroll、onmousewheel、onerror、onplay、onpause\n11. WebSocket：单个 TCP 连接上进行全双工通讯的协议\n```\n\n#### 10 适配 \n\n```\nrem来适配 \n1  后期字体大小不适配  就用px\n2  rem插件    \n```\n\n```\n\t由于rem是根据根元素的font-size大小而定，所以根据浏览器当前的分辨率改变font-size的值，就可以用rem作为统一单位适配移动端\n\t下图是不同宽度浏览器对应的font-size,可以引Rem自适应JS适配移动端。\n```\n\n![image-20201013185918101](https://vcdn.pharmcube.com/icon-close.png)\n\n#### 11 响应式布局\n\n```\n1  不同的终端显示不同的布局   media\n2  不同分辨率显示布局一样 （视频）\n```\n\n```\n@media screen and (max-width: 990px) and (min-width: 768px) {\n   css样式\n}\n```\n\n\n\n#### 12  翻译 \n\n```\n1  几版语言写几版页面\n2  vue-\n```\n\n\n\n### JAVASCRIPT\n\n#### 13   javascript 数据类型\n\n``` \n基本类型  String (显示)  Number(运算)  Boolean(判断)  Undefined(声明未赋值) == Null(对象的空) Symbol(做键值)\n引用类型  Object Array Function\n\n区别\n基本类型存在  栈中   用完就销毁    之不能长存\n引用类型      堆中   不会自动销毁\n\n引用赋值和浅拷贝和深拷贝\n\n引用赋值   就是 =   引用同一个地址  所有如果改变某个属性  所有引用都改变\n浅拷贝   只拷贝一层   [...arr] {...obj}\n深拷贝   遍历对象进行递归 ， JSON.stringify , JSON.parse ,  immutable.js\n```\n\n```\nhttps://www.jianshu.com/p/cf1e9d7e94fb\n1.数据类型：\n基本数据类型：String，Boolean，Number，Undefined，Null；\n引用数据类型：Object(Array，Date，RegExp，Function)；\n基本数据类型和引用数据类型的区别：\n    保存位置不同：基本数据类型保存在栈内存中，引用数据类型保存在堆内存中，然后在栈内存中保存了一个对堆内存中实际对象的引用，即数据在堆内存中的地址，JS对引用数据类型的操作都是操作对象的引用而不是实际的对象，如果obj1拷贝了obj2，那么这两个引用数据类型就指向了同一个堆内存对象，具体操作是obj1将栈内存的引用地址复制了一份给obj2，因而它们共同指向了一个堆内存对象；\n为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？\n1）堆比栈大，栈比堆速度快；\n2）基本数据类型比较稳定，而且相对来说占用的内存小；\n3）引用数据类型大小是动态的，而且是无限的，引用值的大小会改变，不能把它放在栈中，否则会降低变量查找的速度，因此放在变量栈空间的值是该对象存储在堆中的地址，地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响；\n4）堆内存是无序存储，可以根据引用直接获取；\n2.深拷贝，浅拷贝\n(1)深拷贝和浅拷贝简单解释：\n     浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；\n(2)区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；\n(3)浅拷贝：\n//手动实现\nfunction simpleCopy(obj1) {\n   var obj2 = Array.isArray(obj1) ? [] : {};\n   for (let i in obj1) {\n   obj2[i] = obj1[i];\n  }\n   return obj2;\n}\nvar obj1 = {\n   a: 1,\n   b: 2,\n   c: {\n   d: 3\n  }\n}\nvar obj2 = simpleCopy(obj1);\nobj2.a = 3;\nobj2.c.d = 4;\nalert(obj1.a); // 1\nalert(obj2.a); // 3\nalert(obj1.c.d); // 4\nalert(obj2.c.d); // 4\n//使用Object.assign()实现浅拷贝\nlet obj1 = {\n   a: {\n     b: 1\n   },\n   c: 2\n}\nlet obj2 = Object.assign({},obj1)\nobj2.a.b = 3;\nobj2.c = 3\nconsole.log(obj1.a.b); // 3\nconsole.log(obj2.a.b); // 3\nconsole.log(obj1.c); // 2\nconsole.log(obj2.c); // 3\n//展开运算实现浅拷贝\nvar obj1={\n    a:1,\n    b:2,\n    c:{\n        d:3\n    }\n}\nvar obj2={...obj1}\nobj2.a=11\nobj2.c.d=13\nconsole.log(obj1,obj2)\n(4)深拷贝\n//递归实现深拷贝\nfunction deepCopy(obj1) {\n  var obj2 = Array.isArray(obj1) ? [] : {};\n  if (obj1 && typeof obj1 === \"object\") {\n    for (var i in obj1) {\n      if (obj1.hasOwnProperty(i)) {\n        // 如果子属性为引用数据类型，递归复制\n        if (obj1[i] && typeof obj1[i] === \"object\") {\n          obj2[i] = deepCopy(obj1[i]);\n        } else {\n          // 如果是基本数据类型，只是简单的复制\n          obj2[i] = obj1[i];\n        }\n      }\n    }\n  }\n  return obj2;\n}\nvar obj1 = {\n  a: 1,\n  b: 2,\n  c: {\n    d: 3\n  }\n}\nvar obj2 = deepCopy(obj1);\nobj2.a = 3;\nobj2.c.d = 4;\nalert(obj1.a); // 1\nalert(obj2.a); // 3\nalert(obj1.c.d); // 3\nalert(obj2.c.d); // 4\n//使用JSON.stringify和JSON.parse实现深拷贝\n function deepCopy(obj1){\n    let _obj = JSON.stringify(obj1);\n    let obj2 = JSON.parse(_obj);\n    return obj2;\n  }\nvar a = [1, [1, 2], 3, 4];\nvar b = deepCopy(a);\nb[1][0] = 2;\nalert(a); // 1,1,2,3,4\nalert(b); // 2,2,2,3,4\n缺点：对象里的值为函数无法拷贝\nlet obj1 = {\n   fun:function(){\n      alert(123);\n   }\n}\nlet obj2 = JSON.parse(JSON.stringify(obj1));\nconsole.log(typeof obj1.fun); // function\nconsole.log(typeof obj2.fun); // undefined\n//jquery实现深拷贝\njquery 提供一个$.extend可以用来做深拷贝；\n```\n\n\n\n#### 14   排序\n\n```\nhttps://segmentfault.com/a/1190000016286789 \nsort\n冒泡\n```\n\n```\n1.sort排序\n按升序排列\narr.sort(\n    function(n1,n2){\n    \treturn n1-n2\n})\n按降序排列\narr.sort(\n\tfunction(n1,n2){\n\t\treturn n2-n1\n})\n2.冒泡排序\nfunction bubbleSort(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        for (var j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[i]) {\n                [arr[j], arr[i]] = [arr[i], arr[j]]\n            }\n        }\n    }\n}\n3.选择排序\nfunction selectSort(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        var min = i\n        for (var j = i + 1; j < arr.length; j++) {\n            if (arr[min] > arr[j]) {\n                min = j\n            }\n        }\n        if (i != min) {\n            [arr[min], arr[i]] = [arr[i], arr[min]]\n        }\n    }\n}\n4.快速排序\nfunction quickSort(arr){\n  qSort(0, arr.length - 1);\n  return arr;\n  function qSort(left, right){\n    if (left >= right)//两个数相遇则结束该轮排序\n      return;\n    var key = arr[left];//取最左边的元素作为标识数\n    var i = left;\n    var j = right;\n    while (i != j){//两个数相遇则结束该轮排序\n      while (i != j && arr[j] >= key) j--;//j前移\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n      while (i != j && arr[i] <= key) i++;//i后移\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n    }\n    qSort(left, j - 1);//对标识数前面的数继续该方法排序\n    qSort(j + 1, right);//对标识数后面的数继续该方法排序\n  }\n}\n```\n\n#### 15  去重  \n\n```\nhttps://www.cnblogs.com/lewiscutey/p/8269567.html\n```\n\n```\nSet()方法去重(ES6新增)\nfunction unique(arr){\n    return [...(new Set(arr))];\n}\n```\n\n#### 16 闭包   \n\n```\n1  声明局部变量供外部使用，防止变量污染全局\n2  闭包因为有函数  所以会存在堆中   可以存储值   一般会用来做缓存\n缺点  容易造成内存泄漏  \n解决方案  手动清除\n\n3 写法 \n\t函数嵌套\n\t内部函数会作为外部函数的返回值\n\t内部函数因为作用域链可以访问外部函数的变量 会做为内部函数的返回值\n\n代码 \n  function fn1(){\n          var a = 10\n          return function(){\n              return  a\n          }\n      }\n```\n\n```\n闭包概念：\n1. 有一个 A 函数，再 A 函数内部返回一个 B 函数\n2. 再 A 函数外部有变量引用这个 B 函数\n3. B 函数内部访问着 A 函数内部的私有变量\n以上三个条件缺一不可\n闭包特点：\n1. 作用域空间不销毁\n- 优点： 因为不销毁，变量页不会销毁，增加了变量的生命周期\n- 缺点： 因为不销毁，会一直占用内存，多了以后就会导致内存溢出\n2. 可以利用闭包访问再一个函数外部访问函数内部的变量\n- 优点： 可以再函数外部访问内部数据\n- 缺点： 必须要时刻保持引用，导致函数执行栈不被销毁\n3. 保护私有变量\n- 优点： 可以把一些变量放在函数里面，不会污染全局\n- 缺点： 要利用闭包函数才能访问，不是很方便\n代码：\nfunction fun() {\n    var count = 1;\n    return function () {\n        count++\n        console.log(count)\n    }\n}\nvar fn = fun()\nfn()  /* 2 */\nfn()  /* 3 */\n```\n\n#### 17 面向对象\t--- 封装\n\n```\n面向对象是一种编程思想  符合我们的生活逻辑\n解\n（面向过程）\n答案\n\n面向过程也是一种编程思想   数学逻辑的映射   \n解  \n第一步骤\n第二步骤\n第三步骤\n结果\n\n```\n\n```\n面向对象编程，使用构造函数构造对象\n1. 先书写一个构造函数\n2. 在构造函数内向对象添加一些成员\n3.使用这个构造函数创造一个对象（和 new 连用）\n4.构造函数可以创建对象，并且创建一个带有属性和方法的对象\n5.面向对象就是要想办法找到一个有属性和方法的对象\n6.面向对象就是我们自己制造构造函数的过程\n代码：\n// 1. 先创造一个构造函数\nfunction Person(name, gender) {\n  this.age = 18\n  this.name = name\n  this.gender = gender\n}\n// 2. 使用构造函数创建对象\nvar p1 = new Person('Jack', 'man')\nvar p2 = new Person('Rose', 'woman')\n// 3. 使用原型向构造函数添加方法：\nPerson.prototype.sayHi = function () {\n  console.log('hello')\n}\np1.sayHi()\n// 4. 实例化对象的 __proto__ 和所属的构造函数的 prototype 是一个对象空间\nconsole.log(p1.__proto__ === Person.prototype) // true\n// 5. p1和p2都是Person的实例,p1.__proto__ 和 p2.__proto__ 指向的都是 Person.prototype,两个实例化对象p1和p2执行的是同一个方法。即构造函数原型Person.prototype里的方法。\nconsole.log(p1.sayHi === p2.sayHi) // true\n```\n\n#### 18 原型链\n\n```\n每一个对象都有原型对象 ， 原型对象也有原型对象 ，依次向上，直到Object.prototype如果还没有最会指向null,这样形成一个线性的链就叫做原型链\n原型链特点 原型链上的方法和属性 实例可以共享\n\n共享的原因是什么？\n实例会有指针  __proto__ 会指向源性对象\n```\n\n```\n原型链：\n实例化对象的__proto__指向其构造函数的prototype,实例化对象的__proto__里面也有一个成员叫做constructor指向当前这个对象所属的构造函数。实例化对象的__proto__的__proto__指向顶级构造函数Object的prototype,实例化对象的__proto__的__proto__里面的constructor指向顶级构造函数Object。Object.prototype就到顶了，Object.prototype 的 __proto__ 就是 null。\n原型链的访问原则\n访问一个对象的成员的时候,自己没有就会去 __proto__ 中找,如果 __proto__ 里面没有就再去 __proto__ 里面找,一直找到 Object.prototype 里面都没有，那么就会返回 undefiend。\n```\n\n#### 19 继承  说话的继承都是为了优化代码，优化性 \n\n```\n组合继承 = 借用构造函数继承 + 原型对象继承\n\n //超类  父类   假继承\n function A(name, age) {\n \tthis.name = name;\n \tthis.age = age;\n }\n A.prototype.eat = function () {\n\t console.log(this.name + \"吃 \" + this.name);\n };\nDog.prototype = new A();\nCat.prototype = new A();\n function Dog(name, age) {\n \t\tA.call(this, name, age);\n }\n function Cat(name, age) {\n\t A.call(this, name, age);\n }\n var dog1 = new Dog(\"小白\", 3);\n var dog2 = new Dog(\"小白1\", 31);\n var cat1 = new Cat(\"喵咪\", 3);\n console.log(dog1, cat1);\n dog1.eat();\n cat1.eat();\nconsole.log(dog1.eat === dog2.eat); //true\n```\n\n```\n1.组合继承\nfunction Person() {\n    this.name = 'Jack'\n}\nPerson.prototype.sayHi = function () {\n    console.log('hello')\n}\nfunction Student() {\n    Person.call(this)\n}\nStudent.prototype = new Person()\nvar s1 = new Student()\n2.ES6继承\nfunction Person() {\n    this.name = 'Jack'\n}\nPerson.prototype.sayHi = function () {\n    console.log('hello')\n}\n// 下面表示创造一个 Student 类，继承自 Person 类\nclass Student extends Person {\n    constructor() {\n        // 必须在 constructor 里面执行一下 super() 完成继承 \n        super()\n    }\n}\nvar s1 = new Student()\n```\n\n#### 20   本地存储    \n\n```\ncookie  （一般情况下  cookie都是从后台发送的）\nweb存储  (低版本不兼容)   localStorage （长存）  sesstionStorage (会话 关闭浏览器销毁)\n\nif(localStorage){\n\t使用localStorage\n}else{\n\tcookie\n}\n```\n\n```\n1.cookie:\ncookie是一个以字符串的形式存储数据的位置,在字符串中以key=value的形式出现,每一个key=value是一条数据,多个数据之间以 ; 分割。每一个 HTTP 请求都会在请求头中携带 cookie 到服务端,每一个 HTTP 响应都会在响应头中携带 cookie 到客户端,也就是,cookie 是不需要我们手动设置，就会自动在 客户端 和 服务端之间游走的数据。\n读取cookie：\nconst cookie = document.cookie\nconsole.log(cookie) // 就能得到当前 cookie 的值\n设置cookie：\n// 下面这个 cookie 数据会在 2043 年 12 月 18 日 12 点以后过期，过期后会自动消失\ndocument.cookie = 'b=200;expires=Thu, 18 Dec 2043 12:00:00 GMT\";'\n删除cookie：\n// 因为 cookie 不能直接删除\n// 所以我们只能把某一条 cookie 的过期时间设置成当前时间之前\n// 那么浏览器就会自动删除 cookie\ndocument.cookie = 'b=200;expires=Thu, 18 Dec 2018 12:00:00 GMT\";'\n2.localStorage 本地存储：\n没有过期时间,不会跟随服务器发送,大小5M,不用在服务器下运行。\n// 设置\nlocalStorage.setItem('item', 'abc')\n// 获取\nconsole.log(localStorage.getItem('item'))\n// 删除\nlocalStorage.removeItem('item')\n// 清空\nlocalStorage.clear()\n3.sessionStorage 本地存储:\n会话结束就没有了,不会跟随服务器发送,大小5M,不用在服务器下运行,写法和localStorage完全一样。\n// 设置\nsessionStorage.setItem('item', 'abc')\n// 获取\nconsole.log(sessionStorage.getItem('item'))\n// 删除\nsessionStorage.removeItem('item')\n// 清空\nsessionStorage.clear()\n```\n\n\n\n#### 21  ajax  \n\n```\n前后端交互技术  核心两个\nXMLHttpRequest   ---  $.ajax  axios\nfetch  -- fetch\n\n1 ajax 原理\n  1） 获取核心对象  做兼容\n  2） 发送请求   xhr.open(\"methods\",url,true)\n  3)  发送参数   xhr.send(null)\n  4)  监听变化触发函数   xhr.onreadystatechange\n \n2 axios 二次分装    \n\t请求拦截器  修改参数类型 ， 统一传固定参数 。。。\n\t相应拦截器  错误几种处理  \n\n3 $.ajax  当你想用 jsonp的时候  用封装$.ajax \n```\n\n```\n1. ajax：\najax全名async javascript and XML(异步的javascript和XML),客户端给服务端发送消息的工具，以及接受响应的工具。\n(1)创建一个 ajax 对象\nconst xhr = new XMLHttpRequest()\n(2)配置链接信息\n// xhr.open('请求方式', '请求地址', 是否异步默认 true 表示异步false 表示同步)\nxhr.open('get', './data.php')\n(3)发送请求\nxhr.send()\n(4)获得相应数据\n// ajax状态码 xhr.readyState,只有当 readyState === 4 的时候，我们才可以正常使用服务端给我们的数据\n// 记录http状态码 xhr.status,200 ~ 299 表示本次请求成功了\n// readyStateChange事件专门用来监听ajax对象\n// responseText用来记录服务端给我们的响应体内容的\nxhr.onreadyStateChange = function () {\n  if (xhr.readyState === 4 && /^2\\d{2|$/.test(xhr.status)) {\n    console.log(xhr.responseText)\n  }\n}\n(5)发送参数\n// get 请求的参数就直接在 url 后面进行拼接就可以\nxhr.open('get', './data.php?a=100&b=200')\n// post 请求的参数是携带在请求体中的,必须要先设置一下请求头中的 content-type\n// application/x-www-form-urlencoded 表示的数据格式就是 key=value&key=value\nxhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded')\nxhr.send('a=100&b=200')\n2. axios:\n(1)设置拦截器\nimport axios from \"axios\";\nconst fetchData = axios.create({\n    baseURL: \"http://localhost:3000\", // 请求地址前缀\n    withCredentials: true, // 允许携带cookie\n});\n//添加请求拦截器\nfetchData.interceptors.request.use(\n    function (config) {\n        if (config.method == \"get\") {\n            config.params = {\n                ...config.params,\n                token: JSON.parse(localStorage.getItem(\"user\")).token,  //携带token\n                cookie: JSON.parse(localStorage.getItem(\"user\")).cookie,  //携带cookie\n            };\n        }\n        if (config.method == \"post\") {\n            config.data = {\n                ...config.data,\n                token: JSON.parse(localStorage.getItem(\"user\")).token,  //携带token\n                cookie: JSON.parse(localStorage.getItem(\"user\")).cookie,   //携带cookie\n            };\n        }\n        return config;\n    },\n    function (error) {\n        //请求错误时做些事\n        return Promise.reject(error);\n    }\n);\n//添加响应拦截器\nfetchData.interceptors.response.use(\n    function (response) {\n        //对响应数据做些事\n        return response;\n    },\n    function (error) {\n        //响应错误时做些事\n        return Promise.reject(error);\n    }\n);\nexport default fetchData;\n(2)二次封装\n// 导入拦截器\nimport fetchData from \"./fetchData\";\n// get请求用params传参\nexport async function getPlayList(data = {}) {\n  return await fetchData.get(\"/top/playlist\", {\n    params: data,\n  });\n}\n// post请求用data传参\nexport async function login(data) {\n  return await fetchData.post(\"/login/cellphone\", data);\n}\n3. jsonp:\n(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。\n(2)使用Jquery封装函数$.ajax\n$.ajax({\n    url: \"http://127.0.0.1:8081/list\",\n    dataType: \"jsonp\",\n    success: (res) => {\n    \tconsole.log(res)\n    },\n});\n```\n\n#### 22 防抖 和 节流  \n\n```\n1 使用场景 \n   1 ) 搜索的时候 ， 很容易重复触发请求，怎么避免这个问题\n   2 ) 根据移动坐标来触发验证  ， 滑动验证码\n   \nhttps://segmentfault.com/a/1190000018428170    看看文章 （）\n```\n\n```\n1. 防抖：\n对于短时间内连续触发的事件（如滚动事件），防抖的含义就是让某个时间期限内，事件处理函数只执行一次。\nfunction debounce(fn,delay){\n    let timer = null //借助闭包\n    return function() {\n        if(timer){\n            clearTimeout(timer) \n        }\n        timer = setTimeout(fn,delay) // 简化写法\n    }\n}\nfunction showTop  () {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n　　console.log('滚动条位置：' + scrollTop);\n}\nwindow.onscroll = debounce(showTop,1000)\n2. 节流：\n如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效。\nfunction throttle(fn,delay){\n    let valid = true\n    return function() {\n       if(!valid){\n           //休息时间 暂不接客\n           return false \n       }\n       // 工作时间，执行函数并且在间隔期内把状态位设为无效\n        valid = false\n        setTimeout(() => {\n            fn()\n            valid = true;\n        }, delay)\n    }\n}\nfunction showTop  () {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n　　console.log('滚动条位置：' + scrollTop);\n}\nwindow.onscroll = throttle(showTop,1000) \n```\n\n\n\n#### 23  事件委托   提高性能\n\n```\n1  利用的是冒泡原理 ，将事件注册给父辈组件，因为冒泡点击本身的时候父组件会触发，可以通过判断事件源，来判断是谁触发的从而实现事件委托\n2  减少了事件注册   ， 动态添加的元素依然会享有事件\n```\n\n```\n事件委托：\n可以给未来元素添加事件\n<body>\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n  </ul>\n  <script>\n  \tvar oUl = docuemnt.querySelector('ul')   \n    oUl.addEventListener('click', function (e) {\n      e = e || window.event\n      var target = e.target || e.srcElement\n      if (target.nodeName === 'LI') {\n        console.log('我是 li，我被点击了')\n      }\n    })\n  </script>\n</body>\n```\n\n\n\n#### 24 事件流    \n\n```\n冒泡  --  从内向外  -- 事件委托\n捕获  --  从外向内  --  改热键 \n\ndiv.addEventListener(\"click\",function(){},false) --  removeEventLisener\ndiv.onclick=function(){}\n```\n\n```\n1. 冒泡：\n就是从事件目标的事件处理函数开始，依次向外，直到 window 的事件处理函数触发，也就是从下向上的执行事件处理函数\n2. 捕获：\n就是从 window 的事件处理函数开始，依次向内，直到事件目标的事件处理函数执行，也就是从上向下的执行事件处理函数\n事件触发默认冒泡，从内向外触发。\n阻止冒泡的几种方式：\n(1) e.stopPropagation() 点击只出现li\n<ul>\n    <li>1</li>\n</ul>\n<script>\n    var ul = document.querySelector('ul')\n    var li = document.querySelector('li')\n    li.addEventListener('click', function (e) {\n        e.stopPropagation()\n        console.log('li')\n    })\n    ul.addEventListener('click', function () {\n        console.log('ul')\n    })\n</script>\n(2)e.cancelBubble = true 点击只出现li\n<ul>\n    <li>1</li>\n</ul>\n<script>\n    var ul = document.querySelector('ul')\n    var li = document.querySelector('li')\n    li.addEventListener('click', function (e) {\n        e.cancelBubble = true\n        console.log('li')\n    })\n    ul.addEventListener('click', function () {\n        console.log('ul')\n    })\n</script>\n(3)事件监听第三个参数true,事件捕获，默认false,事件冒泡。冒泡先出现li,再出现ul。捕获先出现ul,再出现li。\n<ul>\n    <li>1</li>\n</ul>\n<script>\n    var ul = document.querySelector('ul')\n    var li = document.querySelector('li')\n    li.addEventListener('click', function (e) {\n        console.log('li')\n    })\n    ul.addEventListener('click', function () {\n        console.log('ul')\n    },true)\n</script>\n\n```\n\n\n\n#### 25  跨域 \n\n```\n1  同源策略    端口号  协议  域名     部署到同原\n2  cors 服务器设置响应头    允许访问      nginx\n3  使用webpack代理 （开发过程中有用）    打包之后不生效\n    proxy: {\n        \"/api\": {\n        target: \"http://192.168.x.xxx:8090\", // 要访问的接口域名\n        ws: true, // 是否启用websockets\n        changeOrigin: true, //开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题\n        pathRewrite: {\n        \"^/api\": \"\", //这里理解成用'/api'代替target里面的地址,比如我要调用'http://40.00.100.100:3002/user/add'，直接写'/api/user/add'即可\n        },\n        },\n    },\n 4  jsonp  原理    纯前端技术跨域  （需要后端配合）\n 5  iframe 跨域\n 6  websocket  可以做跨域\n```\n\n```\nhttps://juejin.im/post/6844904126246027278?utm_source=wechat_session&utm_medium=social&utm_oi=665117609675198464#heading-28\n1 同源策略：请求协议/域名/端口号全部相同。\n2 CORS：跨域资源共享(浏览器自带机制)\n跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。对于前端来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求,实现CORS通信的关键是服务器。\nNode 中的解决方案\n直接使用中间件\nconst cors = require(\"koa-cors\");\napp.use(cors());\n传递cookie前端需设置 withCredentials: true,后端需设置Access-Control-Allow-Credentials为true,Access-Control-Allow-Origin不为*\n3 nginx反向代理\n(1)安装nginx\n(2)配置nginx，把localhost:8080和localhost:8000统一配置在统一服务器local.test(自定义域名)下。\nserver {\n        listen 80;\n        server_name local.test;\n        location /api {\n            proxy_pass http://localhost:8080;\n        }\n        location / {\n            proxy_pass http://localhost:8000;\n        }\n}\n(3)重启nginx\n(4)前端请求\n<script> \n\taxios.defaults.withCredentials = true; \n\tlogin.onclick = () => { \n\t\taxios.post(\"/api/login\");\n\t};\n</script>\n4 使用webpack代理(开发过程中有用,打包之后不生效)\n配置webpack中的devServe\ndevServer: {\n    open: true,\n    host: 'localhost',\n    port: 8000,\n    https: false,\n    hotOnly: false,\n    proxy: {\n        // 配置跨域\n        '/api': {\n            target: 'http://localhost:8080/',  // 要访问的接口域名\n            ws: true,  // 是否启用websockets\n            changOrigin: true, //开启代理\n       \t\tpathRewrite: {\n        \t'^/api': '' //这里理解成用'/api'代替target里面的地址,比如我要调\t用'http://localhost:8080/login'，直接写'/api/login'即可\n        \t}\n        }\n    },\n    before: app => { }\n}\n5 jsonp跨域\n(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。\n<script>\n    var script=document.createElement('script')\n    function getData(data){\n        console.log(data)\n    }\n    script.src='http://localhost:8080?callback=getData'\n    document.body.appendChild(script)\n</script>\n(2)使用Jquery封装函数$.ajax\n$.ajax({\n    url: \"http://127.0.0.1:8081/list\",\n    dataType: \"jsonp\",\n    success: (res) => {\n    \tconsole.log(res)\n    },\n});\n\n```\n\n#### 26  当你输入网址的时候经历了什么？\n\n```\nhttps://segmentfault.com/a/1190000006879700  \n```\n\n```\n1.DNS解析:DNS解析的过程就是网址到IP地址的转换,当发送请求时，可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡。\n2.TCP连接\nTCP/IP 协议\n三次握手：\n(1)客户端发送一个消息给到服务端\n(2)服务端回给客户端一个消息\n(3)客户端再回给服务端一个消息\n四次挥手：\n(1)客户端发送一个我要断开的消息给服务端\n(2)服务端接受到以后发送一个消息告诉客户端我已经进入关闭等待状态\n(3)服务端再次发送一个消息告诉客户端，这个是我的最后一次消息给你，当我再接受到消息的时候就会关闭\n(4)客户端接受到服务端的消息以后，告诉服务器，我已经关闭，这个是给你的最后一个消息\n3.发送HTTP请求\n每一个请求都会有一个请求报文(请求行，请求头，请求空行，请求体)\n完整请求报文\n(1)请求行\nPOST /user HTTP/1.1     \n# POST 请求方式\n# /user 请求URL（不包含域名）\n# HTTP/1.1 请求协议版本    \n(2)请求头\nuser-agent: Mozilla/5.0 # 产生请求的浏览器信息\naccept: application/json # 表示客户端希望接受的数据类型\nContent-Type: application/x-www-form-urlencoded # 客户端发送的实体数据格式\nHost: 127.0.0.1 # 请求的主机名（IP） \n(3)请求空行\n#（此处必须有一空行\n(3)请求体\nname=world \n4.服务器处理请求并返回HTTP报文\n响应报文(状态行，响应头，响应体)\n(1)状态行\nHTTP/1.1 200 OK\n# HTTP/1.1 服务器使用的 HTTP 协议版本\n# 200 响应状态码\n# OK 对响应状态码的简单解释\n(2)响应头\nDate: Jan, 14 Aug 2019 12:42:30 GMT # 服务器时间\nServer: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45 # 服务器类型\nContent-Type: text/html # 服务端给客户端的数据类型\nContent-Length: 11 # 服务端给客户端的数据长度\n(3)响应体\nhello world\n# 服务端给客户端的响应数据\n5.浏览器解析渲染页面\n   浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为reflow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。\n6.连接结束\n```\n\n\n\n#### 27  GET POST 区别\n\n```\n1  post  上传   都可以用post\n2  get   明文请求     jsonp必须用get    请求内容在地址栏显示  不安全   \n```\n\n```\n1、传送方式：get通过地址栏传输，post通过报文传输。\n2、传送长度：get参数有长度限制（受限于url长度），而post无限制\n3、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；\n```\n\n#### 28 this指向\n\n```\n普通函数的this   谁调用指向谁     把谁找到   就看.前面的对象   全局window可以省略的\n箭头函数的this会指向上层环境  不会改变\n```\n\n```\n函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系\n1.全局定义的函数直接调用，this => window\n2.对象内部的方法调用，this => 调用者\n3.定时器的处理函数，this => window\n4.事件处理函数，this => 事件源\n5.自调用函数，this => window\n6.call 和 apply 和 bind强行改变this指向\n函数名.call(要改变的 this 指向，要给函数传递的参数1，要给函数传递的参数2， ...)\n函数名.apply(要改变的 this 指向，[要给函数传递的参数1， 要给函数传递的参数2， ...])\nbind方法不会立即执行函数，而是返回一个已经改变了 this 指向的函数\nvar newFn = 函数名.bind(要改变的 this 指向);\nnewFn(传递参数)\n7.在框架组件中this指向当前组件的实例化对象\n```\n\n\n\n#### 29  webpack  基础\n\n```\nentry :入口      多页应用 多入口多出口\noutput: 出口\nmodule:{   loader\n\trules:[]\n}\nplugins:[ ],\ndevServer:{}  //webpack服务器\n```\n\n```\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  mode: \"development\",\n  entry: \"./src/main.js\",     //入口文件\n  output: {                    //口文件\n    filename: \"main.js\",\n    path: path.join(__dirname, \"../dist\"),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: \"style-loader\", // 将 JS 字符串生成为 style 节点\n          },\n          {\n            loader: \"css-loader\", // 将 CSS 转化成 CommonJS 模块\n          },\n          {\n            loader: \"sass-loader\", // 将 Sass 编译成 CSS\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./index.html\"\n    }),\n  ],\n  devServer: {\n    // contentBase: path.join(__dirname, \"../dist\"),\n    port: 3000,   //端口号\n    open: true,  //是否自动打开浏览器\n    hot: true,  // 热更新\n    proxy: {\n      '/api': {// '/api':匹配项\n        target: 'http://www.baidu.com',// 接口的域名\n        // secure: false,// 如果是https接口，需要配置这个参数\n        changeOrigin: true,// 如果接口跨域，需要进行这个参数配置\n        // pathRewrite: {// 如果接口本身没有/api需要通过pathRewrite来重写了地址\n        //   '^api': ''\n        // }\n      }\n    }\n  }\n};\n\n```\n\n\n\n#### 30  call apply  bind \n\n```\n统一的作用都是  修改this指向\ncall(对象,参数1，参数2，参数3) 直接调用\napply(对象，[])  直接调用\nbind(对象，参数1，参数) 必须还需要加（）调用\n```\n\n### ES6\n\n#### 31 promise\n\n```\n1 解决异步回调问题  \n2  因为  我们开发程序 有可能是有关联的 \n\t例如   可以程序 有三步组成   第一步的结果会影响到第二步 ， 第二步结果会影响第三步  \t\n3 Promise.then().then().then().catch()\n\nnew Promise((resolve,reject)=>{\n\tresove('ok') // 传递给.then\n\treject(err)  // 传递catch\n})\n\nasync  --- await\n\nasync function () { }  返回promise对象\nawait 将异步转成同步\n\nPromise.all()\nPromise.race()\n```\n\n```\n1.promise语法\nnew Promise(function (resolve, reject) {\n  // resolve 表示成功的回调\n  // reject 表示失败的回调\n}).then(function (res) {\n  // 成功的函数\n}).catch(function (err) {\n  // 失败的函数\n})\n2.async/await语法\nasync function fn() {\n  const res = await promise对象\n}\n```\n\n\n\n#### 32  let const var  区别\n\n```\nlet,const 会产生块及作用域 ，声明的变量就是私有的\nvar  变量提升（预解析）  let const 没有\nlet  可以修改 但是不可重复声明  \nconst  不可以修改    我们一般定义 常量  配置属性\n\n使用的一般我们会根据 作用域来选    -----   解决了 变量徐然全局的问题  ----- 有点类似闭包的特性\n\n```\n\n\n\n#### 33 箭头函数 \n\n```\n1 使用情况  在vue和react或者其他框架里面，我们一般情况下  this都应该指向当前组件 ， 如果用普通函数会导致this指向不明确，所以用箭头函数比较合适\n2 箭头函数的this始终指向它的外部环境，不会发生改变\n3 let  foo = () => {}      后面有没有大括号是两种  如果有大括号就是普通函数   如果不加大括号  自动加return\n4 不能能做构造函数    因为this指向固话\n5 箭头函数没有 arguments对象 （获取实参的集合）， 我们可以通过 ...拓展运算符来模拟实参集合\n```\n\n```\n 箭头函数只能简写函数表达式，不能简写声明式函数\n 语法： (函数的行参) => { 函数体内要执行的代码 }\n 箭头函数内部没有 this，箭头函数的 this 是上下文的 this\n 箭头函数内部没有 arguments 这个参数集合\n 函数的行参只有一个的时候可以不写 ()其余情况必须写\n 函数体只有一行代码的时候，可以不写 {}，并且会自动 return\n```\n\n\n\n#### 34  解构赋值\n\n```\na=10  b=11   \n[b,a]= [a,b]\n```\n\n```\n解构对象\nconst obj = {\n  name: 'Jack',\n  age: 18,\n  gender: '男'\n}\nlet { name, age, gender } = obj\n解构数组\nconst arr = ['Jack', 'Rose', 'Tom']\nlet [a, b, c] = arr\n```\n\n\n\n#### 35 模板字符串 \n\n```\n` ${} `\n```\n\n```\nlet num = 100\nlet str = `hello${num}world${num}`\nconsole.log(str) // hello100world100\n```\n\n#### 36  新增方法\n\n\n\n#### 37  class  类\n\n```\nclass Person {}\nclass Man extends Preson{\n\tconstructor(){\n\t\tsuper()\n\t}\n}\n```\n\n```\n// 下面表示创造一个 Student 类，继承自 Person 类\nclass Student extends Person {\n    constructor () {\n        // 必须在 constructor 里面执行一下 super() 完成继承 \n        super()\n    }\n}\n```\n\n#### 38 Set ,Map   去重\n\n```\narr = [...new Set(arr)]\n```\n\n```\nhttps://www.cnblogs.com/leftJS/p/11080962.html\n1.set类似于数组，但是成员的值都是唯一的，没有重复的值。\n(1)实例对象方法\nadd(value)：添加某个值，返回 Set 结构本身(可以链式调用)。\ndelete(value)：删除某个值，删除成功返回true，否则返回false。\nhas(value)：返回一个布尔值，表示该值是否为Set的成员。\nclear()：清除所有成员，没有返回值。\nconst mySet = new Set(['a', 'a', 'b', 1, 2, 1])\nconsole.log(mySet)  // {'a', 'b', 1, 2}   \nmyset.add('c').add({'a': 1})\nconsole.log(mySet) // {'a', 'b', 1, 2, 'c', {a: 1}} \nconsole.log(mySet.size)     // 6\nmySet.has(2)     // true\n(2)遍历方法\nkeys()：返回键名的遍历器。\nvalues()：返回键值的遍历器。\nentries()：返回键值对的遍历器。\nforEach()：使用回调函数遍历每个成员。\n(3)数组去重\nfunction unique(arr){\n    return [...(new Set(arr))];\n}\n2.map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。\n(1)map对象的方法\nset(key, val): 向Map中添加新元素\nget(key): 通过键值查找特定的数值并返回\nhas(key): 判断Map对象中是否有Key所对应的值，有返回true,否则返回false\ndelete(key): 通过键值从Map中移除对应的数据\nclear(): 将这个Map中的所有元素删除\nconst m1 = new Map([['a', 111], ['b', 222]])\nconsole.log(m1) // {\"a\" => 111, \"b\" => 222}\nm1.get('a')  // 111\nconst m2 = new Map([['c', 3]])\nconst m3 = new Map(m2)\nm3.get('c') // 3\nm3.has('c') // true\nm3.set('d', 555)\nm3.get('d') // 555\n(2)遍历方法\nkeys()：返回键名的遍历器\nvalues()：返回键值的遍历器\nentries()：返回键值对的遍历器\nforEach()：使用回调函数遍历每个成员\n(3)数组去重\nfunction unique(arr) {\n    //定义常量 res,值为一个Map对象实例\n    const res = new Map();\n    //返回arr数组过滤后的结果，结果为一个数组\n    //过滤条件是，如果res中没有某个键，就设置这个键的值为1\n    return arr.filter((a) => !res.has(a) && res.set(a, 1))\n}\n\n```\n\n\n\n#### 39   ... 拓展运算符   浅拷贝\n\n```\nlet arr = [1,2,3,4,5]\nlet arr1 = [...arr] 浅拷贝\nlet obj = {name:\"zzz\"}\nlet obb1 = {...obj} \n```\n\n\n\n####  40  symbol  唯一   用做key值\n\n```\n1.Symbol 本质上是一种唯一标识符，可用作对象的唯一属性名，这样其他人就不会改写或覆盖你设置的属性值。\n2.声明方法：let id = Symbol(\"id\");\n3.Symbol 数据类型的特点是唯一性，即使是用同一个变量生成的值也不相等。\nlet id1 = Symbol('id');\nlet id2 = Symbol('id');\nconsole.log(id1 == id2);  //false\n4.Symbol 数据类型的另一特点是隐藏性，for···in，object.keys() 不能访问\n```\n\n\n\n### Jquery\n\n 1  选择器   \n\n  2 简单动画    animate   hide show    slideUp slideDown   \n\n 3  attr   removeAttr\n\n 4  ajax\n\n### Vue与Jquery区别  \n\n```\njquery开发 针对 每次修改dom  所有的思想是对于dom的修改, 好性能  \nVue  MVVM  ,虚拟dom , 组件化开发会大大提高开发效率，维护效率，提高组减的复用， 自带很多指令，可以直接遍历dom，所达到修改数据后，视图会自动更新，\nvue  可以做单页应用，这样可以大量的减少http请求\nvue  可以有想成缓存组件，更全面的 ui框架提供\nvue  官方提供脚手架，当我开发的时候可以组件化，打包之后更是压缩文件，省去了我们原生开发还需要手动压缩\nvue  逻辑实现比较简单，只要对数据增删改查就可以实现页面的增删改查\n```\n\n### 其他\n\n####   41 BFC(块级格式化上下文)\n\n```\nBFC(块级格式化上下文):它是一个独立的渲染区域，只有块级元素参与， 它规定了BFC内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\nBFC的布局规则（规定、标准）：\n    一、BFC内部的Box会在垂直方向，一个接一个地放置。\n    二、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠（按照最大margin值设置）\n    三、每个元素的margin box的左边， 与包含块border box的左边相接触\n    四、BFC的区域不会与float box重叠。\n    五、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n    六、计算BFC的高度时，浮动元素也参与计算\nBFC的触发条件：\n    根元素(html)\n    float属性不为none\n    position为absolute或fixed\n    display为inline-block, table-cell, table-caption, flex, inline-flex\n    overflow不为visible\n应用：\n    清除浮动\n    三栏布局\n```\n\n#### 42 MVC,MVP,MVVM\n\n```\n1.MVC:\nM:Model\nV:View\nC:ControllerPresenter\n调用关系：用户的对View操作以后，View捕获到这个操作，会把处理的权利交移给Controller；Controller会对来自View数据进行预处理、决定调用哪个Model的接口；然后由Model执行相关的业务逻辑；当Model变更了以后，会通过观察者模式通知View；View通过观察者模式收到Model变更的消息以后，会向Model请求最新的数据，然后重新更新界面。\n2.MVP\nM:Model\nV:View\nP:Presenter\n调用关系：和MVC模式一样，用户对View的操作都会从View交移给Presenter。Presenter会执行相应的应用程序逻辑，并且对Model进行相应的操作；而这时候Model执行完业务逻辑以后，也是通过观察者模式把自己变更的消息传递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，通过View提供的接口更新界面。\n3.MVVM\nM:Model\nV:View\nVM:Model of View\n调用关系：MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。\n```\n\n#### 43 检测数据类型\n\n```\n1.typeof\n对于基本类型，除 null 以外，均可以返回正确的结果。\n对于引用类型，除 function 以外，一律返回 object 类型。\n对于 null ，返回 object 类型。\n对于 function 返回  function 类型。\n2.instanceof\ninstanceof 检测的是原型,instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。\nfunction F(){}\nvar f=new F()\nconsole.log(f instanceof F) //true\n[] instanceof Array; // true\n[] instanceof Object; // true\n3.constructor\nconsole.log(''.constructor)   //ƒ String() { [native code] }\n4.toString\nconsole.log(Object.prototype.toString.call(''))   //[object String]\n```\n\n#### 44 git\n\n```\n1.GIT 初始化\n# git 初始化的指令\n$ git init\n2.GIT 暂存区\n# 把文件夹下的 index.txt 文本放在暂存区\n$ git add index.txt\n# 把文件夹下所有的内容都放在暂存区\n$ git add .\n3.GIT 历史区\n# 把暂存区的内容放到历史区\n$ git commit -m \"我是第一个版本\"\n# 查看当前历史区版本信息\n$ git log\n4.GIT 分支\n# 开辟一个 login 分支\n$ git branch login\n# 查看当前分支情况\n$ git branch\n# 切换到 login 分支\n$ git checkout login\n# 把 login 的内容合并到自己的分支(需要切换到其他主分支master)\n$ git merge login\n# 删除 login 分支(需要切换到其他分支)\n$ git branch -d login\n5.GIT 克隆\n# 直接克隆仓库\n$ git clone https://github.com/jquery/jquery.git\n6.GIT 下拉\n# 拉取远程最新代码\n$ git pull\n7.上传\n# 上传内容\n$ git push -u origin master\n# 表示把内容上传到 origin 这个地址\n# master 是上传到远程的 master 分支\n# 第二次上传\n$ git push\n```\n\n#### 45 sass和less\n\n```\n定义变量的符号不同，less 是用@，sass 使用\\$\n变量的作用域不同，less 在全局定义，就作用在全局，在代码块中定义，就作用于整个代码块。而 sass 只作用域全局。\n```\n\n#### 46 nodejs\n\n```\n1.核心模块\n(1)http模块（搭建服务器）\nconst http = require(\"http\");\n// request  请求对象  --- 获取请求对象的资源\n// responese 相应对象  --- 我需要给前端返回什么\nhttp\n  .createServer(function (req, res) {\n      console.log(req.url, \"res\");\n      console.log(req.headers,\"header\")\n      res.end(\"ok\");  // 必须要有结尾的\n  })\n  .listen(8089, function () {\n    console.log(\"启动成功\" + 8089);\n  });\n(2)url模块\ncosnt url = require(\"url\")\nurl.parse(地址,true/false)  // 地址栏转成对象    true表示将query字符串转对象\nurl.toString()        // 讲对象转成字符串\n(3)path模块\npath.resolve('资源路径','资源路径')   会拼接绝对路径  会自带 当前跟目录\npath.join() 路径合并  不会携带根目录\n__dirname  获取当前根目录的绝对路径\n(4)fs模块\nfs 分同步异步\n异步  一般都有回调函数   结果为回调函数的参数\n同步  返回值为回调函数的解构\nfs.writeFile()\nfs.WirteFileSync()\nfs.readFile()\nfs.readFileSync()\n2.commonjs规范\n暴露模块     module.exports    export default     export\n加载模块\t require           import from       import {} from\n3.使用express\nconst express = require(\"express\");\nconst app = express();\n// app.use()\n// 所有的请求都会经过这个回调函数\napp.use(function (req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  next();\n});\n// post请求参数\n// 作用向req.body 添加post请求参数\napp.use(express.urlencoded());   // application/x-www-form-urlencoded\napp.use(express.json());         //application/json\n// 路由\napp.get(function(req,res){\n\t请求参数  req.query\n})\napp.listen(8080, function () {\n  console.log(\"启动8080\");\n});\t\n4.上传文件\nconst multer = require(\"multer\");\nlet destUrl = path.join(__dirname, \"../\", \"public/imgs\");\nconst upl = multer({\n  dest: destUrl, //生成图片的路径\n});\nrouter.post(\"/\", upl.any(\"file\"), function (req, res) {\n  console.log(req.files, \"file\");\n  res.send({\n    code: 200,\n    msg: \"上传成功\",\n    imgs: imgs,\n  });\n});\n5. mongoose\n// 连接数据库\nconst mongoose = require(\"mongoose\");\nconst url = \"mongodb://127.0.0.1/topic\"; // 数据库名默认端口号 27017\nmongoose.connect(url);\nmongoose.connection.once(\"open\", () => {\n  console.log(url + \"数据库链接成功\");\n});\nmodule.exports = mongoose;\n// 导出数据模型\nconst mongoose = require(\"./mongoose\");\nconst { Schema } = mongoose;\nlet personSchema = new Schema({\n  username: String,\n  pass: String,\n  create_at: String,\n});\nlet UsersModel = mongoose.model(\"user\", personSchema, \"users\"); // \"users\"数据表名\nmodule.exports = UsersModel;\n```\n\n#### 47 react-hooks\n\n```\n常用hooks\n1.useState()\n当给 setCount 传入一个与 count 相同的原始值时，组件不会重新渲染。当传递一个对象时，无论是否一样都会渲染\nuseState()方法可以传递值也可以传递函数，可延迟初始化，此函数在多次渲染时只运行一次。\n2.useEffect\n函数组件中执行副作用操作。副作用: 数据获取，数据订阅，以及手动更改 React 组件中的 DOM 都属于副作用。\n3.useMemo\n使用 useMemo 方法可以避免无用方法的调用,\n4.useCallback\nuseCallback 解决的是传入子组件参数过度变化导致子组件过度渲染的问题\n5.useContext\n用来向所有后代组件传递 props\n6.useRef\n获取组件实例对象或者是DOM对象\n```\n\n#### 48 缓存\n\n```\n强制缓存优先于协商缓存进行\n1.强制缓存\nCache-Control优先于Expires\n2.协商缓存\n协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存。\nEtag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)\nIf-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200\nEtag / If-None-Match 优先级高于 Last-Modified / If-Modified-Since\n3.存储位置\n内存缓存优先硬盘缓存\n在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取；而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存。\n```\n\n#### 49 数组扁平化\n\n```\nhttps://www.cnblogs.com/wind-lanyan/p/9044130.html\n```\n\n#### 50 通用柯里化函数\n\n```\n//toString方法如果是直接调用那就返回当前函数的字符串，如果等于一个函数那就返回一个函数是直接可以被调用的\n//通用的柯力化函数\nfunction curry(){\n    //首先收集当前第一次传来的参数\n    let _args = Array.prototype.slice.call(arguments)\n    //收集二次或多次函数调用参数\n    let _collectArgs = function (){\n        _args.push(...arguments)\n        return _collectArgs\n    }\n    //难点 _collectArgs.toString()这样直接返回当前的函数的字符串 例如@1 \n    //难点  _collectArgs.toString = function(){} 返回这个函数会在自己执行\n    //难点toString隐式转换的特性\n    //闭包缓存当前参数\n    //还可以通过fn.length做性能优化\n    _collectArgs.toString = function(){\n        return _args.reduce((a,b)=>{\n            return a+b\n        })\n    }\n    return _collectArgs\n}\n//当传入不同的任何格式参数都参与计算\n//curry(1,2)(2)(3)\nconsole.log(curry(1)(2)(3))\n//例如@1\n//当前的函数变成字符串修改里面的内容 还有就是返回当前对象类型\nfunction x() { alert('asdf'); }\neval(x.toString().replace('asdf','hello 打工人'));\nx();\n\n————————————————\n版权声明：本文为CSDN博主「wy勇敢的心」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wangyun_gogo/article/details/109453414\n```\n\n#### 51有效大括号（leetcode 20）\n\n```\n var isValid = function(str){\n    var map = {\n      \"{\":\"}\",\n      \"[\":\"]\",\n      \"(\":\")\"\n    }\n    if(str.length % 2 === 1) return false;\n    var res = [];\n    for(var i = 0;i < str.length;i++){\n      if(map[str[i]]){\n        res.push(str[i]);\n      } else {\n        var a = res[res.length-1];\n        if(map[a] == str[i]) {\n          res.pop()\n        } else {\n          return false;\n        } \n      }\n    }\n    return res.length===0;\n  }\n```\n\n#### 52检索url参数\n\n```\n  function query() {\n        let url = window.location.search.split(\"?\")[1];\n        let params = url.split(\"&\");\n        const param = {};\n        params.forEach((i) => {\n            let item = i.split(\"=\");\n            param[item[0]] = item[1];\n        });\n        console.log(param);\n        return param;\n    }\n```\n\n#### 53大数相加\n\n```\n function bigSum(a, b) {\n        // 已 12345 和 678 为例\n        // 我们需要先把他们转换为位数相同，不够补零，记住要统一加一位，为了两个最大的位数相加后可能需要进位\n        // 12345 =>  012345    678 => 000678\n        // 然后让各自的个位个位相加，十位与十位相加   5 + 8 = 3  （1为进位） 4 + 7 + 1 = 2 （1） .....\n        a = '0' + a\n        b = '0' + b\n        let aArr = a.split('')\n        let bArr = b.split('')\n        let carry = 0\n        let res = []\n        let length = Math.max(aArr.length, bArr.length)\n        let distance = aArr.length - bArr.length\n        if (distance > 0) {\n            for (let i = 0; i < distance; i++) {\n                bArr.unshift('0');\n            }\n        } else {\n            for (let i = 0; i < Math.abs(distance); i++) {\n                aArr.unshift('0');\n            }\n        }\n        for (let i = length - 1; i >= 0; i--) {\n            let sum = Number(aArr[i]) + Number(bArr[i]) + Number(carry)\n            carry = sum >= 10 ? 1 : 0\n            sum = sum >= 10 ? parseInt(sum % 10) : sum\n            res.unshift(sum)\n        }\n        return res.join('').replace(/^0/, '')\n    }\n    console.log(bigSum('9007199254740993', '1'))\n// 注意： 传参时就需传入字符串，如果是数字类，在传参时就已经出现精度丢失\n\nhttps://www.jianshu.com/p/c373943f0e9e\n```\n\n#### 54 http协议\n\n```\n1.http/1.0\n   限制每次连接只处理一个请求，无状态：协议对于事务处理没有记忆能力。客户端向服务器请求服务时，只需传送请求方法和路径。HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。\n2.http/1.1\n\t增加了持久连接的方法，在一个TCP连接上可以传输多个http请求，只要浏览器或者服务器没有明确断开，该TCP连接会一直保持。浏览器为每个域名最多维护6个TCP持久连接。\n3.http/2.0\n\t影响http/1.1效率的三个主要因素：TCP的满启动、多条TCP连接竞争带宽和队头堵塞。\n\t引入多路复用机制：同一个连接并发处理多个请求。通过在协议栈中添加二进制分帧层来实现。能够实现请求的优先级、服务器推送、头部压缩等特性。\n\t头部压缩：使用HPACK算法进行压缩。\n\t服务器推送：页面请求资源a.css，接到服务器资源同时会返回a.js，存到缓存中，下次不用重复访问服务器。\n4.https\nHTTPS 在传输的过程中会涉及到三个密钥：\n- 服务器端的公钥和私钥，用来进行非对称加密\n- 客户端生成的随机密钥，用来进行对称加密\n一个 HTTPS 请求实际上包含了两次 HTTP 传输，可以细分为 8 步。\n1. 客户端向服务器发起 HTTPS 请求，连接到服务器的 443 端口\n2. 服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。\n3. 服务器将自己的公钥发送给客户端。\n4. 客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么 HTTPS 传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为 client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS 中的第一次 HTTP 请求结束。\n5. 客户端会发起 HTTPS 中的第二个 HTTP 请求，将加密之后的客户端密钥发送给服务器。\n6. 服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。\n7. 然后服务器将加密后的密文发送给客户端。\n8. 客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样 HTTPS 中的第二个 HTTP 请求结束，整个 HTTPS 传输完成。\n```\n\n","slug":"面试题整理","published":1,"updated":"2022-03-30T02:21:07.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7pol2000218vq6y98dwpi","content":"<h3 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML+CSS\"></a>HTML+CSS</h3><h4 id=\"1-双飞翼-，圣杯布局\"><a href=\"#1-双飞翼-，圣杯布局\" class=\"headerlink\" title=\"1  双飞翼 ，圣杯布局\"></a>1  双飞翼 ，圣杯布局</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 弹性盒子</span><br><span class=\"line\">2 百分比 </span><br><span class=\"line\">3 定位</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">圣杯布局</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\">            margin:0;</span><br><span class=\"line\">            padding:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html&#123;</span><br><span class=\"line\">            font-size: 31.25vw;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html,body&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\">            display: flex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        header&#123;</span><br><span class=\"line\">            width:1rem;</span><br><span class=\"line\">            height: 1rem;</span><br><span class=\"line\">            background: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        main&#123;</span><br><span class=\"line\">            flex: 1;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 2rem;</span><br><span class=\"line\">            background: yellow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        footer&#123;</span><br><span class=\"line\">            width:1rem;</span><br><span class=\"line\">            height: 1rem;</span><br><span class=\"line\">            background: springgreen;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;&lt;/header&gt;</span><br><span class=\"line\">    &lt;main&gt;&lt;/main&gt;</span><br><span class=\"line\">    &lt;footer&gt;&lt;/footer&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BFC双飞翼布局</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\">            margin:0;</span><br><span class=\"line\">            padding:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html,body&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .left&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 60%;</span><br><span class=\"line\">            background: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 60%;</span><br><span class=\"line\">            background: orange;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .center&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            background: green;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面</span><br><span class=\"line\">    先写left和right;后写中间！！！必须这样子！！ --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不用BFC来写双飞翼布局</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\">            margin:0;</span><br><span class=\"line\">            padding:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html,body&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .left&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 60%;</span><br><span class=\"line\">            background: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 65%;</span><br><span class=\"line\">            background: orange;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .center&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            background: green;</span><br><span class=\"line\">            padding:0 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .cenCon&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            background: purple;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面</span><br><span class=\"line\">    先写left和right;后写中间！！！必须这样子！！ --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;cenCon&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-块元素垂直居中\"><a href=\"#2-块元素垂直居中\" class=\"headerlink\" title=\"2  块元素垂直居中\"></a>2  块元素垂直居中</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  弹性布局   ---  </span><br><span class=\"line\">2  定位    50% 50%  减自身的一ban</span><br><span class=\"line\">3  转行内块元素   line-height:100px  font-size:元素的高度    text-align：center</span><br><span class=\"line\">4  把定位改成 transform </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  弹性布局</span><br><span class=\"line\">display:flex;</span><br><span class=\"line\">justify-content: center;</span><br><span class=\"line\">align-items: center;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2  定位</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left:50%;</span><br><span class=\"line\">top:50%;</span><br><span class=\"line\">margin:-高度的一半 0 0 -宽度的一半。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3  转行内块元素</span><br><span class=\"line\">text-align：center;</span><br><span class=\"line\">line-height:100px;</span><br><span class=\"line\">height:100px;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4  定位</span><br><span class=\"line\">position:absolute;</span><br><span class=\"line\">left:0;right:0;</span><br><span class=\"line\">top:0;bottom:0;</span><br><span class=\"line\">margin:auto;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-盒模型和怪异盒模型\"><a href=\"#3-盒模型和怪异盒模型\" class=\"headerlink\" title=\"3  盒模型和怪异盒模型\"></a>3  盒模型和怪异盒模型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通盒模型     content + border*2 + paddign*2+margin*2 =  普通盒模型</span><br><span class=\"line\">怪异盒模型     contnet + margin*2   = 怪异盒模型  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.两者区别</span><br><span class=\"line\"></span><br><span class=\"line\">标准盒模型总宽度 = width + 左右padding + 左右border + 左右margin</span><br><span class=\"line\"></span><br><span class=\"line\">标准盒模型总高度 = height + 上下padding + 上下border + 上下margin</span><br><span class=\"line\"></span><br><span class=\"line\">怪异盒模型总宽度 = width + 左右margin (width包含了padding和border)</span><br><span class=\"line\"></span><br><span class=\"line\">怪异盒模型总高度 = height + 上下margin (height包含了padding和border)</span><br><span class=\"line\"></span><br><span class=\"line\">注：当没有添加文档声明时，就会触发某些浏览器的怪异模式，如IE6</span><br><span class=\"line\"></span><br><span class=\"line\">2.如何将标准盒模型转换为怪异盒模型</span><br><span class=\"line\"></span><br><span class=\"line\">给给标准盒子加上这个属性：</span><br><span class=\"line\"></span><br><span class=\"line\">语法：box-sizing:border-box;</span><br><span class=\"line\"></span><br><span class=\"line\">注：box-sizing:content-box;  默认值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-解决浮动塌陷\"><a href=\"#4-解决浮动塌陷\" class=\"headerlink\" title=\"4 解决浮动塌陷\"></a>4 解决浮动塌陷</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 清除浮动</span><br><span class=\"line\">2 overflow:hidden</span><br><span class=\"line\">3 给父元素添加高度</span><br><span class=\"line\">4 给父元素加边框</span><br><span class=\"line\">5 给父元素加padding</span><br><span class=\"line\">6 :after 给添加清除浮动</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1: 给父元素加overflow:hidden;</span><br><span class=\"line\">方法2: 在浮动元素下面加空div,并添加样式</span><br><span class=\"line\">       div&#123;</span><br><span class=\"line\">       \tclear:both;</span><br><span class=\"line\">       \theight:0; </span><br><span class=\"line\">       \toverflow:hidden;</span><br><span class=\"line\">       \t&#125;</span><br><span class=\"line\">方法3: 万能清除浮动法：</span><br><span class=\"line\">    选择符：after&#123;</span><br><span class=\"line\">           \tcontent: &#x27;&#x27;;</span><br><span class=\"line\">           \tclear: both;</span><br><span class=\"line\">           \tdisplay:block;</span><br><span class=\"line\">           \theight:0;</span><br><span class=\"line\">           \tvisibility:hidden;</span><br><span class=\"line\">           \toverflow: hidden;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-em-，rem-px-vw-vh\"><a href=\"#5-em-，rem-px-vw-vh\" class=\"headerlink\" title=\"5 em ，rem , px,  vw,vh\"></a>5 em ，rem , px,  vw,vh</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 em   父元素的倍数</span><br><span class=\"line\">2 rem  根元素的倍数     （适配会根据rem来设定）  动态设置  html的font-size</span><br><span class=\"line\">3 vw,vh   只适用于高版本浏览器  ie9以上   移动都可以用  【100%内核都是 -webkit-】</span><br><span class=\"line\">4 px像素</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 px就是像素，也是我们现在经常使用的基本单位，比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。</span><br><span class=\"line\">2 em参考物是父元素的font-size，默认字体大小是16px，所以1em不是固定值，因为它会继承父元素的字体大小</span><br><span class=\"line\">3 rem参考物是相对于根元素，我们在使用时可以在根元素设置一个参考值即可，相对于em使用，减少很大运算工作量，例：html大小为10px，12rem就是120px。</span><br><span class=\"line\">4 % 是相对于父元素的大小设定的比率。</span><br><span class=\"line\">5 vw是相对视口（viewport）的宽度而定的，长度等于视口宽度的1/100</span><br><span class=\"line\">假如浏览器的宽度为200px，那么1vw就等于2px（200px/100）</span><br><span class=\"line\">6 vh是相对视口（viewport）的高度而定的，长度等于视口高度的1/100</span><br><span class=\"line\">假如浏览器的高度为500px，那么1vh就等于5px（500px/100）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-边框一像素问题\"><a href=\"#6-边框一像素问题\" class=\"headerlink\" title=\"6 边框一像素问题\"></a>6 边框一像素问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tarnsfrom : scale(0.7)  缩放</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决问题:移动端1像素变粗</span><br><span class=\"line\">\t为什么移动端CSS里面写了1px，实际上看起来比1px粗；了解设备物理像素和逻辑像素的同学应该很容易理解，其实这两个px的含义其实是不一样的，UI设计师要求的1px是指设备的物理像素1px，而CSS里记录的像素是逻辑像素，它们之间存在一个比例关系，可以用javascript中的`window.devicePixelRatio`来获取，也可以用媒体查询的`-webkit-min-device-pixel-ratio`来获取。当然，比例多少与设备相关。在手机上border无法达到我们想要的效果。这是因为devicePixelRatio特性导致，iPhone的devicePixelRatio==2，而border-width: 1px描述的是设备独立像素，所以，border被放大到物理像素2px显示，在iPhone上就显得较粗。</span><br><span class=\"line\">解决方案:transform: scale(0.5) 方案，用高度1px的div充当边框</span><br><span class=\"line\">     div &#123;</span><br><span class=\"line\">            height: 1px;</span><br><span class=\"line\">            background: #000;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        /* 2倍屏 */</span><br><span class=\"line\">        @media only screen and (-webkit-min-device-pixel-ratio: 2.0) &#123;</span><br><span class=\"line\">            div &#123;</span><br><span class=\"line\">                -webkit-transform: scaleY(0.5);</span><br><span class=\"line\">                transform: scaleY(0.5);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        /* 3倍屏 */</span><br><span class=\"line\">        @media only screen and (-webkit-min-device-pixel-ratio: 3.0) &#123;</span><br><span class=\"line\">            div &#123;</span><br><span class=\"line\">                -webkit-transform: scaleY(0.33);</span><br><span class=\"line\">                transform: scaleY(0.33);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>作者：果汁凉茶丶<br>链接：<a href=\"https://www.jianshu.com/p/fa670b737a29\">https://www.jianshu.com/p/fa670b737a29</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"7-兼容问题\"><a href=\"#7-兼容问题\" class=\"headerlink\" title=\"7  兼容问题\"></a>7  兼容问题</h4><p>  链接1   <a href=\"https://blog.csdn.net/Jkssns/article/details/103456913\">https://blog.csdn.net/Jkssns/article/details/103456913</a>   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、IOS下input默认样式(圆角、阴影)</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  -webkit-appearance: none;</span><br><span class=\"line\">  border-radius: 0;</span><br><span class=\"line\">  border: 1px #ccc solid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2、在IOS下页面滑动卡顿，Android没问题</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">body &#123;-webkit-overflow-scrolling:touch; overflow-scrolling: touch;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3、input type 改为button</span><br><span class=\"line\">当input type为button，disabled为true，会出现背景色异常(其实就是禁用的样式)</span><br><span class=\"line\">把input的disabled改为readonly</span><br><span class=\"line\">opacity：1</span><br><span class=\"line\"></span><br><span class=\"line\">4、input type=text切换到英文输入法IOS下的问题</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">input添加autocapitalize属性</span><br><span class=\"line\">&lt;input class=&quot;SmallFour&quot; type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">5、禁止数字自动识别为电话号码</span><br><span class=\"line\"></span><br><span class=\"line\">这个比较有用，因为一串数字在iphone的部分浏览器上会显示成蓝色，样式加成别的颜色也是不生效的。不是我亲测，在微信内部浏览器没问题，但是在safari上有问题，IOS系统版本12.1.4</span><br><span class=\"line\">&lt;div style=&quot;color: red&quot;&gt;1212312312321323&lt;/div&gt;</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">6、input type=number之后，pc端出现上下箭头</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">input::-webkit-inner-spin-button &#123;</span><br><span class=\"line\">  -webkit-appearance: none !important;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">7、是图片填充到外层的框内，很好用，直接给图片添加样式。</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">object-fit: cover;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">height:100%;</span><br><span class=\"line\"></span><br><span class=\"line\">8、手机端按住不放 阻止浏览器默认响应事件 调试</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">//clikMenu 你要点击的事件节点</span><br><span class=\"line\">function touchendmovie(clikMenu)&#123;</span><br><span class=\"line\">    var timeOutEvent = 0;</span><br><span class=\"line\">    $(document).on(&#x27;touchstart&#x27;,clikMenu,function(e)&#123;</span><br><span class=\"line\">        timeOutEvent = setTimeout(function()&#123;</span><br><span class=\"line\">        //这里编写你要执行的事件 &#125;,300);</span><br><span class=\"line\">        //这里设置长按响应时间</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(document).on(&#x27;touchmove&#x27;,clikMenu,function(e)&#123;</span><br><span class=\"line\">        clearTimeout(timeOutEvent);</span><br><span class=\"line\">        timeOutEvent = 0;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(document).on(&#x27;touchend&#x27;,clikMenu,function(e)&#123;</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">        if(timeOutEvent != 0 )&#123;</span><br><span class=\"line\">            console.log(&#x27;这里是点击了一下&#x27;); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        clearTimeout(timeOutEvent); </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">9、禁止复制、选中文本</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">.el &#123;</span><br><span class=\"line\">  -webkit-user-select: none;</span><br><span class=\"line\">  -moz-user-select: none;</span><br><span class=\"line\">  -khtml-user-select: none;</span><br><span class=\"line\">   user-select: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">10、input 的placeholder属性会使文本位置偏上</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">line-height: （和input框的高度一样高）---pc端解决方法</span><br><span class=\"line\">line-height：normal ---移动端解决方法</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-css预处理器\"><a href=\"#8-css预处理器\" class=\"headerlink\" title=\"8 css预处理器\"></a>8 css预处理器</h4><p>​    1 sass  less</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-H5-新增新特性\"><a href=\"#9-H5-新增新特性\" class=\"headerlink\" title=\"9 H5 新增新特性\"></a>9 H5 新增新特性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nav , header ,footer ,session </span><br><span class=\"line\">1  拖拽API</span><br><span class=\"line\">2  input 新增类型</span><br><span class=\"line\">3  视频音频</span><br><span class=\"line\">4  canvas</span><br><span class=\"line\">5  获取定位  谷歌浏览器不行（）  </span><br><span class=\"line\">6  web存储   localStorage sessionStorage</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/ainyi/p/9777841.html</span><br><span class=\"line\">H5 新特性</span><br><span class=\"line\">1. 语义化标签：header、footer、section、nav、aside、article</span><br><span class=\"line\">2. 增强型表单：input 的多个 type</span><br><span class=\"line\">3. 新增表单元素：datalist、keygen、output</span><br><span class=\"line\">4. 新增表单属性：placehoder、required、min 和 max</span><br><span class=\"line\">5. 音频视频：audio、video</span><br><span class=\"line\">6. canvas</span><br><span class=\"line\">7. 地理定位</span><br><span class=\"line\">8. 拖拽</span><br><span class=\"line\">9. 本地存储：localStorage - 没有时间限制的数据存储；sessionStorage - 针对一个 session 的数据存储，当用户关闭浏览器窗口后，数据会被删除</span><br><span class=\"line\">10. 新事件：onresize、ondrag、onscroll、onmousewheel、onerror、onplay、onpause</span><br><span class=\"line\">11. WebSocket：单个 TCP 连接上进行全双工通讯的协议</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-适配\"><a href=\"#10-适配\" class=\"headerlink\" title=\"10 适配\"></a>10 适配</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rem来适配 </span><br><span class=\"line\">1  后期字体大小不适配  就用px</span><br><span class=\"line\">2  rem插件    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于rem是根据根元素的font-size大小而定，所以根据浏览器当前的分辨率改变font-size的值，就可以用rem作为统一单位适配移动端</span><br><span class=\"line\">下图是不同宽度浏览器对应的font-size,可以引Rem自适应JS适配移动端。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://vcdn.pharmcube.com/icon-close.png\" alt=\"image-20201013185918101\"></p>\n<h4 id=\"11-响应式布局\"><a href=\"#11-响应式布局\" class=\"headerlink\" title=\"11 响应式布局\"></a>11 响应式布局</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  不同的终端显示不同的布局   media</span><br><span class=\"line\">2  不同分辨率显示布局一样 （视频）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 990px) and (min-width: 768px) &#123;</span><br><span class=\"line\">   css样式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"12-翻译\"><a href=\"#12-翻译\" class=\"headerlink\" title=\"12  翻译\"></a>12  翻译</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  几版语言写几版页面</span><br><span class=\"line\">2  vue-</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"JAVASCRIPT\"><a href=\"#JAVASCRIPT\" class=\"headerlink\" title=\"JAVASCRIPT\"></a>JAVASCRIPT</h3><h4 id=\"13-javascript-数据类型\"><a href=\"#13-javascript-数据类型\" class=\"headerlink\" title=\"13   javascript 数据类型\"></a>13   javascript 数据类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型  String (显示)  Number(运算)  Boolean(判断)  Undefined(声明未赋值) == Null(对象的空) Symbol(做键值)</span><br><span class=\"line\">引用类型  Object Array Function</span><br><span class=\"line\"></span><br><span class=\"line\">区别</span><br><span class=\"line\">基本类型存在  栈中   用完就销毁    之不能长存</span><br><span class=\"line\">引用类型      堆中   不会自动销毁</span><br><span class=\"line\"></span><br><span class=\"line\">引用赋值和浅拷贝和深拷贝</span><br><span class=\"line\"></span><br><span class=\"line\">引用赋值   就是 =   引用同一个地址  所有如果改变某个属性  所有引用都改变</span><br><span class=\"line\">浅拷贝   只拷贝一层   [...arr] &#123;...obj&#125;</span><br><span class=\"line\">深拷贝   遍历对象进行递归 ， JSON.stringify , JSON.parse ,  immutable.js</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/cf1e9d7e94fb</span><br><span class=\"line\">1.数据类型：</span><br><span class=\"line\">基本数据类型：String，Boolean，Number，Undefined，Null；</span><br><span class=\"line\">引用数据类型：Object(Array，Date，RegExp，Function)；</span><br><span class=\"line\">基本数据类型和引用数据类型的区别：</span><br><span class=\"line\">    保存位置不同：基本数据类型保存在栈内存中，引用数据类型保存在堆内存中，然后在栈内存中保存了一个对堆内存中实际对象的引用，即数据在堆内存中的地址，JS对引用数据类型的操作都是操作对象的引用而不是实际的对象，如果obj1拷贝了obj2，那么这两个引用数据类型就指向了同一个堆内存对象，具体操作是obj1将栈内存的引用地址复制了一份给obj2，因而它们共同指向了一个堆内存对象；</span><br><span class=\"line\">为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？</span><br><span class=\"line\">1）堆比栈大，栈比堆速度快；</span><br><span class=\"line\">2）基本数据类型比较稳定，而且相对来说占用的内存小；</span><br><span class=\"line\">3）引用数据类型大小是动态的，而且是无限的，引用值的大小会改变，不能把它放在栈中，否则会降低变量查找的速度，因此放在变量栈空间的值是该对象存储在堆中的地址，地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响；</span><br><span class=\"line\">4）堆内存是无序存储，可以根据引用直接获取；</span><br><span class=\"line\">2.深拷贝，浅拷贝</span><br><span class=\"line\">(1)深拷贝和浅拷贝简单解释：</span><br><span class=\"line\">     浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；</span><br><span class=\"line\">(2)区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；</span><br><span class=\"line\">(3)浅拷贝：</span><br><span class=\"line\">//手动实现</span><br><span class=\"line\">function simpleCopy(obj1) &#123;</span><br><span class=\"line\">   var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;</span><br><span class=\"line\">   for (let i in obj1) &#123;</span><br><span class=\"line\">   obj2[i] = obj1[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   return obj2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">   a: 1,</span><br><span class=\"line\">   b: 2,</span><br><span class=\"line\">   c: &#123;</span><br><span class=\"line\">   d: 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = simpleCopy(obj1);</span><br><span class=\"line\">obj2.a = 3;</span><br><span class=\"line\">obj2.c.d = 4;</span><br><span class=\"line\">alert(obj1.a); // 1</span><br><span class=\"line\">alert(obj2.a); // 3</span><br><span class=\"line\">alert(obj1.c.d); // 4</span><br><span class=\"line\">alert(obj2.c.d); // 4</span><br><span class=\"line\">//使用Object.assign()实现浅拷贝</span><br><span class=\"line\">let obj1 = &#123;</span><br><span class=\"line\">   a: &#123;</span><br><span class=\"line\">     b: 1</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   c: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj2 = Object.assign(&#123;&#125;,obj1)</span><br><span class=\"line\">obj2.a.b = 3;</span><br><span class=\"line\">obj2.c = 3</span><br><span class=\"line\">console.log(obj1.a.b); // 3</span><br><span class=\"line\">console.log(obj2.a.b); // 3</span><br><span class=\"line\">console.log(obj1.c); // 2</span><br><span class=\"line\">console.log(obj2.c); // 3</span><br><span class=\"line\">//展开运算实现浅拷贝</span><br><span class=\"line\">var obj1=&#123;</span><br><span class=\"line\">    a:1,</span><br><span class=\"line\">    b:2,</span><br><span class=\"line\">    c:&#123;</span><br><span class=\"line\">        d:3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2=&#123;...obj1&#125;</span><br><span class=\"line\">obj2.a=11</span><br><span class=\"line\">obj2.c.d=13</span><br><span class=\"line\">console.log(obj1,obj2)</span><br><span class=\"line\">(4)深拷贝</span><br><span class=\"line\">//递归实现深拷贝</span><br><span class=\"line\">function deepCopy(obj1) &#123;</span><br><span class=\"line\">  var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;</span><br><span class=\"line\">  if (obj1 &amp;&amp; typeof obj1 === &quot;object&quot;) &#123;</span><br><span class=\"line\">    for (var i in obj1) &#123;</span><br><span class=\"line\">      if (obj1.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        // 如果子属性为引用数据类型，递归复制</span><br><span class=\"line\">        if (obj1[i] &amp;&amp; typeof obj1[i] === &quot;object&quot;) &#123;</span><br><span class=\"line\">          obj2[i] = deepCopy(obj1[i]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          // 如果是基本数据类型，只是简单的复制</span><br><span class=\"line\">          obj2[i] = obj1[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  c: &#123;</span><br><span class=\"line\">    d: 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = deepCopy(obj1);</span><br><span class=\"line\">obj2.a = 3;</span><br><span class=\"line\">obj2.c.d = 4;</span><br><span class=\"line\">alert(obj1.a); // 1</span><br><span class=\"line\">alert(obj2.a); // 3</span><br><span class=\"line\">alert(obj1.c.d); // 3</span><br><span class=\"line\">alert(obj2.c.d); // 4</span><br><span class=\"line\">//使用JSON.stringify和JSON.parse实现深拷贝</span><br><span class=\"line\"> function deepCopy(obj1)&#123;</span><br><span class=\"line\">    let _obj = JSON.stringify(obj1);</span><br><span class=\"line\">    let obj2 = JSON.parse(_obj);</span><br><span class=\"line\">    return obj2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">var a = [1, [1, 2], 3, 4];</span><br><span class=\"line\">var b = deepCopy(a);</span><br><span class=\"line\">b[1][0] = 2;</span><br><span class=\"line\">alert(a); // 1,1,2,3,4</span><br><span class=\"line\">alert(b); // 2,2,2,3,4</span><br><span class=\"line\">缺点：对象里的值为函数无法拷贝</span><br><span class=\"line\">let obj1 = &#123;</span><br><span class=\"line\">   fun:function()&#123;</span><br><span class=\"line\">      alert(123);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class=\"line\">console.log(typeof obj1.fun); // function</span><br><span class=\"line\">console.log(typeof obj2.fun); // undefined</span><br><span class=\"line\">//jquery实现深拷贝</span><br><span class=\"line\">jquery 提供一个$.extend可以用来做深拷贝；</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"14-排序\"><a href=\"#14-排序\" class=\"headerlink\" title=\"14   排序\"></a>14   排序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://segmentfault.com/a/1190000016286789 </span><br><span class=\"line\">sort</span><br><span class=\"line\">冒泡</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.sort排序</span><br><span class=\"line\">按升序排列</span><br><span class=\"line\">arr.sort(</span><br><span class=\"line\">    function(n1,n2)&#123;</span><br><span class=\"line\">    \treturn n1-n2</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">按降序排列</span><br><span class=\"line\">arr.sort(</span><br><span class=\"line\">\tfunction(n1,n2)&#123;</span><br><span class=\"line\">\t\treturn n2-n1</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">2.冒泡排序</span><br><span class=\"line\">function bubbleSort(arr) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        for (var j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">                [arr[j], arr[i]] = [arr[i], arr[j]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">3.选择排序</span><br><span class=\"line\">function selectSort(arr) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        var min = i</span><br><span class=\"line\">        for (var j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            if (arr[min] &gt; arr[j]) &#123;</span><br><span class=\"line\">                min = j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i != min) &#123;</span><br><span class=\"line\">            [arr[min], arr[i]] = [arr[i], arr[min]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">4.快速排序</span><br><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">  qSort(0, arr.length - 1);</span><br><span class=\"line\">  return arr;</span><br><span class=\"line\">  function qSort(left, right)&#123;</span><br><span class=\"line\">    if (left &gt;= right)//两个数相遇则结束该轮排序</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    var key = arr[left];//取最左边的元素作为标识数</span><br><span class=\"line\">    var i = left;</span><br><span class=\"line\">    var j = right;</span><br><span class=\"line\">    while (i != j)&#123;//两个数相遇则结束该轮排序</span><br><span class=\"line\">      while (i != j &amp;&amp; arr[j] &gt;= key) j--;//j前移</span><br><span class=\"line\">      [arr[j], arr[i]] = [arr[i], arr[j]];</span><br><span class=\"line\">      while (i != j &amp;&amp; arr[i] &lt;= key) i++;//i后移</span><br><span class=\"line\">      [arr[j], arr[i]] = [arr[i], arr[j]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    qSort(left, j - 1);//对标识数前面的数继续该方法排序</span><br><span class=\"line\">    qSort(j + 1, right);//对标识数后面的数继续该方法排序</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-去重\"><a href=\"#15-去重\" class=\"headerlink\" title=\"15  去重\"></a>15  去重</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/lewiscutey/p/8269567.html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set()方法去重(ES6新增)</span><br><span class=\"line\">function unique(arr)&#123;</span><br><span class=\"line\">    return [...(new Set(arr))];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-闭包\"><a href=\"#16-闭包\" class=\"headerlink\" title=\"16 闭包\"></a>16 闭包</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  声明局部变量供外部使用，防止变量污染全局</span><br><span class=\"line\">2  闭包因为有函数  所以会存在堆中   可以存储值   一般会用来做缓存</span><br><span class=\"line\">缺点  容易造成内存泄漏  </span><br><span class=\"line\">解决方案  手动清除</span><br><span class=\"line\"></span><br><span class=\"line\">3 写法 </span><br><span class=\"line\">\t函数嵌套</span><br><span class=\"line\">\t内部函数会作为外部函数的返回值</span><br><span class=\"line\">\t内部函数因为作用域链可以访问外部函数的变量 会做为内部函数的返回值</span><br><span class=\"line\"></span><br><span class=\"line\">代码 </span><br><span class=\"line\">  function fn1()&#123;</span><br><span class=\"line\">          var a = 10</span><br><span class=\"line\">          return function()&#123;</span><br><span class=\"line\">              return  a</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">闭包概念：</span><br><span class=\"line\">1. 有一个 A 函数，再 A 函数内部返回一个 B 函数</span><br><span class=\"line\">2. 再 A 函数外部有变量引用这个 B 函数</span><br><span class=\"line\">3. B 函数内部访问着 A 函数内部的私有变量</span><br><span class=\"line\">以上三个条件缺一不可</span><br><span class=\"line\">闭包特点：</span><br><span class=\"line\">1. 作用域空间不销毁</span><br><span class=\"line\">- 优点： 因为不销毁，变量页不会销毁，增加了变量的生命周期</span><br><span class=\"line\">- 缺点： 因为不销毁，会一直占用内存，多了以后就会导致内存溢出</span><br><span class=\"line\">2. 可以利用闭包访问再一个函数外部访问函数内部的变量</span><br><span class=\"line\">- 优点： 可以再函数外部访问内部数据</span><br><span class=\"line\">- 缺点： 必须要时刻保持引用，导致函数执行栈不被销毁</span><br><span class=\"line\">3. 保护私有变量</span><br><span class=\"line\">- 优点： 可以把一些变量放在函数里面，不会污染全局</span><br><span class=\"line\">- 缺点： 要利用闭包函数才能访问，不是很方便</span><br><span class=\"line\">代码：</span><br><span class=\"line\">function fun() &#123;</span><br><span class=\"line\">    var count = 1;</span><br><span class=\"line\">    return function () &#123;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        console.log(count)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn = fun()</span><br><span class=\"line\">fn()  /* 2 */</span><br><span class=\"line\">fn()  /* 3 */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-面向对象-—-封装\"><a href=\"#17-面向对象-—-封装\" class=\"headerlink\" title=\"17 面向对象    — 封装\"></a>17 面向对象    — 封装</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象是一种编程思想  符合我们的生活逻辑</span><br><span class=\"line\">解</span><br><span class=\"line\">（面向过程）</span><br><span class=\"line\">答案</span><br><span class=\"line\"></span><br><span class=\"line\">面向过程也是一种编程思想   数学逻辑的映射   </span><br><span class=\"line\">解  </span><br><span class=\"line\">第一步骤</span><br><span class=\"line\">第二步骤</span><br><span class=\"line\">第三步骤</span><br><span class=\"line\">结果</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象编程，使用构造函数构造对象</span><br><span class=\"line\">1. 先书写一个构造函数</span><br><span class=\"line\">2. 在构造函数内向对象添加一些成员</span><br><span class=\"line\">3.使用这个构造函数创造一个对象（和 new 连用）</span><br><span class=\"line\">4.构造函数可以创建对象，并且创建一个带有属性和方法的对象</span><br><span class=\"line\">5.面向对象就是要想办法找到一个有属性和方法的对象</span><br><span class=\"line\">6.面向对象就是我们自己制造构造函数的过程</span><br><span class=\"line\">代码：</span><br><span class=\"line\">// 1. 先创造一个构造函数</span><br><span class=\"line\">function Person(name, gender) &#123;</span><br><span class=\"line\">  this.age = 18</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.gender = gender</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 2. 使用构造函数创建对象</span><br><span class=\"line\">var p1 = new Person(&#x27;Jack&#x27;, &#x27;man&#x27;)</span><br><span class=\"line\">var p2 = new Person(&#x27;Rose&#x27;, &#x27;woman&#x27;)</span><br><span class=\"line\">// 3. 使用原型向构造函数添加方法：</span><br><span class=\"line\">Person.prototype.sayHi = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;hello&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p1.sayHi()</span><br><span class=\"line\">// 4. 实例化对象的 __proto__ 和所属的构造函数的 prototype 是一个对象空间</span><br><span class=\"line\">console.log(p1.__proto__ === Person.prototype) // true</span><br><span class=\"line\">// 5. p1和p2都是Person的实例,p1.__proto__ 和 p2.__proto__ 指向的都是 Person.prototype,两个实例化对象p1和p2执行的是同一个方法。即构造函数原型Person.prototype里的方法。</span><br><span class=\"line\">console.log(p1.sayHi === p2.sayHi) // true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-原型链\"><a href=\"#18-原型链\" class=\"headerlink\" title=\"18 原型链\"></a>18 原型链</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一个对象都有原型对象 ， 原型对象也有原型对象 ，依次向上，直到Object.prototype如果还没有最会指向null,这样形成一个线性的链就叫做原型链</span><br><span class=\"line\">原型链特点 原型链上的方法和属性 实例可以共享</span><br><span class=\"line\"></span><br><span class=\"line\">共享的原因是什么？</span><br><span class=\"line\">实例会有指针  __proto__ 会指向源性对象</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型链：</span><br><span class=\"line\">实例化对象的__proto__指向其构造函数的prototype,实例化对象的__proto__里面也有一个成员叫做constructor指向当前这个对象所属的构造函数。实例化对象的__proto__的__proto__指向顶级构造函数Object的prototype,实例化对象的__proto__的__proto__里面的constructor指向顶级构造函数Object。Object.prototype就到顶了，Object.prototype 的 __proto__ 就是 null。</span><br><span class=\"line\">原型链的访问原则</span><br><span class=\"line\">访问一个对象的成员的时候,自己没有就会去 __proto__ 中找,如果 __proto__ 里面没有就再去 __proto__ 里面找,一直找到 Object.prototype 里面都没有，那么就会返回 undefiend。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"19-继承-说话的继承都是为了优化代码，优化性\"><a href=\"#19-继承-说话的继承都是为了优化代码，优化性\" class=\"headerlink\" title=\"19 继承  说话的继承都是为了优化代码，优化性\"></a>19 继承  说话的继承都是为了优化代码，优化性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组合继承 = 借用构造函数继承 + 原型对象继承</span><br><span class=\"line\"></span><br><span class=\"line\"> //超类  父类   假继承</span><br><span class=\"line\"> function A(name, age) &#123;</span><br><span class=\"line\"> \tthis.name = name;</span><br><span class=\"line\"> \tthis.age = age;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> A.prototype.eat = function () &#123;</span><br><span class=\"line\">\t console.log(this.name + &quot;吃 &quot; + this.name);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">Dog.prototype = new A();</span><br><span class=\"line\">Cat.prototype = new A();</span><br><span class=\"line\"> function Dog(name, age) &#123;</span><br><span class=\"line\"> \t\tA.call(this, name, age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> function Cat(name, age) &#123;</span><br><span class=\"line\">\t A.call(this, name, age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> var dog1 = new Dog(&quot;小白&quot;, 3);</span><br><span class=\"line\"> var dog2 = new Dog(&quot;小白1&quot;, 31);</span><br><span class=\"line\"> var cat1 = new Cat(&quot;喵咪&quot;, 3);</span><br><span class=\"line\"> console.log(dog1, cat1);</span><br><span class=\"line\"> dog1.eat();</span><br><span class=\"line\"> cat1.eat();</span><br><span class=\"line\">console.log(dog1.eat === dog2.eat); //true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.组合继承</span><br><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">    this.name = &#x27;Jack&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = function () &#123;</span><br><span class=\"line\">    console.log(&#x27;hello&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Student() &#123;</span><br><span class=\"line\">    Person.call(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype = new Person()</span><br><span class=\"line\">var s1 = new Student()</span><br><span class=\"line\">2.ES6继承</span><br><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">    this.name = &#x27;Jack&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = function () &#123;</span><br><span class=\"line\">    console.log(&#x27;hello&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 下面表示创造一个 Student 类，继承自 Person 类</span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        // 必须在 constructor 里面执行一下 super() 完成继承 </span><br><span class=\"line\">        super()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var s1 = new Student()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"20-本地存储\"><a href=\"#20-本地存储\" class=\"headerlink\" title=\"20   本地存储\"></a>20   本地存储</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie  （一般情况下  cookie都是从后台发送的）</span><br><span class=\"line\">web存储  (低版本不兼容)   localStorage （长存）  sesstionStorage (会话 关闭浏览器销毁)</span><br><span class=\"line\"></span><br><span class=\"line\">if(localStorage)&#123;</span><br><span class=\"line\">\t使用localStorage</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\tcookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.cookie:</span><br><span class=\"line\">cookie是一个以字符串的形式存储数据的位置,在字符串中以key=value的形式出现,每一个key=value是一条数据,多个数据之间以 ; 分割。每一个 HTTP 请求都会在请求头中携带 cookie 到服务端,每一个 HTTP 响应都会在响应头中携带 cookie 到客户端,也就是,cookie 是不需要我们手动设置，就会自动在 客户端 和 服务端之间游走的数据。</span><br><span class=\"line\">读取cookie：</span><br><span class=\"line\">const cookie = document.cookie</span><br><span class=\"line\">console.log(cookie) // 就能得到当前 cookie 的值</span><br><span class=\"line\">设置cookie：</span><br><span class=\"line\">// 下面这个 cookie 数据会在 2043 年 12 月 18 日 12 点以后过期，过期后会自动消失</span><br><span class=\"line\">document.cookie = &#x27;b=200;expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;&#x27;</span><br><span class=\"line\">删除cookie：</span><br><span class=\"line\">// 因为 cookie 不能直接删除</span><br><span class=\"line\">// 所以我们只能把某一条 cookie 的过期时间设置成当前时间之前</span><br><span class=\"line\">// 那么浏览器就会自动删除 cookie</span><br><span class=\"line\">document.cookie = &#x27;b=200;expires=Thu, 18 Dec 2018 12:00:00 GMT&quot;;&#x27;</span><br><span class=\"line\">2.localStorage 本地存储：</span><br><span class=\"line\">没有过期时间,不会跟随服务器发送,大小5M,不用在服务器下运行。</span><br><span class=\"line\">// 设置</span><br><span class=\"line\">localStorage.setItem(&#x27;item&#x27;, &#x27;abc&#x27;)</span><br><span class=\"line\">// 获取</span><br><span class=\"line\">console.log(localStorage.getItem(&#x27;item&#x27;))</span><br><span class=\"line\">// 删除</span><br><span class=\"line\">localStorage.removeItem(&#x27;item&#x27;)</span><br><span class=\"line\">// 清空</span><br><span class=\"line\">localStorage.clear()</span><br><span class=\"line\">3.sessionStorage 本地存储:</span><br><span class=\"line\">会话结束就没有了,不会跟随服务器发送,大小5M,不用在服务器下运行,写法和localStorage完全一样。</span><br><span class=\"line\">// 设置</span><br><span class=\"line\">sessionStorage.setItem(&#x27;item&#x27;, &#x27;abc&#x27;)</span><br><span class=\"line\">// 获取</span><br><span class=\"line\">console.log(sessionStorage.getItem(&#x27;item&#x27;))</span><br><span class=\"line\">// 删除</span><br><span class=\"line\">sessionStorage.removeItem(&#x27;item&#x27;)</span><br><span class=\"line\">// 清空</span><br><span class=\"line\">sessionStorage.clear()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"21-ajax\"><a href=\"#21-ajax\" class=\"headerlink\" title=\"21  ajax\"></a>21  ajax</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前后端交互技术  核心两个</span><br><span class=\"line\">XMLHttpRequest   ---  $.ajax  axios</span><br><span class=\"line\">fetch  -- fetch</span><br><span class=\"line\"></span><br><span class=\"line\">1 ajax 原理</span><br><span class=\"line\">  1） 获取核心对象  做兼容</span><br><span class=\"line\">  2） 发送请求   xhr.open(&quot;methods&quot;,url,true)</span><br><span class=\"line\">  3)  发送参数   xhr.send(null)</span><br><span class=\"line\">  4)  监听变化触发函数   xhr.onreadystatechange</span><br><span class=\"line\"> </span><br><span class=\"line\">2 axios 二次分装    </span><br><span class=\"line\">\t请求拦截器  修改参数类型 ， 统一传固定参数 。。。</span><br><span class=\"line\">\t相应拦截器  错误几种处理  </span><br><span class=\"line\"></span><br><span class=\"line\">3 $.ajax  当你想用 jsonp的时候  用封装$.ajax </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ajax：</span><br><span class=\"line\">ajax全名async javascript and XML(异步的javascript和XML),客户端给服务端发送消息的工具，以及接受响应的工具。</span><br><span class=\"line\">(1)创建一个 ajax 对象</span><br><span class=\"line\">const xhr = new XMLHttpRequest()</span><br><span class=\"line\">(2)配置链接信息</span><br><span class=\"line\">// xhr.open(&#x27;请求方式&#x27;, &#x27;请求地址&#x27;, 是否异步默认 true 表示异步false 表示同步)</span><br><span class=\"line\">xhr.open(&#x27;get&#x27;, &#x27;./data.php&#x27;)</span><br><span class=\"line\">(3)发送请求</span><br><span class=\"line\">xhr.send()</span><br><span class=\"line\">(4)获得相应数据</span><br><span class=\"line\">// ajax状态码 xhr.readyState,只有当 readyState === 4 的时候，我们才可以正常使用服务端给我们的数据</span><br><span class=\"line\">// 记录http状态码 xhr.status,200 ~ 299 表示本次请求成功了</span><br><span class=\"line\">// readyStateChange事件专门用来监听ajax对象</span><br><span class=\"line\">// responseText用来记录服务端给我们的响应体内容的</span><br><span class=\"line\">xhr.onreadyStateChange = function () &#123;</span><br><span class=\"line\">  if (xhr.readyState === 4 &amp;&amp; /^2\\d&#123;2|$/.test(xhr.status)) &#123;</span><br><span class=\"line\">    console.log(xhr.responseText)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(5)发送参数</span><br><span class=\"line\">// get 请求的参数就直接在 url 后面进行拼接就可以</span><br><span class=\"line\">xhr.open(&#x27;get&#x27;, &#x27;./data.php?a=100&amp;b=200&#x27;)</span><br><span class=\"line\">// post 请求的参数是携带在请求体中的,必须要先设置一下请求头中的 content-type</span><br><span class=\"line\">// application/x-www-form-urlencoded 表示的数据格式就是 key=value&amp;key=value</span><br><span class=\"line\">xhr.setRequestHeader(&#x27;content-type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;)</span><br><span class=\"line\">xhr.send(&#x27;a=100&amp;b=200&#x27;)</span><br><span class=\"line\">2. axios:</span><br><span class=\"line\">(1)设置拦截器</span><br><span class=\"line\">import axios from &quot;axios&quot;;</span><br><span class=\"line\">const fetchData = axios.create(&#123;</span><br><span class=\"line\">    baseURL: &quot;http://localhost:3000&quot;, // 请求地址前缀</span><br><span class=\"line\">    withCredentials: true, // 允许携带cookie</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//添加请求拦截器</span><br><span class=\"line\">fetchData.interceptors.request.use(</span><br><span class=\"line\">    function (config) &#123;</span><br><span class=\"line\">        if (config.method == &quot;get&quot;) &#123;</span><br><span class=\"line\">            config.params = &#123;</span><br><span class=\"line\">                ...config.params,</span><br><span class=\"line\">                token: JSON.parse(localStorage.getItem(&quot;user&quot;)).token,  //携带token</span><br><span class=\"line\">                cookie: JSON.parse(localStorage.getItem(&quot;user&quot;)).cookie,  //携带cookie</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (config.method == &quot;post&quot;) &#123;</span><br><span class=\"line\">            config.data = &#123;</span><br><span class=\"line\">                ...config.data,</span><br><span class=\"line\">                token: JSON.parse(localStorage.getItem(&quot;user&quot;)).token,  //携带token</span><br><span class=\"line\">                cookie: JSON.parse(localStorage.getItem(&quot;user&quot;)).cookie,   //携带cookie</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return config;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function (error) &#123;</span><br><span class=\"line\">        //请求错误时做些事</span><br><span class=\"line\">        return Promise.reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">//添加响应拦截器</span><br><span class=\"line\">fetchData.interceptors.response.use(</span><br><span class=\"line\">    function (response) &#123;</span><br><span class=\"line\">        //对响应数据做些事</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function (error) &#123;</span><br><span class=\"line\">        //响应错误时做些事</span><br><span class=\"line\">        return Promise.reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">export default fetchData;</span><br><span class=\"line\">(2)二次封装</span><br><span class=\"line\">// 导入拦截器</span><br><span class=\"line\">import fetchData from &quot;./fetchData&quot;;</span><br><span class=\"line\">// get请求用params传参</span><br><span class=\"line\">export async function getPlayList(data = &#123;&#125;) &#123;</span><br><span class=\"line\">  return await fetchData.get(&quot;/top/playlist&quot;, &#123;</span><br><span class=\"line\">    params: data,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// post请求用data传参</span><br><span class=\"line\">export async function login(data) &#123;</span><br><span class=\"line\">  return await fetchData.post(&quot;/login/cellphone&quot;, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">3. jsonp:</span><br><span class=\"line\">(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。</span><br><span class=\"line\">(2)使用Jquery封装函数$.ajax</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: &quot;http://127.0.0.1:8081/list&quot;,</span><br><span class=\"line\">    dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">    success: (res) =&gt; &#123;</span><br><span class=\"line\">    \tconsole.log(res)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"22-防抖-和-节流\"><a href=\"#22-防抖-和-节流\" class=\"headerlink\" title=\"22 防抖 和 节流\"></a>22 防抖 和 节流</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 使用场景 </span><br><span class=\"line\">   1 ) 搜索的时候 ， 很容易重复触发请求，怎么避免这个问题</span><br><span class=\"line\">   2 ) 根据移动坐标来触发验证  ， 滑动验证码</span><br><span class=\"line\">   </span><br><span class=\"line\">https://segmentfault.com/a/1190000018428170    看看文章 （）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 防抖：</span><br><span class=\"line\">对于短时间内连续触发的事件（如滚动事件），防抖的含义就是让某个时间期限内，事件处理函数只执行一次。</span><br><span class=\"line\">function debounce(fn,delay)&#123;</span><br><span class=\"line\">    let timer = null //借助闭包</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        if(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(fn,delay) // 简化写法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function showTop  () &#123;</span><br><span class=\"line\">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">　　console.log(&#x27;滚动条位置：&#x27; + scrollTop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = debounce(showTop,1000)</span><br><span class=\"line\">2. 节流：</span><br><span class=\"line\">如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效。</span><br><span class=\"line\">function throttle(fn,delay)&#123;</span><br><span class=\"line\">    let valid = true</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">       if(!valid)&#123;</span><br><span class=\"line\">           //休息时间 暂不接客</span><br><span class=\"line\">           return false </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       // 工作时间，执行函数并且在间隔期内把状态位设为无效</span><br><span class=\"line\">        valid = false</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            fn()</span><br><span class=\"line\">            valid = true;</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function showTop  () &#123;</span><br><span class=\"line\">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">　　console.log(&#x27;滚动条位置：&#x27; + scrollTop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = throttle(showTop,1000) </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"23-事件委托-提高性能\"><a href=\"#23-事件委托-提高性能\" class=\"headerlink\" title=\"23  事件委托   提高性能\"></a>23  事件委托   提高性能</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  利用的是冒泡原理 ，将事件注册给父辈组件，因为冒泡点击本身的时候父组件会触发，可以通过判断事件源，来判断是谁触发的从而实现事件委托</span><br><span class=\"line\">2  减少了事件注册   ， 动态添加的元素依然会享有事件</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件委托：</span><br><span class=\"line\">可以给未来元素添加事件</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;2&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;3&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  \tvar oUl = docuemnt.querySelector(&#x27;ul&#x27;)   </span><br><span class=\"line\">    oUl.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">      e = e || window.event</span><br><span class=\"line\">      var target = e.target || e.srcElement</span><br><span class=\"line\">      if (target.nodeName === &#x27;LI&#x27;) &#123;</span><br><span class=\"line\">        console.log(&#x27;我是 li，我被点击了&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"24-事件流\"><a href=\"#24-事件流\" class=\"headerlink\" title=\"24 事件流\"></a>24 事件流</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡  --  从内向外  -- 事件委托</span><br><span class=\"line\">捕获  --  从外向内  --  改热键 </span><br><span class=\"line\"></span><br><span class=\"line\">div.addEventListener(&quot;click&quot;,function()&#123;&#125;,false) --  removeEventLisener</span><br><span class=\"line\">div.onclick=function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 冒泡：</span><br><span class=\"line\">就是从事件目标的事件处理函数开始，依次向外，直到 window 的事件处理函数触发，也就是从下向上的执行事件处理函数</span><br><span class=\"line\">2. 捕获：</span><br><span class=\"line\">就是从 window 的事件处理函数开始，依次向内，直到事件目标的事件处理函数执行，也就是从上向下的执行事件处理函数</span><br><span class=\"line\">事件触发默认冒泡，从内向外触发。</span><br><span class=\"line\">阻止冒泡的几种方式：</span><br><span class=\"line\">(1) e.stopPropagation() 点击只出现li</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\">    var li = document.querySelector(&#x27;li&#x27;)</span><br><span class=\"line\">    li.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        e.stopPropagation()</span><br><span class=\"line\">        console.log(&#x27;li&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ul.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class=\"line\">        console.log(&#x27;ul&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">(2)e.cancelBubble = true 点击只出现li</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\">    var li = document.querySelector(&#x27;li&#x27;)</span><br><span class=\"line\">    li.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        e.cancelBubble = true</span><br><span class=\"line\">        console.log(&#x27;li&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ul.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class=\"line\">        console.log(&#x27;ul&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">(3)事件监听第三个参数true,事件捕获，默认false,事件冒泡。冒泡先出现li,再出现ul。捕获先出现ul,再出现li。</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\">    var li = document.querySelector(&#x27;li&#x27;)</span><br><span class=\"line\">    li.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        console.log(&#x27;li&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ul.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class=\"line\">        console.log(&#x27;ul&#x27;)</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"25-跨域\"><a href=\"#25-跨域\" class=\"headerlink\" title=\"25  跨域\"></a>25  跨域</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  同源策略    端口号  协议  域名     部署到同原</span><br><span class=\"line\">2  cors 服务器设置响应头    允许访问      nginx</span><br><span class=\"line\">3  使用webpack代理 （开发过程中有用）    打包之后不生效</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">        &quot;/api&quot;: &#123;</span><br><span class=\"line\">        target: &quot;http://192.168.x.xxx:8090&quot;, // 要访问的接口域名</span><br><span class=\"line\">        ws: true, // 是否启用websockets</span><br><span class=\"line\">        changeOrigin: true, //开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">        &quot;^/api&quot;: &quot;&quot;, //这里理解成用&#x27;/api&#x27;代替target里面的地址,比如我要调用&#x27;http://40.00.100.100:3002/user/add&#x27;，直接写&#x27;/api/user/add&#x27;即可</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> 4  jsonp  原理    纯前端技术跨域  （需要后端配合）</span><br><span class=\"line\"> 5  iframe 跨域</span><br><span class=\"line\"> 6  websocket  可以做跨域</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://juejin.im/post/6844904126246027278?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=665117609675198464#heading-28</span><br><span class=\"line\">1 同源策略：请求协议/域名/端口号全部相同。</span><br><span class=\"line\">2 CORS：跨域资源共享(浏览器自带机制)</span><br><span class=\"line\">跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。对于前端来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求,实现CORS通信的关键是服务器。</span><br><span class=\"line\">Node 中的解决方案</span><br><span class=\"line\">直接使用中间件</span><br><span class=\"line\">const cors = require(&quot;koa-cors&quot;);</span><br><span class=\"line\">app.use(cors());</span><br><span class=\"line\">传递cookie前端需设置 withCredentials: true,后端需设置Access-Control-Allow-Credentials为true,Access-Control-Allow-Origin不为*</span><br><span class=\"line\">3 nginx反向代理</span><br><span class=\"line\">(1)安装nginx</span><br><span class=\"line\">(2)配置nginx，把localhost:8080和localhost:8000统一配置在统一服务器local.test(自定义域名)下。</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name local.test;</span><br><span class=\"line\">        location /api &#123;</span><br><span class=\"line\">            proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://localhost:8000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(3)重启nginx</span><br><span class=\"line\">(4)前端请求</span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">\taxios.defaults.withCredentials = true; </span><br><span class=\"line\">\tlogin.onclick = () =&gt; &#123; </span><br><span class=\"line\">\t\taxios.post(&quot;/api/login&quot;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">4 使用webpack代理(开发过程中有用,打包之后不生效)</span><br><span class=\"line\">配置webpack中的devServe</span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    open: true,</span><br><span class=\"line\">    host: &#x27;localhost&#x27;,</span><br><span class=\"line\">    port: 8000,</span><br><span class=\"line\">    https: false,</span><br><span class=\"line\">    hotOnly: false,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">        // 配置跨域</span><br><span class=\"line\">        &#x27;/api&#x27;: &#123;</span><br><span class=\"line\">            target: &#x27;http://localhost:8080/&#x27;,  // 要访问的接口域名</span><br><span class=\"line\">            ws: true,  // 是否启用websockets</span><br><span class=\"line\">            changOrigin: true, //开启代理</span><br><span class=\"line\">       \t\tpathRewrite: &#123;</span><br><span class=\"line\">        \t&#x27;^/api&#x27;: &#x27;&#x27; //这里理解成用&#x27;/api&#x27;代替target里面的地址,比如我要调\t用&#x27;http://localhost:8080/login&#x27;，直接写&#x27;/api/login&#x27;即可</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    before: app =&gt; &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">5 jsonp跨域</span><br><span class=\"line\">(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var script=document.createElement(&#x27;script&#x27;)</span><br><span class=\"line\">    function getData(data)&#123;</span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.src=&#x27;http://localhost:8080?callback=getData&#x27;</span><br><span class=\"line\">    document.body.appendChild(script)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">(2)使用Jquery封装函数$.ajax</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: &quot;http://127.0.0.1:8081/list&quot;,</span><br><span class=\"line\">    dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">    success: (res) =&gt; &#123;</span><br><span class=\"line\">    \tconsole.log(res)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"26-当你输入网址的时候经历了什么？\"><a href=\"#26-当你输入网址的时候经历了什么？\" class=\"headerlink\" title=\"26  当你输入网址的时候经历了什么？\"></a>26  当你输入网址的时候经历了什么？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://segmentfault.com/a/1190000006879700  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.DNS解析:DNS解析的过程就是网址到IP地址的转换,当发送请求时，可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡。</span><br><span class=\"line\">2.TCP连接</span><br><span class=\"line\">TCP/IP 协议</span><br><span class=\"line\">三次握手：</span><br><span class=\"line\">(1)客户端发送一个消息给到服务端</span><br><span class=\"line\">(2)服务端回给客户端一个消息</span><br><span class=\"line\">(3)客户端再回给服务端一个消息</span><br><span class=\"line\">四次挥手：</span><br><span class=\"line\">(1)客户端发送一个我要断开的消息给服务端</span><br><span class=\"line\">(2)服务端接受到以后发送一个消息告诉客户端我已经进入关闭等待状态</span><br><span class=\"line\">(3)服务端再次发送一个消息告诉客户端，这个是我的最后一次消息给你，当我再接受到消息的时候就会关闭</span><br><span class=\"line\">(4)客户端接受到服务端的消息以后，告诉服务器，我已经关闭，这个是给你的最后一个消息</span><br><span class=\"line\">3.发送HTTP请求</span><br><span class=\"line\">每一个请求都会有一个请求报文(请求行，请求头，请求空行，请求体)</span><br><span class=\"line\">完整请求报文</span><br><span class=\"line\">(1)请求行</span><br><span class=\"line\">POST /user HTTP/1.1     </span><br><span class=\"line\"># POST 请求方式</span><br><span class=\"line\"># /user 请求URL（不包含域名）</span><br><span class=\"line\"># HTTP/1.1 请求协议版本    </span><br><span class=\"line\">(2)请求头</span><br><span class=\"line\">user-agent: Mozilla/5.0 # 产生请求的浏览器信息</span><br><span class=\"line\">accept: application/json # 表示客户端希望接受的数据类型</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded # 客户端发送的实体数据格式</span><br><span class=\"line\">Host: 127.0.0.1 # 请求的主机名（IP） </span><br><span class=\"line\">(3)请求空行</span><br><span class=\"line\">#（此处必须有一空行</span><br><span class=\"line\">(3)请求体</span><br><span class=\"line\">name=world </span><br><span class=\"line\">4.服务器处理请求并返回HTTP报文</span><br><span class=\"line\">响应报文(状态行，响应头，响应体)</span><br><span class=\"line\">(1)状态行</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\"># HTTP/1.1 服务器使用的 HTTP 协议版本</span><br><span class=\"line\"># 200 响应状态码</span><br><span class=\"line\"># OK 对响应状态码的简单解释</span><br><span class=\"line\">(2)响应头</span><br><span class=\"line\">Date: Jan, 14 Aug 2019 12:42:30 GMT # 服务器时间</span><br><span class=\"line\">Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45 # 服务器类型</span><br><span class=\"line\">Content-Type: text/html # 服务端给客户端的数据类型</span><br><span class=\"line\">Content-Length: 11 # 服务端给客户端的数据长度</span><br><span class=\"line\">(3)响应体</span><br><span class=\"line\">hello world</span><br><span class=\"line\"># 服务端给客户端的响应数据</span><br><span class=\"line\">5.浏览器解析渲染页面</span><br><span class=\"line\">   浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为reflow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。</span><br><span class=\"line\">6.连接结束</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"27-GET-POST-区别\"><a href=\"#27-GET-POST-区别\" class=\"headerlink\" title=\"27  GET POST 区别\"></a>27  GET POST 区别</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  post  上传   都可以用post</span><br><span class=\"line\">2  get   明文请求     jsonp必须用get    请求内容在地址栏显示  不安全   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、传送方式：get通过地址栏传输，post通过报文传输。</span><br><span class=\"line\">2、传送长度：get参数有长度限制（受限于url长度），而post无限制</span><br><span class=\"line\">3、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"28-this指向\"><a href=\"#28-this指向\" class=\"headerlink\" title=\"28 this指向\"></a>28 this指向</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通函数的this   谁调用指向谁     把谁找到   就看.前面的对象   全局window可以省略的</span><br><span class=\"line\">箭头函数的this会指向上层环境  不会改变</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系</span><br><span class=\"line\">1.全局定义的函数直接调用，this =&gt; window</span><br><span class=\"line\">2.对象内部的方法调用，this =&gt; 调用者</span><br><span class=\"line\">3.定时器的处理函数，this =&gt; window</span><br><span class=\"line\">4.事件处理函数，this =&gt; 事件源</span><br><span class=\"line\">5.自调用函数，this =&gt; window</span><br><span class=\"line\">6.call 和 apply 和 bind强行改变this指向</span><br><span class=\"line\">函数名.call(要改变的 this 指向，要给函数传递的参数1，要给函数传递的参数2， ...)</span><br><span class=\"line\">函数名.apply(要改变的 this 指向，[要给函数传递的参数1， 要给函数传递的参数2， ...])</span><br><span class=\"line\">bind方法不会立即执行函数，而是返回一个已经改变了 this 指向的函数</span><br><span class=\"line\">var newFn = 函数名.bind(要改变的 this 指向);</span><br><span class=\"line\">newFn(传递参数)</span><br><span class=\"line\">7.在框架组件中this指向当前组件的实例化对象</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"29-webpack-基础\"><a href=\"#29-webpack-基础\" class=\"headerlink\" title=\"29  webpack  基础\"></a>29  webpack  基础</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry :入口      多页应用 多入口多出口</span><br><span class=\"line\">output: 出口</span><br><span class=\"line\">module:&#123;   loader</span><br><span class=\"line\">\trules:[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">plugins:[ ],</span><br><span class=\"line\">devServer:&#123;&#125;  //webpack服务器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&quot;path&quot;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  mode: &quot;development&quot;,</span><br><span class=\"line\">  entry: &quot;./src/main.js&quot;,     //入口文件</span><br><span class=\"line\">  output: &#123;                    //口文件</span><br><span class=\"line\">    filename: &quot;main.js&quot;,</span><br><span class=\"line\">    path: path.join(__dirname, &quot;../dist&quot;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.scss$/,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &quot;style-loader&quot;, // 将 JS 字符串生成为 style 节点</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &quot;css-loader&quot;, // 将 CSS 转化成 CommonJS 模块</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &quot;sass-loader&quot;, // 将 Sass 编译成 CSS</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &quot;./index.html&quot;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    // contentBase: path.join(__dirname, &quot;../dist&quot;),</span><br><span class=\"line\">    port: 3000,   //端口号</span><br><span class=\"line\">    open: true,  //是否自动打开浏览器</span><br><span class=\"line\">    hot: true,  // 热更新</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#x27;/api&#x27;: &#123;// &#x27;/api&#x27;:匹配项</span><br><span class=\"line\">        target: &#x27;http://www.baidu.com&#x27;,// 接口的域名</span><br><span class=\"line\">        // secure: false,// 如果是https接口，需要配置这个参数</span><br><span class=\"line\">        changeOrigin: true,// 如果接口跨域，需要进行这个参数配置</span><br><span class=\"line\">        // pathRewrite: &#123;// 如果接口本身没有/api需要通过pathRewrite来重写了地址</span><br><span class=\"line\">        //   &#x27;^api&#x27;: &#x27;&#x27;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"30-call-apply-bind\"><a href=\"#30-call-apply-bind\" class=\"headerlink\" title=\"30  call apply  bind\"></a>30  call apply  bind</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">统一的作用都是  修改this指向</span><br><span class=\"line\">call(对象,参数1，参数2，参数3) 直接调用</span><br><span class=\"line\">apply(对象，[])  直接调用</span><br><span class=\"line\">bind(对象，参数1，参数) 必须还需要加（）调用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><h4 id=\"31-promise\"><a href=\"#31-promise\" class=\"headerlink\" title=\"31 promise\"></a>31 promise</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 解决异步回调问题  </span><br><span class=\"line\">2  因为  我们开发程序 有可能是有关联的 </span><br><span class=\"line\">\t例如   可以程序 有三步组成   第一步的结果会影响到第二步 ， 第二步结果会影响第三步  \t</span><br><span class=\"line\">3 Promise.then().then().then().catch()</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">\tresove(&#x27;ok&#x27;) // 传递给.then</span><br><span class=\"line\">\treject(err)  // 传递catch</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">async  --- await</span><br><span class=\"line\"></span><br><span class=\"line\">async function () &#123; &#125;  返回promise对象</span><br><span class=\"line\">await 将异步转成同步</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all()</span><br><span class=\"line\">Promise.race()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.promise语法</span><br><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  // resolve 表示成功的回调</span><br><span class=\"line\">  // reject 表示失败的回调</span><br><span class=\"line\">&#125;).then(function (res) &#123;</span><br><span class=\"line\">  // 成功的函数</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // 失败的函数</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">2.async/await语法</span><br><span class=\"line\">async function fn() &#123;</span><br><span class=\"line\">  const res = await promise对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"32-let-const-var-区别\"><a href=\"#32-let-const-var-区别\" class=\"headerlink\" title=\"32  let const var  区别\"></a>32  let const var  区别</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let,const 会产生块及作用域 ，声明的变量就是私有的</span><br><span class=\"line\">var  变量提升（预解析）  let const 没有</span><br><span class=\"line\">let  可以修改 但是不可重复声明  </span><br><span class=\"line\">const  不可以修改    我们一般定义 常量  配置属性</span><br><span class=\"line\"></span><br><span class=\"line\">使用的一般我们会根据 作用域来选    -----   解决了 变量徐然全局的问题  ----- 有点类似闭包的特性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"33-箭头函数\"><a href=\"#33-箭头函数\" class=\"headerlink\" title=\"33 箭头函数\"></a>33 箭头函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 使用情况  在vue和react或者其他框架里面，我们一般情况下  this都应该指向当前组件 ， 如果用普通函数会导致this指向不明确，所以用箭头函数比较合适</span><br><span class=\"line\">2 箭头函数的this始终指向它的外部环境，不会发生改变</span><br><span class=\"line\">3 let  foo = () =&gt; &#123;&#125;      后面有没有大括号是两种  如果有大括号就是普通函数   如果不加大括号  自动加return</span><br><span class=\"line\">4 不能能做构造函数    因为this指向固话</span><br><span class=\"line\">5 箭头函数没有 arguments对象 （获取实参的集合）， 我们可以通过 ...拓展运算符来模拟实参集合</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">箭头函数只能简写函数表达式，不能简写声明式函数</span><br><span class=\"line\">语法： (函数的行参) =&gt; &#123; 函数体内要执行的代码 &#125;</span><br><span class=\"line\">箭头函数内部没有 this，箭头函数的 this 是上下文的 this</span><br><span class=\"line\">箭头函数内部没有 arguments 这个参数集合</span><br><span class=\"line\">函数的行参只有一个的时候可以不写 ()其余情况必须写</span><br><span class=\"line\">函数体只有一行代码的时候，可以不写 &#123;&#125;，并且会自动 return</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"34-解构赋值\"><a href=\"#34-解构赋值\" class=\"headerlink\" title=\"34  解构赋值\"></a>34  解构赋值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10  b=11   </span><br><span class=\"line\">[b,a]= [a,b]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解构对象</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;Jack&#x27;,</span><br><span class=\"line\">  age: 18,</span><br><span class=\"line\">  gender: &#x27;男&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; name, age, gender &#125; = obj</span><br><span class=\"line\">解构数组</span><br><span class=\"line\">const arr = [&#x27;Jack&#x27;, &#x27;Rose&#x27;, &#x27;Tom&#x27;]</span><br><span class=\"line\">let [a, b, c] = arr</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"35-模板字符串\"><a href=\"#35-模板字符串\" class=\"headerlink\" title=\"35 模板字符串\"></a>35 模板字符串</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">` $&#123;&#125; `</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num = 100</span><br><span class=\"line\">let str = `hello$&#123;num&#125;world$&#123;num&#125;`</span><br><span class=\"line\">console.log(str) // hello100world100</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"36-新增方法\"><a href=\"#36-新增方法\" class=\"headerlink\" title=\"36  新增方法\"></a>36  新增方法</h4><h4 id=\"37-class-类\"><a href=\"#37-class-类\" class=\"headerlink\" title=\"37  class  类\"></a>37  class  类</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;&#125;</span><br><span class=\"line\">class Man extends Preson&#123;</span><br><span class=\"line\">\tconstructor()&#123;</span><br><span class=\"line\">\t\tsuper()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 下面表示创造一个 Student 类，继承自 Person 类</span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        // 必须在 constructor 里面执行一下 super() 完成继承 </span><br><span class=\"line\">        super()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"38-Set-Map-去重\"><a href=\"#38-Set-Map-去重\" class=\"headerlink\" title=\"38 Set ,Map   去重\"></a>38 Set ,Map   去重</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [...new Set(arr)]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/leftJS/p/11080962.html</span><br><span class=\"line\">1.set类似于数组，但是成员的值都是唯一的，没有重复的值。</span><br><span class=\"line\">(1)实例对象方法</span><br><span class=\"line\">add(value)：添加某个值，返回 Set 结构本身(可以链式调用)。</span><br><span class=\"line\">delete(value)：删除某个值，删除成功返回true，否则返回false。</span><br><span class=\"line\">has(value)：返回一个布尔值，表示该值是否为Set的成员。</span><br><span class=\"line\">clear()：清除所有成员，没有返回值。</span><br><span class=\"line\">const mySet = new Set([&#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, 1, 2, 1])</span><br><span class=\"line\">console.log(mySet)  // &#123;&#x27;a&#x27;, &#x27;b&#x27;, 1, 2&#125;   </span><br><span class=\"line\">myset.add(&#x27;c&#x27;).add(&#123;&#x27;a&#x27;: 1&#125;)</span><br><span class=\"line\">console.log(mySet) // &#123;&#x27;a&#x27;, &#x27;b&#x27;, 1, 2, &#x27;c&#x27;, &#123;a: 1&#125;&#125; </span><br><span class=\"line\">console.log(mySet.size)     // 6</span><br><span class=\"line\">mySet.has(2)     // true</span><br><span class=\"line\">(2)遍历方法</span><br><span class=\"line\">keys()：返回键名的遍历器。</span><br><span class=\"line\">values()：返回键值的遍历器。</span><br><span class=\"line\">entries()：返回键值对的遍历器。</span><br><span class=\"line\">forEach()：使用回调函数遍历每个成员。</span><br><span class=\"line\">(3)数组去重</span><br><span class=\"line\">function unique(arr)&#123;</span><br><span class=\"line\">    return [...(new Set(arr))];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">2.map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</span><br><span class=\"line\">(1)map对象的方法</span><br><span class=\"line\">set(key, val): 向Map中添加新元素</span><br><span class=\"line\">get(key): 通过键值查找特定的数值并返回</span><br><span class=\"line\">has(key): 判断Map对象中是否有Key所对应的值，有返回true,否则返回false</span><br><span class=\"line\">delete(key): 通过键值从Map中移除对应的数据</span><br><span class=\"line\">clear(): 将这个Map中的所有元素删除</span><br><span class=\"line\">const m1 = new Map([[&#x27;a&#x27;, 111], [&#x27;b&#x27;, 222]])</span><br><span class=\"line\">console.log(m1) // &#123;&quot;a&quot; =&gt; 111, &quot;b&quot; =&gt; 222&#125;</span><br><span class=\"line\">m1.get(&#x27;a&#x27;)  // 111</span><br><span class=\"line\">const m2 = new Map([[&#x27;c&#x27;, 3]])</span><br><span class=\"line\">const m3 = new Map(m2)</span><br><span class=\"line\">m3.get(&#x27;c&#x27;) // 3</span><br><span class=\"line\">m3.has(&#x27;c&#x27;) // true</span><br><span class=\"line\">m3.set(&#x27;d&#x27;, 555)</span><br><span class=\"line\">m3.get(&#x27;d&#x27;) // 555</span><br><span class=\"line\">(2)遍历方法</span><br><span class=\"line\">keys()：返回键名的遍历器</span><br><span class=\"line\">values()：返回键值的遍历器</span><br><span class=\"line\">entries()：返回键值对的遍历器</span><br><span class=\"line\">forEach()：使用回调函数遍历每个成员</span><br><span class=\"line\">(3)数组去重</span><br><span class=\"line\">function unique(arr) &#123;</span><br><span class=\"line\">    //定义常量 res,值为一个Map对象实例</span><br><span class=\"line\">    const res = new Map();</span><br><span class=\"line\">    //返回arr数组过滤后的结果，结果为一个数组</span><br><span class=\"line\">    //过滤条件是，如果res中没有某个键，就设置这个键的值为1</span><br><span class=\"line\">    return arr.filter((a) =&gt; !res.has(a) &amp;&amp; res.set(a, 1))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"39-…-拓展运算符-浅拷贝\"><a href=\"#39-…-拓展运算符-浅拷贝\" class=\"headerlink\" title=\"39   … 拓展运算符   浅拷贝\"></a>39   … 拓展运算符   浅拷贝</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3,4,5]</span><br><span class=\"line\">let arr1 = [...arr] 浅拷贝</span><br><span class=\"line\">let obj = &#123;name:&quot;zzz&quot;&#125;</span><br><span class=\"line\">let obb1 = &#123;...obj&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"40-symbol-唯一-用做key值\"><a href=\"#40-symbol-唯一-用做key值\" class=\"headerlink\" title=\"40  symbol  唯一   用做key值\"></a>40  symbol  唯一   用做key值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Symbol 本质上是一种唯一标识符，可用作对象的唯一属性名，这样其他人就不会改写或覆盖你设置的属性值。</span><br><span class=\"line\">2.声明方法：let id = Symbol(&quot;id&quot;);</span><br><span class=\"line\">3.Symbol 数据类型的特点是唯一性，即使是用同一个变量生成的值也不相等。</span><br><span class=\"line\">let id1 = Symbol(&#x27;id&#x27;);</span><br><span class=\"line\">let id2 = Symbol(&#x27;id&#x27;);</span><br><span class=\"line\">console.log(id1 == id2);  //false</span><br><span class=\"line\">4.Symbol 数据类型的另一特点是隐藏性，for···in，object.keys() 不能访问</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Jquery\"><a href=\"#Jquery\" class=\"headerlink\" title=\"Jquery\"></a>Jquery</h3><p> 1  选择器   </p>\n<p>  2 简单动画    animate   hide show    slideUp slideDown   </p>\n<p> 3  attr   removeAttr</p>\n<p> 4  ajax</p>\n<h3 id=\"Vue与Jquery区别\"><a href=\"#Vue与Jquery区别\" class=\"headerlink\" title=\"Vue与Jquery区别\"></a>Vue与Jquery区别</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jquery开发 针对 每次修改dom  所有的思想是对于dom的修改, 好性能  </span><br><span class=\"line\">Vue  MVVM  ,虚拟dom , 组件化开发会大大提高开发效率，维护效率，提高组减的复用， 自带很多指令，可以直接遍历dom，所达到修改数据后，视图会自动更新，</span><br><span class=\"line\">vue  可以做单页应用，这样可以大量的减少http请求</span><br><span class=\"line\">vue  可以有想成缓存组件，更全面的 ui框架提供</span><br><span class=\"line\">vue  官方提供脚手架，当我开发的时候可以组件化，打包之后更是压缩文件，省去了我们原生开发还需要手动压缩</span><br><span class=\"line\">vue  逻辑实现比较简单，只要对数据增删改查就可以实现页面的增删改查</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"41-BFC-块级格式化上下文\"><a href=\"#41-BFC-块级格式化上下文\" class=\"headerlink\" title=\"41 BFC(块级格式化上下文)\"></a>41 BFC(块级格式化上下文)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BFC(块级格式化上下文):它是一个独立的渲染区域，只有块级元素参与， 它规定了BFC内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</span><br><span class=\"line\">BFC的布局规则（规定、标准）：</span><br><span class=\"line\">    一、BFC内部的Box会在垂直方向，一个接一个地放置。</span><br><span class=\"line\">    二、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠（按照最大margin值设置）</span><br><span class=\"line\">    三、每个元素的margin box的左边， 与包含块border box的左边相接触</span><br><span class=\"line\">    四、BFC的区域不会与float box重叠。</span><br><span class=\"line\">    五、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</span><br><span class=\"line\">    六、计算BFC的高度时，浮动元素也参与计算</span><br><span class=\"line\">BFC的触发条件：</span><br><span class=\"line\">    根元素(html)</span><br><span class=\"line\">    float属性不为none</span><br><span class=\"line\">    position为absolute或fixed</span><br><span class=\"line\">    display为inline-block, table-cell, table-caption, flex, inline-flex</span><br><span class=\"line\">    overflow不为visible</span><br><span class=\"line\">应用：</span><br><span class=\"line\">    清除浮动</span><br><span class=\"line\">    三栏布局</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"42-MVC-MVP-MVVM\"><a href=\"#42-MVC-MVP-MVVM\" class=\"headerlink\" title=\"42 MVC,MVP,MVVM\"></a>42 MVC,MVP,MVVM</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.MVC:</span><br><span class=\"line\">M:Model</span><br><span class=\"line\">V:View</span><br><span class=\"line\">C:ControllerPresenter</span><br><span class=\"line\">调用关系：用户的对View操作以后，View捕获到这个操作，会把处理的权利交移给Controller；Controller会对来自View数据进行预处理、决定调用哪个Model的接口；然后由Model执行相关的业务逻辑；当Model变更了以后，会通过观察者模式通知View；View通过观察者模式收到Model变更的消息以后，会向Model请求最新的数据，然后重新更新界面。</span><br><span class=\"line\">2.MVP</span><br><span class=\"line\">M:Model</span><br><span class=\"line\">V:View</span><br><span class=\"line\">P:Presenter</span><br><span class=\"line\">调用关系：和MVC模式一样，用户对View的操作都会从View交移给Presenter。Presenter会执行相应的应用程序逻辑，并且对Model进行相应的操作；而这时候Model执行完业务逻辑以后，也是通过观察者模式把自己变更的消息传递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，通过View提供的接口更新界面。</span><br><span class=\"line\">3.MVVM</span><br><span class=\"line\">M:Model</span><br><span class=\"line\">V:View</span><br><span class=\"line\">VM:Model of View</span><br><span class=\"line\">调用关系：MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"43-检测数据类型\"><a href=\"#43-检测数据类型\" class=\"headerlink\" title=\"43 检测数据类型\"></a>43 检测数据类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.typeof</span><br><span class=\"line\">对于基本类型，除 null 以外，均可以返回正确的结果。</span><br><span class=\"line\">对于引用类型，除 function 以外，一律返回 object 类型。</span><br><span class=\"line\">对于 null ，返回 object 类型。</span><br><span class=\"line\">对于 function 返回  function 类型。</span><br><span class=\"line\">2.instanceof</span><br><span class=\"line\">instanceof 检测的是原型,instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</span><br><span class=\"line\">function F()&#123;&#125;</span><br><span class=\"line\">var f=new F()</span><br><span class=\"line\">console.log(f instanceof F) //true</span><br><span class=\"line\">[] instanceof Array; // true</span><br><span class=\"line\">[] instanceof Object; // true</span><br><span class=\"line\">3.constructor</span><br><span class=\"line\">console.log(&#x27;&#x27;.constructor)   //ƒ String() &#123; [native code] &#125;</span><br><span class=\"line\">4.toString</span><br><span class=\"line\">console.log(Object.prototype.toString.call(&#x27;&#x27;))   //[object String]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"44-git\"><a href=\"#44-git\" class=\"headerlink\" title=\"44 git\"></a>44 git</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.GIT 初始化</span><br><span class=\"line\"># git 初始化的指令</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">2.GIT 暂存区</span><br><span class=\"line\"># 把文件夹下的 index.txt 文本放在暂存区</span><br><span class=\"line\">$ git add index.txt</span><br><span class=\"line\"># 把文件夹下所有的内容都放在暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">3.GIT 历史区</span><br><span class=\"line\"># 把暂存区的内容放到历史区</span><br><span class=\"line\">$ git commit -m &quot;我是第一个版本&quot;</span><br><span class=\"line\"># 查看当前历史区版本信息</span><br><span class=\"line\">$ git log</span><br><span class=\"line\">4.GIT 分支</span><br><span class=\"line\"># 开辟一个 login 分支</span><br><span class=\"line\">$ git branch login</span><br><span class=\"line\"># 查看当前分支情况</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"># 切换到 login 分支</span><br><span class=\"line\">$ git checkout login</span><br><span class=\"line\"># 把 login 的内容合并到自己的分支(需要切换到其他主分支master)</span><br><span class=\"line\">$ git merge login</span><br><span class=\"line\"># 删除 login 分支(需要切换到其他分支)</span><br><span class=\"line\">$ git branch -d login</span><br><span class=\"line\">5.GIT 克隆</span><br><span class=\"line\"># 直接克隆仓库</span><br><span class=\"line\">$ git clone https://github.com/jquery/jquery.git</span><br><span class=\"line\">6.GIT 下拉</span><br><span class=\"line\"># 拉取远程最新代码</span><br><span class=\"line\">$ git pull</span><br><span class=\"line\">7.上传</span><br><span class=\"line\"># 上传内容</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\"># 表示把内容上传到 origin 这个地址</span><br><span class=\"line\"># master 是上传到远程的 master 分支</span><br><span class=\"line\"># 第二次上传</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"45-sass和less\"><a href=\"#45-sass和less\" class=\"headerlink\" title=\"45 sass和less\"></a>45 sass和less</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义变量的符号不同，less 是用@，sass 使用\\$</span><br><span class=\"line\">变量的作用域不同，less 在全局定义，就作用在全局，在代码块中定义，就作用于整个代码块。而 sass 只作用域全局。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"46-nodejs\"><a href=\"#46-nodejs\" class=\"headerlink\" title=\"46 nodejs\"></a>46 nodejs</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.核心模块</span><br><span class=\"line\">(1)http模块（搭建服务器）</span><br><span class=\"line\">const http = require(&quot;http&quot;);</span><br><span class=\"line\">// request  请求对象  --- 获取请求对象的资源</span><br><span class=\"line\">// responese 相应对象  --- 我需要给前端返回什么</span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(function (req, res) &#123;</span><br><span class=\"line\">      console.log(req.url, &quot;res&quot;);</span><br><span class=\"line\">      console.log(req.headers,&quot;header&quot;)</span><br><span class=\"line\">      res.end(&quot;ok&quot;);  // 必须要有结尾的</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(8089, function () &#123;</span><br><span class=\"line\">    console.log(&quot;启动成功&quot; + 8089);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">(2)url模块</span><br><span class=\"line\">cosnt url = require(&quot;url&quot;)</span><br><span class=\"line\">url.parse(地址,true/false)  // 地址栏转成对象    true表示将query字符串转对象</span><br><span class=\"line\">url.toString()        // 讲对象转成字符串</span><br><span class=\"line\">(3)path模块</span><br><span class=\"line\">path.resolve(&#x27;资源路径&#x27;,&#x27;资源路径&#x27;)   会拼接绝对路径  会自带 当前跟目录</span><br><span class=\"line\">path.join() 路径合并  不会携带根目录</span><br><span class=\"line\">__dirname  获取当前根目录的绝对路径</span><br><span class=\"line\">(4)fs模块</span><br><span class=\"line\">fs 分同步异步</span><br><span class=\"line\">异步  一般都有回调函数   结果为回调函数的参数</span><br><span class=\"line\">同步  返回值为回调函数的解构</span><br><span class=\"line\">fs.writeFile()</span><br><span class=\"line\">fs.WirteFileSync()</span><br><span class=\"line\">fs.readFile()</span><br><span class=\"line\">fs.readFileSync()</span><br><span class=\"line\">2.commonjs规范</span><br><span class=\"line\">暴露模块     module.exports    export default     export</span><br><span class=\"line\">加载模块\t require           import from       import &#123;&#125; from</span><br><span class=\"line\">3.使用express</span><br><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">const app = express();</span><br><span class=\"line\">// app.use()</span><br><span class=\"line\">// 所有的请求都会经过这个回调函数</span><br><span class=\"line\">app.use(function (req, res, next) &#123;</span><br><span class=\"line\">  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// post请求参数</span><br><span class=\"line\">// 作用向req.body 添加post请求参数</span><br><span class=\"line\">app.use(express.urlencoded());   // application/x-www-form-urlencoded</span><br><span class=\"line\">app.use(express.json());         //application/json</span><br><span class=\"line\">// 路由</span><br><span class=\"line\">app.get(function(req,res)&#123;</span><br><span class=\"line\">\t请求参数  req.query</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(8080, function () &#123;</span><br><span class=\"line\">  console.log(&quot;启动8080&quot;);</span><br><span class=\"line\">&#125;);\t</span><br><span class=\"line\">4.上传文件</span><br><span class=\"line\">const multer = require(&quot;multer&quot;);</span><br><span class=\"line\">let destUrl = path.join(__dirname, &quot;../&quot;, &quot;public/imgs&quot;);</span><br><span class=\"line\">const upl = multer(&#123;</span><br><span class=\"line\">  dest: destUrl, //生成图片的路径</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.post(&quot;/&quot;, upl.any(&quot;file&quot;), function (req, res) &#123;</span><br><span class=\"line\">  console.log(req.files, &quot;file&quot;);</span><br><span class=\"line\">  res.send(&#123;</span><br><span class=\"line\">    code: 200,</span><br><span class=\"line\">    msg: &quot;上传成功&quot;,</span><br><span class=\"line\">    imgs: imgs,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">5. mongoose</span><br><span class=\"line\">// 连接数据库</span><br><span class=\"line\">const mongoose = require(&quot;mongoose&quot;);</span><br><span class=\"line\">const url = &quot;mongodb://127.0.0.1/topic&quot;; // 数据库名默认端口号 27017</span><br><span class=\"line\">mongoose.connect(url);</span><br><span class=\"line\">mongoose.connection.once(&quot;open&quot;, () =&gt; &#123;</span><br><span class=\"line\">  console.log(url + &quot;数据库链接成功&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = mongoose;</span><br><span class=\"line\">// 导出数据模型</span><br><span class=\"line\">const mongoose = require(&quot;./mongoose&quot;);</span><br><span class=\"line\">const &#123; Schema &#125; = mongoose;</span><br><span class=\"line\">let personSchema = new Schema(&#123;</span><br><span class=\"line\">  username: String,</span><br><span class=\"line\">  pass: String,</span><br><span class=\"line\">  create_at: String,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">let UsersModel = mongoose.model(&quot;user&quot;, personSchema, &quot;users&quot;); // &quot;users&quot;数据表名</span><br><span class=\"line\">module.exports = UsersModel;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"47-react-hooks\"><a href=\"#47-react-hooks\" class=\"headerlink\" title=\"47 react-hooks\"></a>47 react-hooks</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用hooks</span><br><span class=\"line\">1.useState()</span><br><span class=\"line\">当给 setCount 传入一个与 count 相同的原始值时，组件不会重新渲染。当传递一个对象时，无论是否一样都会渲染</span><br><span class=\"line\">useState()方法可以传递值也可以传递函数，可延迟初始化，此函数在多次渲染时只运行一次。</span><br><span class=\"line\">2.useEffect</span><br><span class=\"line\">函数组件中执行副作用操作。副作用: 数据获取，数据订阅，以及手动更改 React 组件中的 DOM 都属于副作用。</span><br><span class=\"line\">3.useMemo</span><br><span class=\"line\">使用 useMemo 方法可以避免无用方法的调用,</span><br><span class=\"line\">4.useCallback</span><br><span class=\"line\">useCallback 解决的是传入子组件参数过度变化导致子组件过度渲染的问题</span><br><span class=\"line\">5.useContext</span><br><span class=\"line\">用来向所有后代组件传递 props</span><br><span class=\"line\">6.useRef</span><br><span class=\"line\">获取组件实例对象或者是DOM对象</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"48-缓存\"><a href=\"#48-缓存\" class=\"headerlink\" title=\"48 缓存\"></a>48 缓存</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">强制缓存优先于协商缓存进行</span><br><span class=\"line\">1.强制缓存</span><br><span class=\"line\">Cache-Control优先于Expires</span><br><span class=\"line\">2.协商缓存</span><br><span class=\"line\">协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存。</span><br><span class=\"line\">Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)</span><br><span class=\"line\">If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200</span><br><span class=\"line\">Etag / If-None-Match 优先级高于 Last-Modified / If-Modified-Since</span><br><span class=\"line\">3.存储位置</span><br><span class=\"line\">内存缓存优先硬盘缓存</span><br><span class=\"line\">在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取；而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"49-数组扁平化\"><a href=\"#49-数组扁平化\" class=\"headerlink\" title=\"49 数组扁平化\"></a>49 数组扁平化</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/wind-lanyan/p/9044130.html</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"50-通用柯里化函数\"><a href=\"#50-通用柯里化函数\" class=\"headerlink\" title=\"50 通用柯里化函数\"></a>50 通用柯里化函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//toString方法如果是直接调用那就返回当前函数的字符串，如果等于一个函数那就返回一个函数是直接可以被调用的</span><br><span class=\"line\">//通用的柯力化函数</span><br><span class=\"line\">function curry()&#123;</span><br><span class=\"line\">    //首先收集当前第一次传来的参数</span><br><span class=\"line\">    let _args = Array.prototype.slice.call(arguments)</span><br><span class=\"line\">    //收集二次或多次函数调用参数</span><br><span class=\"line\">    let _collectArgs = function ()&#123;</span><br><span class=\"line\">        _args.push(...arguments)</span><br><span class=\"line\">        return _collectArgs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //难点 _collectArgs.toString()这样直接返回当前的函数的字符串 例如@1 </span><br><span class=\"line\">    //难点  _collectArgs.toString = function()&#123;&#125; 返回这个函数会在自己执行</span><br><span class=\"line\">    //难点toString隐式转换的特性</span><br><span class=\"line\">    //闭包缓存当前参数</span><br><span class=\"line\">    //还可以通过fn.length做性能优化</span><br><span class=\"line\">    _collectArgs.toString = function()&#123;</span><br><span class=\"line\">        return _args.reduce((a,b)=&gt;&#123;</span><br><span class=\"line\">            return a+b</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _collectArgs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当传入不同的任何格式参数都参与计算</span><br><span class=\"line\">//curry(1,2)(2)(3)</span><br><span class=\"line\">console.log(curry(1)(2)(3))</span><br><span class=\"line\">//例如@1</span><br><span class=\"line\">//当前的函数变成字符串修改里面的内容 还有就是返回当前对象类型</span><br><span class=\"line\">function x() &#123; alert(&#x27;asdf&#x27;); &#125;</span><br><span class=\"line\">eval(x.toString().replace(&#x27;asdf&#x27;,&#x27;hello 打工人&#x27;));</span><br><span class=\"line\">x();</span><br><span class=\"line\"></span><br><span class=\"line\">————————————————</span><br><span class=\"line\">版权声明：本文为CSDN博主「wy勇敢的心」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class=\"line\">原文链接：https://blog.csdn.net/wangyun_gogo/article/details/109453414</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"51有效大括号（leetcode-20）\"><a href=\"#51有效大括号（leetcode-20）\" class=\"headerlink\" title=\"51有效大括号（leetcode 20）\"></a>51有效大括号（leetcode 20）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isValid = function(str)&#123;</span><br><span class=\"line\">   var map = &#123;</span><br><span class=\"line\">     &quot;&#123;&quot;:&quot;&#125;&quot;,</span><br><span class=\"line\">     &quot;[&quot;:&quot;]&quot;,</span><br><span class=\"line\">     &quot;(&quot;:&quot;)&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if(str.length % 2 === 1) return false;</span><br><span class=\"line\">   var res = [];</span><br><span class=\"line\">   for(var i = 0;i &lt; str.length;i++)&#123;</span><br><span class=\"line\">     if(map[str[i]])&#123;</span><br><span class=\"line\">       res.push(str[i]);</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">       var a = res[res.length-1];</span><br><span class=\"line\">       if(map[a] == str[i]) &#123;</span><br><span class=\"line\">         res.pop()</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">         return false;</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return res.length===0;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"52检索url参数\"><a href=\"#52检索url参数\" class=\"headerlink\" title=\"52检索url参数\"></a>52检索url参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function query() &#123;</span><br><span class=\"line\">      let url = window.location.search.split(&quot;?&quot;)[1];</span><br><span class=\"line\">      let params = url.split(&quot;&amp;&quot;);</span><br><span class=\"line\">      const param = &#123;&#125;;</span><br><span class=\"line\">      params.forEach((i) =&gt; &#123;</span><br><span class=\"line\">          let item = i.split(&quot;=&quot;);</span><br><span class=\"line\">          param[item[0]] = item[1];</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      console.log(param);</span><br><span class=\"line\">      return param;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"53大数相加\"><a href=\"#53大数相加\" class=\"headerlink\" title=\"53大数相加\"></a>53大数相加</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function bigSum(a, b) &#123;</span><br><span class=\"line\">        // 已 12345 和 678 为例</span><br><span class=\"line\">        // 我们需要先把他们转换为位数相同，不够补零，记住要统一加一位，为了两个最大的位数相加后可能需要进位</span><br><span class=\"line\">        // 12345 =&gt;  012345    678 =&gt; 000678</span><br><span class=\"line\">        // 然后让各自的个位个位相加，十位与十位相加   5 + 8 = 3  （1为进位） 4 + 7 + 1 = 2 （1） .....</span><br><span class=\"line\">        a = &#x27;0&#x27; + a</span><br><span class=\"line\">        b = &#x27;0&#x27; + b</span><br><span class=\"line\">        let aArr = a.split(&#x27;&#x27;)</span><br><span class=\"line\">        let bArr = b.split(&#x27;&#x27;)</span><br><span class=\"line\">        let carry = 0</span><br><span class=\"line\">        let res = []</span><br><span class=\"line\">        let length = Math.max(aArr.length, bArr.length)</span><br><span class=\"line\">        let distance = aArr.length - bArr.length</span><br><span class=\"line\">        if (distance &gt; 0) &#123;</span><br><span class=\"line\">            for (let i = 0; i &lt; distance; i++) &#123;</span><br><span class=\"line\">                bArr.unshift(&#x27;0&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (let i = 0; i &lt; Math.abs(distance); i++) &#123;</span><br><span class=\"line\">                aArr.unshift(&#x27;0&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (let i = length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            let sum = Number(aArr[i]) + Number(bArr[i]) + Number(carry)</span><br><span class=\"line\">            carry = sum &gt;= 10 ? 1 : 0</span><br><span class=\"line\">            sum = sum &gt;= 10 ? parseInt(sum % 10) : sum</span><br><span class=\"line\">            res.unshift(sum)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res.join(&#x27;&#x27;).replace(/^0/, &#x27;&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(bigSum(&#x27;9007199254740993&#x27;, &#x27;1&#x27;))</span><br><span class=\"line\">// 注意： 传参时就需传入字符串，如果是数字类，在传参时就已经出现精度丢失</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.jianshu.com/p/c373943f0e9e</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"54-http协议\"><a href=\"#54-http协议\" class=\"headerlink\" title=\"54 http协议\"></a>54 http协议</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.http/1.0</span><br><span class=\"line\">   限制每次连接只处理一个请求，无状态：协议对于事务处理没有记忆能力。客户端向服务器请求服务时，只需传送请求方法和路径。HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</span><br><span class=\"line\">2.http/1.1</span><br><span class=\"line\">\t增加了持久连接的方法，在一个TCP连接上可以传输多个http请求，只要浏览器或者服务器没有明确断开，该TCP连接会一直保持。浏览器为每个域名最多维护6个TCP持久连接。</span><br><span class=\"line\">3.http/2.0</span><br><span class=\"line\">\t影响http/1.1效率的三个主要因素：TCP的满启动、多条TCP连接竞争带宽和队头堵塞。</span><br><span class=\"line\">\t引入多路复用机制：同一个连接并发处理多个请求。通过在协议栈中添加二进制分帧层来实现。能够实现请求的优先级、服务器推送、头部压缩等特性。</span><br><span class=\"line\">\t头部压缩：使用HPACK算法进行压缩。</span><br><span class=\"line\">\t服务器推送：页面请求资源a.css，接到服务器资源同时会返回a.js，存到缓存中，下次不用重复访问服务器。</span><br><span class=\"line\">4.https</span><br><span class=\"line\">HTTPS 在传输的过程中会涉及到三个密钥：</span><br><span class=\"line\">- 服务器端的公钥和私钥，用来进行非对称加密</span><br><span class=\"line\">- 客户端生成的随机密钥，用来进行对称加密</span><br><span class=\"line\">一个 HTTPS 请求实际上包含了两次 HTTP 传输，可以细分为 8 步。</span><br><span class=\"line\">1. 客户端向服务器发起 HTTPS 请求，连接到服务器的 443 端口</span><br><span class=\"line\">2. 服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。</span><br><span class=\"line\">3. 服务器将自己的公钥发送给客户端。</span><br><span class=\"line\">4. 客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么 HTTPS 传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为 client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS 中的第一次 HTTP 请求结束。</span><br><span class=\"line\">5. 客户端会发起 HTTPS 中的第二个 HTTP 请求，将加密之后的客户端密钥发送给服务器。</span><br><span class=\"line\">6. 服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。</span><br><span class=\"line\">7. 然后服务器将加密后的密文发送给客户端。</span><br><span class=\"line\">8. 客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样 HTTPS 中的第二个 HTTP 请求结束，整个 HTTPS 传输完成。</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML+CSS\"></a>HTML+CSS</h3><h4 id=\"1-双飞翼-，圣杯布局\"><a href=\"#1-双飞翼-，圣杯布局\" class=\"headerlink\" title=\"1  双飞翼 ，圣杯布局\"></a>1  双飞翼 ，圣杯布局</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 弹性盒子</span><br><span class=\"line\">2 百分比 </span><br><span class=\"line\">3 定位</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">圣杯布局</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\">            margin:0;</span><br><span class=\"line\">            padding:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html&#123;</span><br><span class=\"line\">            font-size: 31.25vw;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html,body&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\">            display: flex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        header&#123;</span><br><span class=\"line\">            width:1rem;</span><br><span class=\"line\">            height: 1rem;</span><br><span class=\"line\">            background: red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        main&#123;</span><br><span class=\"line\">            flex: 1;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 2rem;</span><br><span class=\"line\">            background: yellow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        footer&#123;</span><br><span class=\"line\">            width:1rem;</span><br><span class=\"line\">            height: 1rem;</span><br><span class=\"line\">            background: springgreen;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;&lt;/header&gt;</span><br><span class=\"line\">    &lt;main&gt;&lt;/main&gt;</span><br><span class=\"line\">    &lt;footer&gt;&lt;/footer&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BFC双飞翼布局</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\">            margin:0;</span><br><span class=\"line\">            padding:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html,body&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .left&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 60%;</span><br><span class=\"line\">            background: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 60%;</span><br><span class=\"line\">            background: orange;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .center&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            background: green;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面</span><br><span class=\"line\">    先写left和right;后写中间！！！必须这样子！！ --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不用BFC来写双飞翼布局</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\">            margin:0;</span><br><span class=\"line\">            padding:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        html,body&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .left&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 60%;</span><br><span class=\"line\">            background: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right&#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 65%;</span><br><span class=\"line\">            background: orange;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .center&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            background: green;</span><br><span class=\"line\">            padding:0 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .cenCon&#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            background: purple;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 双飞翼布局注意：布局的中间部分，一定在body里面写在最后面</span><br><span class=\"line\">    先写left和right;后写中间！！！必须这样子！！ --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;cenCon&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-块元素垂直居中\"><a href=\"#2-块元素垂直居中\" class=\"headerlink\" title=\"2  块元素垂直居中\"></a>2  块元素垂直居中</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  弹性布局   ---  </span><br><span class=\"line\">2  定位    50% 50%  减自身的一ban</span><br><span class=\"line\">3  转行内块元素   line-height:100px  font-size:元素的高度    text-align：center</span><br><span class=\"line\">4  把定位改成 transform </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  弹性布局</span><br><span class=\"line\">display:flex;</span><br><span class=\"line\">justify-content: center;</span><br><span class=\"line\">align-items: center;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2  定位</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left:50%;</span><br><span class=\"line\">top:50%;</span><br><span class=\"line\">margin:-高度的一半 0 0 -宽度的一半。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3  转行内块元素</span><br><span class=\"line\">text-align：center;</span><br><span class=\"line\">line-height:100px;</span><br><span class=\"line\">height:100px;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4  定位</span><br><span class=\"line\">position:absolute;</span><br><span class=\"line\">left:0;right:0;</span><br><span class=\"line\">top:0;bottom:0;</span><br><span class=\"line\">margin:auto;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-盒模型和怪异盒模型\"><a href=\"#3-盒模型和怪异盒模型\" class=\"headerlink\" title=\"3  盒模型和怪异盒模型\"></a>3  盒模型和怪异盒模型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通盒模型     content + border*2 + paddign*2+margin*2 =  普通盒模型</span><br><span class=\"line\">怪异盒模型     contnet + margin*2   = 怪异盒模型  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.两者区别</span><br><span class=\"line\"></span><br><span class=\"line\">标准盒模型总宽度 = width + 左右padding + 左右border + 左右margin</span><br><span class=\"line\"></span><br><span class=\"line\">标准盒模型总高度 = height + 上下padding + 上下border + 上下margin</span><br><span class=\"line\"></span><br><span class=\"line\">怪异盒模型总宽度 = width + 左右margin (width包含了padding和border)</span><br><span class=\"line\"></span><br><span class=\"line\">怪异盒模型总高度 = height + 上下margin (height包含了padding和border)</span><br><span class=\"line\"></span><br><span class=\"line\">注：当没有添加文档声明时，就会触发某些浏览器的怪异模式，如IE6</span><br><span class=\"line\"></span><br><span class=\"line\">2.如何将标准盒模型转换为怪异盒模型</span><br><span class=\"line\"></span><br><span class=\"line\">给给标准盒子加上这个属性：</span><br><span class=\"line\"></span><br><span class=\"line\">语法：box-sizing:border-box;</span><br><span class=\"line\"></span><br><span class=\"line\">注：box-sizing:content-box;  默认值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-解决浮动塌陷\"><a href=\"#4-解决浮动塌陷\" class=\"headerlink\" title=\"4 解决浮动塌陷\"></a>4 解决浮动塌陷</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 清除浮动</span><br><span class=\"line\">2 overflow:hidden</span><br><span class=\"line\">3 给父元素添加高度</span><br><span class=\"line\">4 给父元素加边框</span><br><span class=\"line\">5 给父元素加padding</span><br><span class=\"line\">6 :after 给添加清除浮动</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1: 给父元素加overflow:hidden;</span><br><span class=\"line\">方法2: 在浮动元素下面加空div,并添加样式</span><br><span class=\"line\">       div&#123;</span><br><span class=\"line\">       \tclear:both;</span><br><span class=\"line\">       \theight:0; </span><br><span class=\"line\">       \toverflow:hidden;</span><br><span class=\"line\">       \t&#125;</span><br><span class=\"line\">方法3: 万能清除浮动法：</span><br><span class=\"line\">    选择符：after&#123;</span><br><span class=\"line\">           \tcontent: &#x27;&#x27;;</span><br><span class=\"line\">           \tclear: both;</span><br><span class=\"line\">           \tdisplay:block;</span><br><span class=\"line\">           \theight:0;</span><br><span class=\"line\">           \tvisibility:hidden;</span><br><span class=\"line\">           \toverflow: hidden;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-em-，rem-px-vw-vh\"><a href=\"#5-em-，rem-px-vw-vh\" class=\"headerlink\" title=\"5 em ，rem , px,  vw,vh\"></a>5 em ，rem , px,  vw,vh</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 em   父元素的倍数</span><br><span class=\"line\">2 rem  根元素的倍数     （适配会根据rem来设定）  动态设置  html的font-size</span><br><span class=\"line\">3 vw,vh   只适用于高版本浏览器  ie9以上   移动都可以用  【100%内核都是 -webkit-】</span><br><span class=\"line\">4 px像素</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 px就是像素，也是我们现在经常使用的基本单位，比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。</span><br><span class=\"line\">2 em参考物是父元素的font-size，默认字体大小是16px，所以1em不是固定值，因为它会继承父元素的字体大小</span><br><span class=\"line\">3 rem参考物是相对于根元素，我们在使用时可以在根元素设置一个参考值即可，相对于em使用，减少很大运算工作量，例：html大小为10px，12rem就是120px。</span><br><span class=\"line\">4 % 是相对于父元素的大小设定的比率。</span><br><span class=\"line\">5 vw是相对视口（viewport）的宽度而定的，长度等于视口宽度的1/100</span><br><span class=\"line\">假如浏览器的宽度为200px，那么1vw就等于2px（200px/100）</span><br><span class=\"line\">6 vh是相对视口（viewport）的高度而定的，长度等于视口高度的1/100</span><br><span class=\"line\">假如浏览器的高度为500px，那么1vh就等于5px（500px/100）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-边框一像素问题\"><a href=\"#6-边框一像素问题\" class=\"headerlink\" title=\"6 边框一像素问题\"></a>6 边框一像素问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tarnsfrom : scale(0.7)  缩放</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决问题:移动端1像素变粗</span><br><span class=\"line\">\t为什么移动端CSS里面写了1px，实际上看起来比1px粗；了解设备物理像素和逻辑像素的同学应该很容易理解，其实这两个px的含义其实是不一样的，UI设计师要求的1px是指设备的物理像素1px，而CSS里记录的像素是逻辑像素，它们之间存在一个比例关系，可以用javascript中的`window.devicePixelRatio`来获取，也可以用媒体查询的`-webkit-min-device-pixel-ratio`来获取。当然，比例多少与设备相关。在手机上border无法达到我们想要的效果。这是因为devicePixelRatio特性导致，iPhone的devicePixelRatio==2，而border-width: 1px描述的是设备独立像素，所以，border被放大到物理像素2px显示，在iPhone上就显得较粗。</span><br><span class=\"line\">解决方案:transform: scale(0.5) 方案，用高度1px的div充当边框</span><br><span class=\"line\">     div &#123;</span><br><span class=\"line\">            height: 1px;</span><br><span class=\"line\">            background: #000;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        /* 2倍屏 */</span><br><span class=\"line\">        @media only screen and (-webkit-min-device-pixel-ratio: 2.0) &#123;</span><br><span class=\"line\">            div &#123;</span><br><span class=\"line\">                -webkit-transform: scaleY(0.5);</span><br><span class=\"line\">                transform: scaleY(0.5);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        /* 3倍屏 */</span><br><span class=\"line\">        @media only screen and (-webkit-min-device-pixel-ratio: 3.0) &#123;</span><br><span class=\"line\">            div &#123;</span><br><span class=\"line\">                -webkit-transform: scaleY(0.33);</span><br><span class=\"line\">                transform: scaleY(0.33);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>作者：果汁凉茶丶<br>链接：<a href=\"https://www.jianshu.com/p/fa670b737a29\">https://www.jianshu.com/p/fa670b737a29</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"7-兼容问题\"><a href=\"#7-兼容问题\" class=\"headerlink\" title=\"7  兼容问题\"></a>7  兼容问题</h4><p>  链接1   <a href=\"https://blog.csdn.net/Jkssns/article/details/103456913\">https://blog.csdn.net/Jkssns/article/details/103456913</a>   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、IOS下input默认样式(圆角、阴影)</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  -webkit-appearance: none;</span><br><span class=\"line\">  border-radius: 0;</span><br><span class=\"line\">  border: 1px #ccc solid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2、在IOS下页面滑动卡顿，Android没问题</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">body &#123;-webkit-overflow-scrolling:touch; overflow-scrolling: touch;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3、input type 改为button</span><br><span class=\"line\">当input type为button，disabled为true，会出现背景色异常(其实就是禁用的样式)</span><br><span class=\"line\">把input的disabled改为readonly</span><br><span class=\"line\">opacity：1</span><br><span class=\"line\"></span><br><span class=\"line\">4、input type=text切换到英文输入法IOS下的问题</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">input添加autocapitalize属性</span><br><span class=\"line\">&lt;input class=&quot;SmallFour&quot; type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">5、禁止数字自动识别为电话号码</span><br><span class=\"line\"></span><br><span class=\"line\">这个比较有用，因为一串数字在iphone的部分浏览器上会显示成蓝色，样式加成别的颜色也是不生效的。不是我亲测，在微信内部浏览器没问题，但是在safari上有问题，IOS系统版本12.1.4</span><br><span class=\"line\">&lt;div style=&quot;color: red&quot;&gt;1212312312321323&lt;/div&gt;</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">6、input type=number之后，pc端出现上下箭头</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">input::-webkit-inner-spin-button &#123;</span><br><span class=\"line\">  -webkit-appearance: none !important;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">7、是图片填充到外层的框内，很好用，直接给图片添加样式。</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">object-fit: cover;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">height:100%;</span><br><span class=\"line\"></span><br><span class=\"line\">8、手机端按住不放 阻止浏览器默认响应事件 调试</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">//clikMenu 你要点击的事件节点</span><br><span class=\"line\">function touchendmovie(clikMenu)&#123;</span><br><span class=\"line\">    var timeOutEvent = 0;</span><br><span class=\"line\">    $(document).on(&#x27;touchstart&#x27;,clikMenu,function(e)&#123;</span><br><span class=\"line\">        timeOutEvent = setTimeout(function()&#123;</span><br><span class=\"line\">        //这里编写你要执行的事件 &#125;,300);</span><br><span class=\"line\">        //这里设置长按响应时间</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(document).on(&#x27;touchmove&#x27;,clikMenu,function(e)&#123;</span><br><span class=\"line\">        clearTimeout(timeOutEvent);</span><br><span class=\"line\">        timeOutEvent = 0;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(document).on(&#x27;touchend&#x27;,clikMenu,function(e)&#123;</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">        if(timeOutEvent != 0 )&#123;</span><br><span class=\"line\">            console.log(&#x27;这里是点击了一下&#x27;); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        clearTimeout(timeOutEvent); </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">9、禁止复制、选中文本</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">.el &#123;</span><br><span class=\"line\">  -webkit-user-select: none;</span><br><span class=\"line\">  -moz-user-select: none;</span><br><span class=\"line\">  -khtml-user-select: none;</span><br><span class=\"line\">   user-select: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">10、input 的placeholder属性会使文本位置偏上</span><br><span class=\"line\">解决方案</span><br><span class=\"line\">line-height: （和input框的高度一样高）---pc端解决方法</span><br><span class=\"line\">line-height：normal ---移动端解决方法</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-css预处理器\"><a href=\"#8-css预处理器\" class=\"headerlink\" title=\"8 css预处理器\"></a>8 css预处理器</h4><p>​    1 sass  less</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-H5-新增新特性\"><a href=\"#9-H5-新增新特性\" class=\"headerlink\" title=\"9 H5 新增新特性\"></a>9 H5 新增新特性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nav , header ,footer ,session </span><br><span class=\"line\">1  拖拽API</span><br><span class=\"line\">2  input 新增类型</span><br><span class=\"line\">3  视频音频</span><br><span class=\"line\">4  canvas</span><br><span class=\"line\">5  获取定位  谷歌浏览器不行（）  </span><br><span class=\"line\">6  web存储   localStorage sessionStorage</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/ainyi/p/9777841.html</span><br><span class=\"line\">H5 新特性</span><br><span class=\"line\">1. 语义化标签：header、footer、section、nav、aside、article</span><br><span class=\"line\">2. 增强型表单：input 的多个 type</span><br><span class=\"line\">3. 新增表单元素：datalist、keygen、output</span><br><span class=\"line\">4. 新增表单属性：placehoder、required、min 和 max</span><br><span class=\"line\">5. 音频视频：audio、video</span><br><span class=\"line\">6. canvas</span><br><span class=\"line\">7. 地理定位</span><br><span class=\"line\">8. 拖拽</span><br><span class=\"line\">9. 本地存储：localStorage - 没有时间限制的数据存储；sessionStorage - 针对一个 session 的数据存储，当用户关闭浏览器窗口后，数据会被删除</span><br><span class=\"line\">10. 新事件：onresize、ondrag、onscroll、onmousewheel、onerror、onplay、onpause</span><br><span class=\"line\">11. WebSocket：单个 TCP 连接上进行全双工通讯的协议</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-适配\"><a href=\"#10-适配\" class=\"headerlink\" title=\"10 适配\"></a>10 适配</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rem来适配 </span><br><span class=\"line\">1  后期字体大小不适配  就用px</span><br><span class=\"line\">2  rem插件    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于rem是根据根元素的font-size大小而定，所以根据浏览器当前的分辨率改变font-size的值，就可以用rem作为统一单位适配移动端</span><br><span class=\"line\">下图是不同宽度浏览器对应的font-size,可以引Rem自适应JS适配移动端。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://vcdn.pharmcube.com/icon-close.png\" alt=\"image-20201013185918101\"></p>\n<h4 id=\"11-响应式布局\"><a href=\"#11-响应式布局\" class=\"headerlink\" title=\"11 响应式布局\"></a>11 响应式布局</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  不同的终端显示不同的布局   media</span><br><span class=\"line\">2  不同分辨率显示布局一样 （视频）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 990px) and (min-width: 768px) &#123;</span><br><span class=\"line\">   css样式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"12-翻译\"><a href=\"#12-翻译\" class=\"headerlink\" title=\"12  翻译\"></a>12  翻译</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  几版语言写几版页面</span><br><span class=\"line\">2  vue-</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"JAVASCRIPT\"><a href=\"#JAVASCRIPT\" class=\"headerlink\" title=\"JAVASCRIPT\"></a>JAVASCRIPT</h3><h4 id=\"13-javascript-数据类型\"><a href=\"#13-javascript-数据类型\" class=\"headerlink\" title=\"13   javascript 数据类型\"></a>13   javascript 数据类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型  String (显示)  Number(运算)  Boolean(判断)  Undefined(声明未赋值) == Null(对象的空) Symbol(做键值)</span><br><span class=\"line\">引用类型  Object Array Function</span><br><span class=\"line\"></span><br><span class=\"line\">区别</span><br><span class=\"line\">基本类型存在  栈中   用完就销毁    之不能长存</span><br><span class=\"line\">引用类型      堆中   不会自动销毁</span><br><span class=\"line\"></span><br><span class=\"line\">引用赋值和浅拷贝和深拷贝</span><br><span class=\"line\"></span><br><span class=\"line\">引用赋值   就是 =   引用同一个地址  所有如果改变某个属性  所有引用都改变</span><br><span class=\"line\">浅拷贝   只拷贝一层   [...arr] &#123;...obj&#125;</span><br><span class=\"line\">深拷贝   遍历对象进行递归 ， JSON.stringify , JSON.parse ,  immutable.js</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/cf1e9d7e94fb</span><br><span class=\"line\">1.数据类型：</span><br><span class=\"line\">基本数据类型：String，Boolean，Number，Undefined，Null；</span><br><span class=\"line\">引用数据类型：Object(Array，Date，RegExp，Function)；</span><br><span class=\"line\">基本数据类型和引用数据类型的区别：</span><br><span class=\"line\">    保存位置不同：基本数据类型保存在栈内存中，引用数据类型保存在堆内存中，然后在栈内存中保存了一个对堆内存中实际对象的引用，即数据在堆内存中的地址，JS对引用数据类型的操作都是操作对象的引用而不是实际的对象，如果obj1拷贝了obj2，那么这两个引用数据类型就指向了同一个堆内存对象，具体操作是obj1将栈内存的引用地址复制了一份给obj2，因而它们共同指向了一个堆内存对象；</span><br><span class=\"line\">为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？</span><br><span class=\"line\">1）堆比栈大，栈比堆速度快；</span><br><span class=\"line\">2）基本数据类型比较稳定，而且相对来说占用的内存小；</span><br><span class=\"line\">3）引用数据类型大小是动态的，而且是无限的，引用值的大小会改变，不能把它放在栈中，否则会降低变量查找的速度，因此放在变量栈空间的值是该对象存储在堆中的地址，地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响；</span><br><span class=\"line\">4）堆内存是无序存储，可以根据引用直接获取；</span><br><span class=\"line\">2.深拷贝，浅拷贝</span><br><span class=\"line\">(1)深拷贝和浅拷贝简单解释：</span><br><span class=\"line\">     浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；</span><br><span class=\"line\">(2)区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；</span><br><span class=\"line\">(3)浅拷贝：</span><br><span class=\"line\">//手动实现</span><br><span class=\"line\">function simpleCopy(obj1) &#123;</span><br><span class=\"line\">   var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;</span><br><span class=\"line\">   for (let i in obj1) &#123;</span><br><span class=\"line\">   obj2[i] = obj1[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   return obj2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">   a: 1,</span><br><span class=\"line\">   b: 2,</span><br><span class=\"line\">   c: &#123;</span><br><span class=\"line\">   d: 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = simpleCopy(obj1);</span><br><span class=\"line\">obj2.a = 3;</span><br><span class=\"line\">obj2.c.d = 4;</span><br><span class=\"line\">alert(obj1.a); // 1</span><br><span class=\"line\">alert(obj2.a); // 3</span><br><span class=\"line\">alert(obj1.c.d); // 4</span><br><span class=\"line\">alert(obj2.c.d); // 4</span><br><span class=\"line\">//使用Object.assign()实现浅拷贝</span><br><span class=\"line\">let obj1 = &#123;</span><br><span class=\"line\">   a: &#123;</span><br><span class=\"line\">     b: 1</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   c: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj2 = Object.assign(&#123;&#125;,obj1)</span><br><span class=\"line\">obj2.a.b = 3;</span><br><span class=\"line\">obj2.c = 3</span><br><span class=\"line\">console.log(obj1.a.b); // 3</span><br><span class=\"line\">console.log(obj2.a.b); // 3</span><br><span class=\"line\">console.log(obj1.c); // 2</span><br><span class=\"line\">console.log(obj2.c); // 3</span><br><span class=\"line\">//展开运算实现浅拷贝</span><br><span class=\"line\">var obj1=&#123;</span><br><span class=\"line\">    a:1,</span><br><span class=\"line\">    b:2,</span><br><span class=\"line\">    c:&#123;</span><br><span class=\"line\">        d:3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2=&#123;...obj1&#125;</span><br><span class=\"line\">obj2.a=11</span><br><span class=\"line\">obj2.c.d=13</span><br><span class=\"line\">console.log(obj1,obj2)</span><br><span class=\"line\">(4)深拷贝</span><br><span class=\"line\">//递归实现深拷贝</span><br><span class=\"line\">function deepCopy(obj1) &#123;</span><br><span class=\"line\">  var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;</span><br><span class=\"line\">  if (obj1 &amp;&amp; typeof obj1 === &quot;object&quot;) &#123;</span><br><span class=\"line\">    for (var i in obj1) &#123;</span><br><span class=\"line\">      if (obj1.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        // 如果子属性为引用数据类型，递归复制</span><br><span class=\"line\">        if (obj1[i] &amp;&amp; typeof obj1[i] === &quot;object&quot;) &#123;</span><br><span class=\"line\">          obj2[i] = deepCopy(obj1[i]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          // 如果是基本数据类型，只是简单的复制</span><br><span class=\"line\">          obj2[i] = obj1[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  c: &#123;</span><br><span class=\"line\">    d: 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = deepCopy(obj1);</span><br><span class=\"line\">obj2.a = 3;</span><br><span class=\"line\">obj2.c.d = 4;</span><br><span class=\"line\">alert(obj1.a); // 1</span><br><span class=\"line\">alert(obj2.a); // 3</span><br><span class=\"line\">alert(obj1.c.d); // 3</span><br><span class=\"line\">alert(obj2.c.d); // 4</span><br><span class=\"line\">//使用JSON.stringify和JSON.parse实现深拷贝</span><br><span class=\"line\"> function deepCopy(obj1)&#123;</span><br><span class=\"line\">    let _obj = JSON.stringify(obj1);</span><br><span class=\"line\">    let obj2 = JSON.parse(_obj);</span><br><span class=\"line\">    return obj2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">var a = [1, [1, 2], 3, 4];</span><br><span class=\"line\">var b = deepCopy(a);</span><br><span class=\"line\">b[1][0] = 2;</span><br><span class=\"line\">alert(a); // 1,1,2,3,4</span><br><span class=\"line\">alert(b); // 2,2,2,3,4</span><br><span class=\"line\">缺点：对象里的值为函数无法拷贝</span><br><span class=\"line\">let obj1 = &#123;</span><br><span class=\"line\">   fun:function()&#123;</span><br><span class=\"line\">      alert(123);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class=\"line\">console.log(typeof obj1.fun); // function</span><br><span class=\"line\">console.log(typeof obj2.fun); // undefined</span><br><span class=\"line\">//jquery实现深拷贝</span><br><span class=\"line\">jquery 提供一个$.extend可以用来做深拷贝；</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"14-排序\"><a href=\"#14-排序\" class=\"headerlink\" title=\"14   排序\"></a>14   排序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://segmentfault.com/a/1190000016286789 </span><br><span class=\"line\">sort</span><br><span class=\"line\">冒泡</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.sort排序</span><br><span class=\"line\">按升序排列</span><br><span class=\"line\">arr.sort(</span><br><span class=\"line\">    function(n1,n2)&#123;</span><br><span class=\"line\">    \treturn n1-n2</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">按降序排列</span><br><span class=\"line\">arr.sort(</span><br><span class=\"line\">\tfunction(n1,n2)&#123;</span><br><span class=\"line\">\t\treturn n2-n1</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">2.冒泡排序</span><br><span class=\"line\">function bubbleSort(arr) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        for (var j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">                [arr[j], arr[i]] = [arr[i], arr[j]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">3.选择排序</span><br><span class=\"line\">function selectSort(arr) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        var min = i</span><br><span class=\"line\">        for (var j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            if (arr[min] &gt; arr[j]) &#123;</span><br><span class=\"line\">                min = j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i != min) &#123;</span><br><span class=\"line\">            [arr[min], arr[i]] = [arr[i], arr[min]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">4.快速排序</span><br><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">  qSort(0, arr.length - 1);</span><br><span class=\"line\">  return arr;</span><br><span class=\"line\">  function qSort(left, right)&#123;</span><br><span class=\"line\">    if (left &gt;= right)//两个数相遇则结束该轮排序</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    var key = arr[left];//取最左边的元素作为标识数</span><br><span class=\"line\">    var i = left;</span><br><span class=\"line\">    var j = right;</span><br><span class=\"line\">    while (i != j)&#123;//两个数相遇则结束该轮排序</span><br><span class=\"line\">      while (i != j &amp;&amp; arr[j] &gt;= key) j--;//j前移</span><br><span class=\"line\">      [arr[j], arr[i]] = [arr[i], arr[j]];</span><br><span class=\"line\">      while (i != j &amp;&amp; arr[i] &lt;= key) i++;//i后移</span><br><span class=\"line\">      [arr[j], arr[i]] = [arr[i], arr[j]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    qSort(left, j - 1);//对标识数前面的数继续该方法排序</span><br><span class=\"line\">    qSort(j + 1, right);//对标识数后面的数继续该方法排序</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-去重\"><a href=\"#15-去重\" class=\"headerlink\" title=\"15  去重\"></a>15  去重</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/lewiscutey/p/8269567.html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set()方法去重(ES6新增)</span><br><span class=\"line\">function unique(arr)&#123;</span><br><span class=\"line\">    return [...(new Set(arr))];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-闭包\"><a href=\"#16-闭包\" class=\"headerlink\" title=\"16 闭包\"></a>16 闭包</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  声明局部变量供外部使用，防止变量污染全局</span><br><span class=\"line\">2  闭包因为有函数  所以会存在堆中   可以存储值   一般会用来做缓存</span><br><span class=\"line\">缺点  容易造成内存泄漏  </span><br><span class=\"line\">解决方案  手动清除</span><br><span class=\"line\"></span><br><span class=\"line\">3 写法 </span><br><span class=\"line\">\t函数嵌套</span><br><span class=\"line\">\t内部函数会作为外部函数的返回值</span><br><span class=\"line\">\t内部函数因为作用域链可以访问外部函数的变量 会做为内部函数的返回值</span><br><span class=\"line\"></span><br><span class=\"line\">代码 </span><br><span class=\"line\">  function fn1()&#123;</span><br><span class=\"line\">          var a = 10</span><br><span class=\"line\">          return function()&#123;</span><br><span class=\"line\">              return  a</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">闭包概念：</span><br><span class=\"line\">1. 有一个 A 函数，再 A 函数内部返回一个 B 函数</span><br><span class=\"line\">2. 再 A 函数外部有变量引用这个 B 函数</span><br><span class=\"line\">3. B 函数内部访问着 A 函数内部的私有变量</span><br><span class=\"line\">以上三个条件缺一不可</span><br><span class=\"line\">闭包特点：</span><br><span class=\"line\">1. 作用域空间不销毁</span><br><span class=\"line\">- 优点： 因为不销毁，变量页不会销毁，增加了变量的生命周期</span><br><span class=\"line\">- 缺点： 因为不销毁，会一直占用内存，多了以后就会导致内存溢出</span><br><span class=\"line\">2. 可以利用闭包访问再一个函数外部访问函数内部的变量</span><br><span class=\"line\">- 优点： 可以再函数外部访问内部数据</span><br><span class=\"line\">- 缺点： 必须要时刻保持引用，导致函数执行栈不被销毁</span><br><span class=\"line\">3. 保护私有变量</span><br><span class=\"line\">- 优点： 可以把一些变量放在函数里面，不会污染全局</span><br><span class=\"line\">- 缺点： 要利用闭包函数才能访问，不是很方便</span><br><span class=\"line\">代码：</span><br><span class=\"line\">function fun() &#123;</span><br><span class=\"line\">    var count = 1;</span><br><span class=\"line\">    return function () &#123;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        console.log(count)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn = fun()</span><br><span class=\"line\">fn()  /* 2 */</span><br><span class=\"line\">fn()  /* 3 */</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-面向对象-—-封装\"><a href=\"#17-面向对象-—-封装\" class=\"headerlink\" title=\"17 面向对象    — 封装\"></a>17 面向对象    — 封装</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象是一种编程思想  符合我们的生活逻辑</span><br><span class=\"line\">解</span><br><span class=\"line\">（面向过程）</span><br><span class=\"line\">答案</span><br><span class=\"line\"></span><br><span class=\"line\">面向过程也是一种编程思想   数学逻辑的映射   </span><br><span class=\"line\">解  </span><br><span class=\"line\">第一步骤</span><br><span class=\"line\">第二步骤</span><br><span class=\"line\">第三步骤</span><br><span class=\"line\">结果</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象编程，使用构造函数构造对象</span><br><span class=\"line\">1. 先书写一个构造函数</span><br><span class=\"line\">2. 在构造函数内向对象添加一些成员</span><br><span class=\"line\">3.使用这个构造函数创造一个对象（和 new 连用）</span><br><span class=\"line\">4.构造函数可以创建对象，并且创建一个带有属性和方法的对象</span><br><span class=\"line\">5.面向对象就是要想办法找到一个有属性和方法的对象</span><br><span class=\"line\">6.面向对象就是我们自己制造构造函数的过程</span><br><span class=\"line\">代码：</span><br><span class=\"line\">// 1. 先创造一个构造函数</span><br><span class=\"line\">function Person(name, gender) &#123;</span><br><span class=\"line\">  this.age = 18</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.gender = gender</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 2. 使用构造函数创建对象</span><br><span class=\"line\">var p1 = new Person(&#x27;Jack&#x27;, &#x27;man&#x27;)</span><br><span class=\"line\">var p2 = new Person(&#x27;Rose&#x27;, &#x27;woman&#x27;)</span><br><span class=\"line\">// 3. 使用原型向构造函数添加方法：</span><br><span class=\"line\">Person.prototype.sayHi = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;hello&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p1.sayHi()</span><br><span class=\"line\">// 4. 实例化对象的 __proto__ 和所属的构造函数的 prototype 是一个对象空间</span><br><span class=\"line\">console.log(p1.__proto__ === Person.prototype) // true</span><br><span class=\"line\">// 5. p1和p2都是Person的实例,p1.__proto__ 和 p2.__proto__ 指向的都是 Person.prototype,两个实例化对象p1和p2执行的是同一个方法。即构造函数原型Person.prototype里的方法。</span><br><span class=\"line\">console.log(p1.sayHi === p2.sayHi) // true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-原型链\"><a href=\"#18-原型链\" class=\"headerlink\" title=\"18 原型链\"></a>18 原型链</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一个对象都有原型对象 ， 原型对象也有原型对象 ，依次向上，直到Object.prototype如果还没有最会指向null,这样形成一个线性的链就叫做原型链</span><br><span class=\"line\">原型链特点 原型链上的方法和属性 实例可以共享</span><br><span class=\"line\"></span><br><span class=\"line\">共享的原因是什么？</span><br><span class=\"line\">实例会有指针  __proto__ 会指向源性对象</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型链：</span><br><span class=\"line\">实例化对象的__proto__指向其构造函数的prototype,实例化对象的__proto__里面也有一个成员叫做constructor指向当前这个对象所属的构造函数。实例化对象的__proto__的__proto__指向顶级构造函数Object的prototype,实例化对象的__proto__的__proto__里面的constructor指向顶级构造函数Object。Object.prototype就到顶了，Object.prototype 的 __proto__ 就是 null。</span><br><span class=\"line\">原型链的访问原则</span><br><span class=\"line\">访问一个对象的成员的时候,自己没有就会去 __proto__ 中找,如果 __proto__ 里面没有就再去 __proto__ 里面找,一直找到 Object.prototype 里面都没有，那么就会返回 undefiend。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"19-继承-说话的继承都是为了优化代码，优化性\"><a href=\"#19-继承-说话的继承都是为了优化代码，优化性\" class=\"headerlink\" title=\"19 继承  说话的继承都是为了优化代码，优化性\"></a>19 继承  说话的继承都是为了优化代码，优化性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组合继承 = 借用构造函数继承 + 原型对象继承</span><br><span class=\"line\"></span><br><span class=\"line\"> //超类  父类   假继承</span><br><span class=\"line\"> function A(name, age) &#123;</span><br><span class=\"line\"> \tthis.name = name;</span><br><span class=\"line\"> \tthis.age = age;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> A.prototype.eat = function () &#123;</span><br><span class=\"line\">\t console.log(this.name + &quot;吃 &quot; + this.name);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">Dog.prototype = new A();</span><br><span class=\"line\">Cat.prototype = new A();</span><br><span class=\"line\"> function Dog(name, age) &#123;</span><br><span class=\"line\"> \t\tA.call(this, name, age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> function Cat(name, age) &#123;</span><br><span class=\"line\">\t A.call(this, name, age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> var dog1 = new Dog(&quot;小白&quot;, 3);</span><br><span class=\"line\"> var dog2 = new Dog(&quot;小白1&quot;, 31);</span><br><span class=\"line\"> var cat1 = new Cat(&quot;喵咪&quot;, 3);</span><br><span class=\"line\"> console.log(dog1, cat1);</span><br><span class=\"line\"> dog1.eat();</span><br><span class=\"line\"> cat1.eat();</span><br><span class=\"line\">console.log(dog1.eat === dog2.eat); //true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.组合继承</span><br><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">    this.name = &#x27;Jack&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = function () &#123;</span><br><span class=\"line\">    console.log(&#x27;hello&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Student() &#123;</span><br><span class=\"line\">    Person.call(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype = new Person()</span><br><span class=\"line\">var s1 = new Student()</span><br><span class=\"line\">2.ES6继承</span><br><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">    this.name = &#x27;Jack&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = function () &#123;</span><br><span class=\"line\">    console.log(&#x27;hello&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 下面表示创造一个 Student 类，继承自 Person 类</span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        // 必须在 constructor 里面执行一下 super() 完成继承 </span><br><span class=\"line\">        super()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var s1 = new Student()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"20-本地存储\"><a href=\"#20-本地存储\" class=\"headerlink\" title=\"20   本地存储\"></a>20   本地存储</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie  （一般情况下  cookie都是从后台发送的）</span><br><span class=\"line\">web存储  (低版本不兼容)   localStorage （长存）  sesstionStorage (会话 关闭浏览器销毁)</span><br><span class=\"line\"></span><br><span class=\"line\">if(localStorage)&#123;</span><br><span class=\"line\">\t使用localStorage</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\tcookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.cookie:</span><br><span class=\"line\">cookie是一个以字符串的形式存储数据的位置,在字符串中以key=value的形式出现,每一个key=value是一条数据,多个数据之间以 ; 分割。每一个 HTTP 请求都会在请求头中携带 cookie 到服务端,每一个 HTTP 响应都会在响应头中携带 cookie 到客户端,也就是,cookie 是不需要我们手动设置，就会自动在 客户端 和 服务端之间游走的数据。</span><br><span class=\"line\">读取cookie：</span><br><span class=\"line\">const cookie = document.cookie</span><br><span class=\"line\">console.log(cookie) // 就能得到当前 cookie 的值</span><br><span class=\"line\">设置cookie：</span><br><span class=\"line\">// 下面这个 cookie 数据会在 2043 年 12 月 18 日 12 点以后过期，过期后会自动消失</span><br><span class=\"line\">document.cookie = &#x27;b=200;expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;&#x27;</span><br><span class=\"line\">删除cookie：</span><br><span class=\"line\">// 因为 cookie 不能直接删除</span><br><span class=\"line\">// 所以我们只能把某一条 cookie 的过期时间设置成当前时间之前</span><br><span class=\"line\">// 那么浏览器就会自动删除 cookie</span><br><span class=\"line\">document.cookie = &#x27;b=200;expires=Thu, 18 Dec 2018 12:00:00 GMT&quot;;&#x27;</span><br><span class=\"line\">2.localStorage 本地存储：</span><br><span class=\"line\">没有过期时间,不会跟随服务器发送,大小5M,不用在服务器下运行。</span><br><span class=\"line\">// 设置</span><br><span class=\"line\">localStorage.setItem(&#x27;item&#x27;, &#x27;abc&#x27;)</span><br><span class=\"line\">// 获取</span><br><span class=\"line\">console.log(localStorage.getItem(&#x27;item&#x27;))</span><br><span class=\"line\">// 删除</span><br><span class=\"line\">localStorage.removeItem(&#x27;item&#x27;)</span><br><span class=\"line\">// 清空</span><br><span class=\"line\">localStorage.clear()</span><br><span class=\"line\">3.sessionStorage 本地存储:</span><br><span class=\"line\">会话结束就没有了,不会跟随服务器发送,大小5M,不用在服务器下运行,写法和localStorage完全一样。</span><br><span class=\"line\">// 设置</span><br><span class=\"line\">sessionStorage.setItem(&#x27;item&#x27;, &#x27;abc&#x27;)</span><br><span class=\"line\">// 获取</span><br><span class=\"line\">console.log(sessionStorage.getItem(&#x27;item&#x27;))</span><br><span class=\"line\">// 删除</span><br><span class=\"line\">sessionStorage.removeItem(&#x27;item&#x27;)</span><br><span class=\"line\">// 清空</span><br><span class=\"line\">sessionStorage.clear()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"21-ajax\"><a href=\"#21-ajax\" class=\"headerlink\" title=\"21  ajax\"></a>21  ajax</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前后端交互技术  核心两个</span><br><span class=\"line\">XMLHttpRequest   ---  $.ajax  axios</span><br><span class=\"line\">fetch  -- fetch</span><br><span class=\"line\"></span><br><span class=\"line\">1 ajax 原理</span><br><span class=\"line\">  1） 获取核心对象  做兼容</span><br><span class=\"line\">  2） 发送请求   xhr.open(&quot;methods&quot;,url,true)</span><br><span class=\"line\">  3)  发送参数   xhr.send(null)</span><br><span class=\"line\">  4)  监听变化触发函数   xhr.onreadystatechange</span><br><span class=\"line\"> </span><br><span class=\"line\">2 axios 二次分装    </span><br><span class=\"line\">\t请求拦截器  修改参数类型 ， 统一传固定参数 。。。</span><br><span class=\"line\">\t相应拦截器  错误几种处理  </span><br><span class=\"line\"></span><br><span class=\"line\">3 $.ajax  当你想用 jsonp的时候  用封装$.ajax </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ajax：</span><br><span class=\"line\">ajax全名async javascript and XML(异步的javascript和XML),客户端给服务端发送消息的工具，以及接受响应的工具。</span><br><span class=\"line\">(1)创建一个 ajax 对象</span><br><span class=\"line\">const xhr = new XMLHttpRequest()</span><br><span class=\"line\">(2)配置链接信息</span><br><span class=\"line\">// xhr.open(&#x27;请求方式&#x27;, &#x27;请求地址&#x27;, 是否异步默认 true 表示异步false 表示同步)</span><br><span class=\"line\">xhr.open(&#x27;get&#x27;, &#x27;./data.php&#x27;)</span><br><span class=\"line\">(3)发送请求</span><br><span class=\"line\">xhr.send()</span><br><span class=\"line\">(4)获得相应数据</span><br><span class=\"line\">// ajax状态码 xhr.readyState,只有当 readyState === 4 的时候，我们才可以正常使用服务端给我们的数据</span><br><span class=\"line\">// 记录http状态码 xhr.status,200 ~ 299 表示本次请求成功了</span><br><span class=\"line\">// readyStateChange事件专门用来监听ajax对象</span><br><span class=\"line\">// responseText用来记录服务端给我们的响应体内容的</span><br><span class=\"line\">xhr.onreadyStateChange = function () &#123;</span><br><span class=\"line\">  if (xhr.readyState === 4 &amp;&amp; /^2\\d&#123;2|$/.test(xhr.status)) &#123;</span><br><span class=\"line\">    console.log(xhr.responseText)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(5)发送参数</span><br><span class=\"line\">// get 请求的参数就直接在 url 后面进行拼接就可以</span><br><span class=\"line\">xhr.open(&#x27;get&#x27;, &#x27;./data.php?a=100&amp;b=200&#x27;)</span><br><span class=\"line\">// post 请求的参数是携带在请求体中的,必须要先设置一下请求头中的 content-type</span><br><span class=\"line\">// application/x-www-form-urlencoded 表示的数据格式就是 key=value&amp;key=value</span><br><span class=\"line\">xhr.setRequestHeader(&#x27;content-type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;)</span><br><span class=\"line\">xhr.send(&#x27;a=100&amp;b=200&#x27;)</span><br><span class=\"line\">2. axios:</span><br><span class=\"line\">(1)设置拦截器</span><br><span class=\"line\">import axios from &quot;axios&quot;;</span><br><span class=\"line\">const fetchData = axios.create(&#123;</span><br><span class=\"line\">    baseURL: &quot;http://localhost:3000&quot;, // 请求地址前缀</span><br><span class=\"line\">    withCredentials: true, // 允许携带cookie</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//添加请求拦截器</span><br><span class=\"line\">fetchData.interceptors.request.use(</span><br><span class=\"line\">    function (config) &#123;</span><br><span class=\"line\">        if (config.method == &quot;get&quot;) &#123;</span><br><span class=\"line\">            config.params = &#123;</span><br><span class=\"line\">                ...config.params,</span><br><span class=\"line\">                token: JSON.parse(localStorage.getItem(&quot;user&quot;)).token,  //携带token</span><br><span class=\"line\">                cookie: JSON.parse(localStorage.getItem(&quot;user&quot;)).cookie,  //携带cookie</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (config.method == &quot;post&quot;) &#123;</span><br><span class=\"line\">            config.data = &#123;</span><br><span class=\"line\">                ...config.data,</span><br><span class=\"line\">                token: JSON.parse(localStorage.getItem(&quot;user&quot;)).token,  //携带token</span><br><span class=\"line\">                cookie: JSON.parse(localStorage.getItem(&quot;user&quot;)).cookie,   //携带cookie</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return config;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function (error) &#123;</span><br><span class=\"line\">        //请求错误时做些事</span><br><span class=\"line\">        return Promise.reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">//添加响应拦截器</span><br><span class=\"line\">fetchData.interceptors.response.use(</span><br><span class=\"line\">    function (response) &#123;</span><br><span class=\"line\">        //对响应数据做些事</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function (error) &#123;</span><br><span class=\"line\">        //响应错误时做些事</span><br><span class=\"line\">        return Promise.reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">export default fetchData;</span><br><span class=\"line\">(2)二次封装</span><br><span class=\"line\">// 导入拦截器</span><br><span class=\"line\">import fetchData from &quot;./fetchData&quot;;</span><br><span class=\"line\">// get请求用params传参</span><br><span class=\"line\">export async function getPlayList(data = &#123;&#125;) &#123;</span><br><span class=\"line\">  return await fetchData.get(&quot;/top/playlist&quot;, &#123;</span><br><span class=\"line\">    params: data,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// post请求用data传参</span><br><span class=\"line\">export async function login(data) &#123;</span><br><span class=\"line\">  return await fetchData.post(&quot;/login/cellphone&quot;, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">3. jsonp:</span><br><span class=\"line\">(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。</span><br><span class=\"line\">(2)使用Jquery封装函数$.ajax</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: &quot;http://127.0.0.1:8081/list&quot;,</span><br><span class=\"line\">    dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">    success: (res) =&gt; &#123;</span><br><span class=\"line\">    \tconsole.log(res)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"22-防抖-和-节流\"><a href=\"#22-防抖-和-节流\" class=\"headerlink\" title=\"22 防抖 和 节流\"></a>22 防抖 和 节流</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 使用场景 </span><br><span class=\"line\">   1 ) 搜索的时候 ， 很容易重复触发请求，怎么避免这个问题</span><br><span class=\"line\">   2 ) 根据移动坐标来触发验证  ， 滑动验证码</span><br><span class=\"line\">   </span><br><span class=\"line\">https://segmentfault.com/a/1190000018428170    看看文章 （）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 防抖：</span><br><span class=\"line\">对于短时间内连续触发的事件（如滚动事件），防抖的含义就是让某个时间期限内，事件处理函数只执行一次。</span><br><span class=\"line\">function debounce(fn,delay)&#123;</span><br><span class=\"line\">    let timer = null //借助闭包</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        if(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(fn,delay) // 简化写法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function showTop  () &#123;</span><br><span class=\"line\">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">　　console.log(&#x27;滚动条位置：&#x27; + scrollTop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = debounce(showTop,1000)</span><br><span class=\"line\">2. 节流：</span><br><span class=\"line\">如果短时间内大量触发同一事件，那么在函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效。</span><br><span class=\"line\">function throttle(fn,delay)&#123;</span><br><span class=\"line\">    let valid = true</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">       if(!valid)&#123;</span><br><span class=\"line\">           //休息时间 暂不接客</span><br><span class=\"line\">           return false </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       // 工作时间，执行函数并且在间隔期内把状态位设为无效</span><br><span class=\"line\">        valid = false</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            fn()</span><br><span class=\"line\">            valid = true;</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function showTop  () &#123;</span><br><span class=\"line\">    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">　　console.log(&#x27;滚动条位置：&#x27; + scrollTop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = throttle(showTop,1000) </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"23-事件委托-提高性能\"><a href=\"#23-事件委托-提高性能\" class=\"headerlink\" title=\"23  事件委托   提高性能\"></a>23  事件委托   提高性能</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  利用的是冒泡原理 ，将事件注册给父辈组件，因为冒泡点击本身的时候父组件会触发，可以通过判断事件源，来判断是谁触发的从而实现事件委托</span><br><span class=\"line\">2  减少了事件注册   ， 动态添加的元素依然会享有事件</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件委托：</span><br><span class=\"line\">可以给未来元素添加事件</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;2&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;3&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  \tvar oUl = docuemnt.querySelector(&#x27;ul&#x27;)   </span><br><span class=\"line\">    oUl.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">      e = e || window.event</span><br><span class=\"line\">      var target = e.target || e.srcElement</span><br><span class=\"line\">      if (target.nodeName === &#x27;LI&#x27;) &#123;</span><br><span class=\"line\">        console.log(&#x27;我是 li，我被点击了&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"24-事件流\"><a href=\"#24-事件流\" class=\"headerlink\" title=\"24 事件流\"></a>24 事件流</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡  --  从内向外  -- 事件委托</span><br><span class=\"line\">捕获  --  从外向内  --  改热键 </span><br><span class=\"line\"></span><br><span class=\"line\">div.addEventListener(&quot;click&quot;,function()&#123;&#125;,false) --  removeEventLisener</span><br><span class=\"line\">div.onclick=function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 冒泡：</span><br><span class=\"line\">就是从事件目标的事件处理函数开始，依次向外，直到 window 的事件处理函数触发，也就是从下向上的执行事件处理函数</span><br><span class=\"line\">2. 捕获：</span><br><span class=\"line\">就是从 window 的事件处理函数开始，依次向内，直到事件目标的事件处理函数执行，也就是从上向下的执行事件处理函数</span><br><span class=\"line\">事件触发默认冒泡，从内向外触发。</span><br><span class=\"line\">阻止冒泡的几种方式：</span><br><span class=\"line\">(1) e.stopPropagation() 点击只出现li</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\">    var li = document.querySelector(&#x27;li&#x27;)</span><br><span class=\"line\">    li.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        e.stopPropagation()</span><br><span class=\"line\">        console.log(&#x27;li&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ul.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class=\"line\">        console.log(&#x27;ul&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">(2)e.cancelBubble = true 点击只出现li</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\">    var li = document.querySelector(&#x27;li&#x27;)</span><br><span class=\"line\">    li.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        e.cancelBubble = true</span><br><span class=\"line\">        console.log(&#x27;li&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ul.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class=\"line\">        console.log(&#x27;ul&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">(3)事件监听第三个参数true,事件捕获，默认false,事件冒泡。冒泡先出现li,再出现ul。捕获先出现ul,再出现li。</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;1&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\">    var li = document.querySelector(&#x27;li&#x27;)</span><br><span class=\"line\">    li.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        console.log(&#x27;li&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ul.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class=\"line\">        console.log(&#x27;ul&#x27;)</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"25-跨域\"><a href=\"#25-跨域\" class=\"headerlink\" title=\"25  跨域\"></a>25  跨域</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  同源策略    端口号  协议  域名     部署到同原</span><br><span class=\"line\">2  cors 服务器设置响应头    允许访问      nginx</span><br><span class=\"line\">3  使用webpack代理 （开发过程中有用）    打包之后不生效</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">        &quot;/api&quot;: &#123;</span><br><span class=\"line\">        target: &quot;http://192.168.x.xxx:8090&quot;, // 要访问的接口域名</span><br><span class=\"line\">        ws: true, // 是否启用websockets</span><br><span class=\"line\">        changeOrigin: true, //开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">        &quot;^/api&quot;: &quot;&quot;, //这里理解成用&#x27;/api&#x27;代替target里面的地址,比如我要调用&#x27;http://40.00.100.100:3002/user/add&#x27;，直接写&#x27;/api/user/add&#x27;即可</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> 4  jsonp  原理    纯前端技术跨域  （需要后端配合）</span><br><span class=\"line\"> 5  iframe 跨域</span><br><span class=\"line\"> 6  websocket  可以做跨域</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://juejin.im/post/6844904126246027278?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=665117609675198464#heading-28</span><br><span class=\"line\">1 同源策略：请求协议/域名/端口号全部相同。</span><br><span class=\"line\">2 CORS：跨域资源共享(浏览器自带机制)</span><br><span class=\"line\">跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。对于前端来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求,实现CORS通信的关键是服务器。</span><br><span class=\"line\">Node 中的解决方案</span><br><span class=\"line\">直接使用中间件</span><br><span class=\"line\">const cors = require(&quot;koa-cors&quot;);</span><br><span class=\"line\">app.use(cors());</span><br><span class=\"line\">传递cookie前端需设置 withCredentials: true,后端需设置Access-Control-Allow-Credentials为true,Access-Control-Allow-Origin不为*</span><br><span class=\"line\">3 nginx反向代理</span><br><span class=\"line\">(1)安装nginx</span><br><span class=\"line\">(2)配置nginx，把localhost:8080和localhost:8000统一配置在统一服务器local.test(自定义域名)下。</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name local.test;</span><br><span class=\"line\">        location /api &#123;</span><br><span class=\"line\">            proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://localhost:8000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(3)重启nginx</span><br><span class=\"line\">(4)前端请求</span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">\taxios.defaults.withCredentials = true; </span><br><span class=\"line\">\tlogin.onclick = () =&gt; &#123; </span><br><span class=\"line\">\t\taxios.post(&quot;/api/login&quot;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">4 使用webpack代理(开发过程中有用,打包之后不生效)</span><br><span class=\"line\">配置webpack中的devServe</span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    open: true,</span><br><span class=\"line\">    host: &#x27;localhost&#x27;,</span><br><span class=\"line\">    port: 8000,</span><br><span class=\"line\">    https: false,</span><br><span class=\"line\">    hotOnly: false,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">        // 配置跨域</span><br><span class=\"line\">        &#x27;/api&#x27;: &#123;</span><br><span class=\"line\">            target: &#x27;http://localhost:8080/&#x27;,  // 要访问的接口域名</span><br><span class=\"line\">            ws: true,  // 是否启用websockets</span><br><span class=\"line\">            changOrigin: true, //开启代理</span><br><span class=\"line\">       \t\tpathRewrite: &#123;</span><br><span class=\"line\">        \t&#x27;^/api&#x27;: &#x27;&#x27; //这里理解成用&#x27;/api&#x27;代替target里面的地址,比如我要调\t用&#x27;http://localhost:8080/login&#x27;，直接写&#x27;/api/login&#x27;即可</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    before: app =&gt; &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">5 jsonp跨域</span><br><span class=\"line\">(1)script 标签的 src 属性本质就是请求一个外部资源，是不受到同源策略的影响的。并且请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行。所以我们就可以利用这个 script 标签的 src 属性来进行跨域请求。</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var script=document.createElement(&#x27;script&#x27;)</span><br><span class=\"line\">    function getData(data)&#123;</span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.src=&#x27;http://localhost:8080?callback=getData&#x27;</span><br><span class=\"line\">    document.body.appendChild(script)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">(2)使用Jquery封装函数$.ajax</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: &quot;http://127.0.0.1:8081/list&quot;,</span><br><span class=\"line\">    dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">    success: (res) =&gt; &#123;</span><br><span class=\"line\">    \tconsole.log(res)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"26-当你输入网址的时候经历了什么？\"><a href=\"#26-当你输入网址的时候经历了什么？\" class=\"headerlink\" title=\"26  当你输入网址的时候经历了什么？\"></a>26  当你输入网址的时候经历了什么？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://segmentfault.com/a/1190000006879700  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.DNS解析:DNS解析的过程就是网址到IP地址的转换,当发送请求时，可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡。</span><br><span class=\"line\">2.TCP连接</span><br><span class=\"line\">TCP/IP 协议</span><br><span class=\"line\">三次握手：</span><br><span class=\"line\">(1)客户端发送一个消息给到服务端</span><br><span class=\"line\">(2)服务端回给客户端一个消息</span><br><span class=\"line\">(3)客户端再回给服务端一个消息</span><br><span class=\"line\">四次挥手：</span><br><span class=\"line\">(1)客户端发送一个我要断开的消息给服务端</span><br><span class=\"line\">(2)服务端接受到以后发送一个消息告诉客户端我已经进入关闭等待状态</span><br><span class=\"line\">(3)服务端再次发送一个消息告诉客户端，这个是我的最后一次消息给你，当我再接受到消息的时候就会关闭</span><br><span class=\"line\">(4)客户端接受到服务端的消息以后，告诉服务器，我已经关闭，这个是给你的最后一个消息</span><br><span class=\"line\">3.发送HTTP请求</span><br><span class=\"line\">每一个请求都会有一个请求报文(请求行，请求头，请求空行，请求体)</span><br><span class=\"line\">完整请求报文</span><br><span class=\"line\">(1)请求行</span><br><span class=\"line\">POST /user HTTP/1.1     </span><br><span class=\"line\"># POST 请求方式</span><br><span class=\"line\"># /user 请求URL（不包含域名）</span><br><span class=\"line\"># HTTP/1.1 请求协议版本    </span><br><span class=\"line\">(2)请求头</span><br><span class=\"line\">user-agent: Mozilla/5.0 # 产生请求的浏览器信息</span><br><span class=\"line\">accept: application/json # 表示客户端希望接受的数据类型</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded # 客户端发送的实体数据格式</span><br><span class=\"line\">Host: 127.0.0.1 # 请求的主机名（IP） </span><br><span class=\"line\">(3)请求空行</span><br><span class=\"line\">#（此处必须有一空行</span><br><span class=\"line\">(3)请求体</span><br><span class=\"line\">name=world </span><br><span class=\"line\">4.服务器处理请求并返回HTTP报文</span><br><span class=\"line\">响应报文(状态行，响应头，响应体)</span><br><span class=\"line\">(1)状态行</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\"># HTTP/1.1 服务器使用的 HTTP 协议版本</span><br><span class=\"line\"># 200 响应状态码</span><br><span class=\"line\"># OK 对响应状态码的简单解释</span><br><span class=\"line\">(2)响应头</span><br><span class=\"line\">Date: Jan, 14 Aug 2019 12:42:30 GMT # 服务器时间</span><br><span class=\"line\">Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45 # 服务器类型</span><br><span class=\"line\">Content-Type: text/html # 服务端给客户端的数据类型</span><br><span class=\"line\">Content-Length: 11 # 服务端给客户端的数据长度</span><br><span class=\"line\">(3)响应体</span><br><span class=\"line\">hello world</span><br><span class=\"line\"># 服务端给客户端的响应数据</span><br><span class=\"line\">5.浏览器解析渲染页面</span><br><span class=\"line\">   浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为reflow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。</span><br><span class=\"line\">6.连接结束</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"27-GET-POST-区别\"><a href=\"#27-GET-POST-区别\" class=\"headerlink\" title=\"27  GET POST 区别\"></a>27  GET POST 区别</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  post  上传   都可以用post</span><br><span class=\"line\">2  get   明文请求     jsonp必须用get    请求内容在地址栏显示  不安全   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、传送方式：get通过地址栏传输，post通过报文传输。</span><br><span class=\"line\">2、传送长度：get参数有长度限制（受限于url长度），而post无限制</span><br><span class=\"line\">3、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"28-this指向\"><a href=\"#28-this指向\" class=\"headerlink\" title=\"28 this指向\"></a>28 this指向</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">普通函数的this   谁调用指向谁     把谁找到   就看.前面的对象   全局window可以省略的</span><br><span class=\"line\">箭头函数的this会指向上层环境  不会改变</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系</span><br><span class=\"line\">1.全局定义的函数直接调用，this =&gt; window</span><br><span class=\"line\">2.对象内部的方法调用，this =&gt; 调用者</span><br><span class=\"line\">3.定时器的处理函数，this =&gt; window</span><br><span class=\"line\">4.事件处理函数，this =&gt; 事件源</span><br><span class=\"line\">5.自调用函数，this =&gt; window</span><br><span class=\"line\">6.call 和 apply 和 bind强行改变this指向</span><br><span class=\"line\">函数名.call(要改变的 this 指向，要给函数传递的参数1，要给函数传递的参数2， ...)</span><br><span class=\"line\">函数名.apply(要改变的 this 指向，[要给函数传递的参数1， 要给函数传递的参数2， ...])</span><br><span class=\"line\">bind方法不会立即执行函数，而是返回一个已经改变了 this 指向的函数</span><br><span class=\"line\">var newFn = 函数名.bind(要改变的 this 指向);</span><br><span class=\"line\">newFn(传递参数)</span><br><span class=\"line\">7.在框架组件中this指向当前组件的实例化对象</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"29-webpack-基础\"><a href=\"#29-webpack-基础\" class=\"headerlink\" title=\"29  webpack  基础\"></a>29  webpack  基础</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry :入口      多页应用 多入口多出口</span><br><span class=\"line\">output: 出口</span><br><span class=\"line\">module:&#123;   loader</span><br><span class=\"line\">\trules:[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">plugins:[ ],</span><br><span class=\"line\">devServer:&#123;&#125;  //webpack服务器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&quot;path&quot;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  mode: &quot;development&quot;,</span><br><span class=\"line\">  entry: &quot;./src/main.js&quot;,     //入口文件</span><br><span class=\"line\">  output: &#123;                    //口文件</span><br><span class=\"line\">    filename: &quot;main.js&quot;,</span><br><span class=\"line\">    path: path.join(__dirname, &quot;../dist&quot;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.scss$/,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &quot;style-loader&quot;, // 将 JS 字符串生成为 style 节点</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &quot;css-loader&quot;, // 将 CSS 转化成 CommonJS 模块</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &quot;sass-loader&quot;, // 将 Sass 编译成 CSS</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &quot;./index.html&quot;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    // contentBase: path.join(__dirname, &quot;../dist&quot;),</span><br><span class=\"line\">    port: 3000,   //端口号</span><br><span class=\"line\">    open: true,  //是否自动打开浏览器</span><br><span class=\"line\">    hot: true,  // 热更新</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#x27;/api&#x27;: &#123;// &#x27;/api&#x27;:匹配项</span><br><span class=\"line\">        target: &#x27;http://www.baidu.com&#x27;,// 接口的域名</span><br><span class=\"line\">        // secure: false,// 如果是https接口，需要配置这个参数</span><br><span class=\"line\">        changeOrigin: true,// 如果接口跨域，需要进行这个参数配置</span><br><span class=\"line\">        // pathRewrite: &#123;// 如果接口本身没有/api需要通过pathRewrite来重写了地址</span><br><span class=\"line\">        //   &#x27;^api&#x27;: &#x27;&#x27;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"30-call-apply-bind\"><a href=\"#30-call-apply-bind\" class=\"headerlink\" title=\"30  call apply  bind\"></a>30  call apply  bind</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">统一的作用都是  修改this指向</span><br><span class=\"line\">call(对象,参数1，参数2，参数3) 直接调用</span><br><span class=\"line\">apply(对象，[])  直接调用</span><br><span class=\"line\">bind(对象，参数1，参数) 必须还需要加（）调用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><h4 id=\"31-promise\"><a href=\"#31-promise\" class=\"headerlink\" title=\"31 promise\"></a>31 promise</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 解决异步回调问题  </span><br><span class=\"line\">2  因为  我们开发程序 有可能是有关联的 </span><br><span class=\"line\">\t例如   可以程序 有三步组成   第一步的结果会影响到第二步 ， 第二步结果会影响第三步  \t</span><br><span class=\"line\">3 Promise.then().then().then().catch()</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">\tresove(&#x27;ok&#x27;) // 传递给.then</span><br><span class=\"line\">\treject(err)  // 传递catch</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">async  --- await</span><br><span class=\"line\"></span><br><span class=\"line\">async function () &#123; &#125;  返回promise对象</span><br><span class=\"line\">await 将异步转成同步</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all()</span><br><span class=\"line\">Promise.race()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.promise语法</span><br><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  // resolve 表示成功的回调</span><br><span class=\"line\">  // reject 表示失败的回调</span><br><span class=\"line\">&#125;).then(function (res) &#123;</span><br><span class=\"line\">  // 成功的函数</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">  // 失败的函数</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">2.async/await语法</span><br><span class=\"line\">async function fn() &#123;</span><br><span class=\"line\">  const res = await promise对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"32-let-const-var-区别\"><a href=\"#32-let-const-var-区别\" class=\"headerlink\" title=\"32  let const var  区别\"></a>32  let const var  区别</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let,const 会产生块及作用域 ，声明的变量就是私有的</span><br><span class=\"line\">var  变量提升（预解析）  let const 没有</span><br><span class=\"line\">let  可以修改 但是不可重复声明  </span><br><span class=\"line\">const  不可以修改    我们一般定义 常量  配置属性</span><br><span class=\"line\"></span><br><span class=\"line\">使用的一般我们会根据 作用域来选    -----   解决了 变量徐然全局的问题  ----- 有点类似闭包的特性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"33-箭头函数\"><a href=\"#33-箭头函数\" class=\"headerlink\" title=\"33 箭头函数\"></a>33 箭头函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 使用情况  在vue和react或者其他框架里面，我们一般情况下  this都应该指向当前组件 ， 如果用普通函数会导致this指向不明确，所以用箭头函数比较合适</span><br><span class=\"line\">2 箭头函数的this始终指向它的外部环境，不会发生改变</span><br><span class=\"line\">3 let  foo = () =&gt; &#123;&#125;      后面有没有大括号是两种  如果有大括号就是普通函数   如果不加大括号  自动加return</span><br><span class=\"line\">4 不能能做构造函数    因为this指向固话</span><br><span class=\"line\">5 箭头函数没有 arguments对象 （获取实参的集合）， 我们可以通过 ...拓展运算符来模拟实参集合</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">箭头函数只能简写函数表达式，不能简写声明式函数</span><br><span class=\"line\">语法： (函数的行参) =&gt; &#123; 函数体内要执行的代码 &#125;</span><br><span class=\"line\">箭头函数内部没有 this，箭头函数的 this 是上下文的 this</span><br><span class=\"line\">箭头函数内部没有 arguments 这个参数集合</span><br><span class=\"line\">函数的行参只有一个的时候可以不写 ()其余情况必须写</span><br><span class=\"line\">函数体只有一行代码的时候，可以不写 &#123;&#125;，并且会自动 return</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"34-解构赋值\"><a href=\"#34-解构赋值\" class=\"headerlink\" title=\"34  解构赋值\"></a>34  解构赋值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10  b=11   </span><br><span class=\"line\">[b,a]= [a,b]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解构对象</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;Jack&#x27;,</span><br><span class=\"line\">  age: 18,</span><br><span class=\"line\">  gender: &#x27;男&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; name, age, gender &#125; = obj</span><br><span class=\"line\">解构数组</span><br><span class=\"line\">const arr = [&#x27;Jack&#x27;, &#x27;Rose&#x27;, &#x27;Tom&#x27;]</span><br><span class=\"line\">let [a, b, c] = arr</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"35-模板字符串\"><a href=\"#35-模板字符串\" class=\"headerlink\" title=\"35 模板字符串\"></a>35 模板字符串</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">` $&#123;&#125; `</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num = 100</span><br><span class=\"line\">let str = `hello$&#123;num&#125;world$&#123;num&#125;`</span><br><span class=\"line\">console.log(str) // hello100world100</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"36-新增方法\"><a href=\"#36-新增方法\" class=\"headerlink\" title=\"36  新增方法\"></a>36  新增方法</h4><h4 id=\"37-class-类\"><a href=\"#37-class-类\" class=\"headerlink\" title=\"37  class  类\"></a>37  class  类</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;&#125;</span><br><span class=\"line\">class Man extends Preson&#123;</span><br><span class=\"line\">\tconstructor()&#123;</span><br><span class=\"line\">\t\tsuper()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 下面表示创造一个 Student 类，继承自 Person 类</span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        // 必须在 constructor 里面执行一下 super() 完成继承 </span><br><span class=\"line\">        super()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"38-Set-Map-去重\"><a href=\"#38-Set-Map-去重\" class=\"headerlink\" title=\"38 Set ,Map   去重\"></a>38 Set ,Map   去重</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [...new Set(arr)]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/leftJS/p/11080962.html</span><br><span class=\"line\">1.set类似于数组，但是成员的值都是唯一的，没有重复的值。</span><br><span class=\"line\">(1)实例对象方法</span><br><span class=\"line\">add(value)：添加某个值，返回 Set 结构本身(可以链式调用)。</span><br><span class=\"line\">delete(value)：删除某个值，删除成功返回true，否则返回false。</span><br><span class=\"line\">has(value)：返回一个布尔值，表示该值是否为Set的成员。</span><br><span class=\"line\">clear()：清除所有成员，没有返回值。</span><br><span class=\"line\">const mySet = new Set([&#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, 1, 2, 1])</span><br><span class=\"line\">console.log(mySet)  // &#123;&#x27;a&#x27;, &#x27;b&#x27;, 1, 2&#125;   </span><br><span class=\"line\">myset.add(&#x27;c&#x27;).add(&#123;&#x27;a&#x27;: 1&#125;)</span><br><span class=\"line\">console.log(mySet) // &#123;&#x27;a&#x27;, &#x27;b&#x27;, 1, 2, &#x27;c&#x27;, &#123;a: 1&#125;&#125; </span><br><span class=\"line\">console.log(mySet.size)     // 6</span><br><span class=\"line\">mySet.has(2)     // true</span><br><span class=\"line\">(2)遍历方法</span><br><span class=\"line\">keys()：返回键名的遍历器。</span><br><span class=\"line\">values()：返回键值的遍历器。</span><br><span class=\"line\">entries()：返回键值对的遍历器。</span><br><span class=\"line\">forEach()：使用回调函数遍历每个成员。</span><br><span class=\"line\">(3)数组去重</span><br><span class=\"line\">function unique(arr)&#123;</span><br><span class=\"line\">    return [...(new Set(arr))];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">2.map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</span><br><span class=\"line\">(1)map对象的方法</span><br><span class=\"line\">set(key, val): 向Map中添加新元素</span><br><span class=\"line\">get(key): 通过键值查找特定的数值并返回</span><br><span class=\"line\">has(key): 判断Map对象中是否有Key所对应的值，有返回true,否则返回false</span><br><span class=\"line\">delete(key): 通过键值从Map中移除对应的数据</span><br><span class=\"line\">clear(): 将这个Map中的所有元素删除</span><br><span class=\"line\">const m1 = new Map([[&#x27;a&#x27;, 111], [&#x27;b&#x27;, 222]])</span><br><span class=\"line\">console.log(m1) // &#123;&quot;a&quot; =&gt; 111, &quot;b&quot; =&gt; 222&#125;</span><br><span class=\"line\">m1.get(&#x27;a&#x27;)  // 111</span><br><span class=\"line\">const m2 = new Map([[&#x27;c&#x27;, 3]])</span><br><span class=\"line\">const m3 = new Map(m2)</span><br><span class=\"line\">m3.get(&#x27;c&#x27;) // 3</span><br><span class=\"line\">m3.has(&#x27;c&#x27;) // true</span><br><span class=\"line\">m3.set(&#x27;d&#x27;, 555)</span><br><span class=\"line\">m3.get(&#x27;d&#x27;) // 555</span><br><span class=\"line\">(2)遍历方法</span><br><span class=\"line\">keys()：返回键名的遍历器</span><br><span class=\"line\">values()：返回键值的遍历器</span><br><span class=\"line\">entries()：返回键值对的遍历器</span><br><span class=\"line\">forEach()：使用回调函数遍历每个成员</span><br><span class=\"line\">(3)数组去重</span><br><span class=\"line\">function unique(arr) &#123;</span><br><span class=\"line\">    //定义常量 res,值为一个Map对象实例</span><br><span class=\"line\">    const res = new Map();</span><br><span class=\"line\">    //返回arr数组过滤后的结果，结果为一个数组</span><br><span class=\"line\">    //过滤条件是，如果res中没有某个键，就设置这个键的值为1</span><br><span class=\"line\">    return arr.filter((a) =&gt; !res.has(a) &amp;&amp; res.set(a, 1))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"39-…-拓展运算符-浅拷贝\"><a href=\"#39-…-拓展运算符-浅拷贝\" class=\"headerlink\" title=\"39   … 拓展运算符   浅拷贝\"></a>39   … 拓展运算符   浅拷贝</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3,4,5]</span><br><span class=\"line\">let arr1 = [...arr] 浅拷贝</span><br><span class=\"line\">let obj = &#123;name:&quot;zzz&quot;&#125;</span><br><span class=\"line\">let obb1 = &#123;...obj&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"40-symbol-唯一-用做key值\"><a href=\"#40-symbol-唯一-用做key值\" class=\"headerlink\" title=\"40  symbol  唯一   用做key值\"></a>40  symbol  唯一   用做key值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Symbol 本质上是一种唯一标识符，可用作对象的唯一属性名，这样其他人就不会改写或覆盖你设置的属性值。</span><br><span class=\"line\">2.声明方法：let id = Symbol(&quot;id&quot;);</span><br><span class=\"line\">3.Symbol 数据类型的特点是唯一性，即使是用同一个变量生成的值也不相等。</span><br><span class=\"line\">let id1 = Symbol(&#x27;id&#x27;);</span><br><span class=\"line\">let id2 = Symbol(&#x27;id&#x27;);</span><br><span class=\"line\">console.log(id1 == id2);  //false</span><br><span class=\"line\">4.Symbol 数据类型的另一特点是隐藏性，for···in，object.keys() 不能访问</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Jquery\"><a href=\"#Jquery\" class=\"headerlink\" title=\"Jquery\"></a>Jquery</h3><p> 1  选择器   </p>\n<p>  2 简单动画    animate   hide show    slideUp slideDown   </p>\n<p> 3  attr   removeAttr</p>\n<p> 4  ajax</p>\n<h3 id=\"Vue与Jquery区别\"><a href=\"#Vue与Jquery区别\" class=\"headerlink\" title=\"Vue与Jquery区别\"></a>Vue与Jquery区别</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jquery开发 针对 每次修改dom  所有的思想是对于dom的修改, 好性能  </span><br><span class=\"line\">Vue  MVVM  ,虚拟dom , 组件化开发会大大提高开发效率，维护效率，提高组减的复用， 自带很多指令，可以直接遍历dom，所达到修改数据后，视图会自动更新，</span><br><span class=\"line\">vue  可以做单页应用，这样可以大量的减少http请求</span><br><span class=\"line\">vue  可以有想成缓存组件，更全面的 ui框架提供</span><br><span class=\"line\">vue  官方提供脚手架，当我开发的时候可以组件化，打包之后更是压缩文件，省去了我们原生开发还需要手动压缩</span><br><span class=\"line\">vue  逻辑实现比较简单，只要对数据增删改查就可以实现页面的增删改查</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"41-BFC-块级格式化上下文\"><a href=\"#41-BFC-块级格式化上下文\" class=\"headerlink\" title=\"41 BFC(块级格式化上下文)\"></a>41 BFC(块级格式化上下文)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BFC(块级格式化上下文):它是一个独立的渲染区域，只有块级元素参与， 它规定了BFC内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</span><br><span class=\"line\">BFC的布局规则（规定、标准）：</span><br><span class=\"line\">    一、BFC内部的Box会在垂直方向，一个接一个地放置。</span><br><span class=\"line\">    二、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠（按照最大margin值设置）</span><br><span class=\"line\">    三、每个元素的margin box的左边， 与包含块border box的左边相接触</span><br><span class=\"line\">    四、BFC的区域不会与float box重叠。</span><br><span class=\"line\">    五、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</span><br><span class=\"line\">    六、计算BFC的高度时，浮动元素也参与计算</span><br><span class=\"line\">BFC的触发条件：</span><br><span class=\"line\">    根元素(html)</span><br><span class=\"line\">    float属性不为none</span><br><span class=\"line\">    position为absolute或fixed</span><br><span class=\"line\">    display为inline-block, table-cell, table-caption, flex, inline-flex</span><br><span class=\"line\">    overflow不为visible</span><br><span class=\"line\">应用：</span><br><span class=\"line\">    清除浮动</span><br><span class=\"line\">    三栏布局</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"42-MVC-MVP-MVVM\"><a href=\"#42-MVC-MVP-MVVM\" class=\"headerlink\" title=\"42 MVC,MVP,MVVM\"></a>42 MVC,MVP,MVVM</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.MVC:</span><br><span class=\"line\">M:Model</span><br><span class=\"line\">V:View</span><br><span class=\"line\">C:ControllerPresenter</span><br><span class=\"line\">调用关系：用户的对View操作以后，View捕获到这个操作，会把处理的权利交移给Controller；Controller会对来自View数据进行预处理、决定调用哪个Model的接口；然后由Model执行相关的业务逻辑；当Model变更了以后，会通过观察者模式通知View；View通过观察者模式收到Model变更的消息以后，会向Model请求最新的数据，然后重新更新界面。</span><br><span class=\"line\">2.MVP</span><br><span class=\"line\">M:Model</span><br><span class=\"line\">V:View</span><br><span class=\"line\">P:Presenter</span><br><span class=\"line\">调用关系：和MVC模式一样，用户对View的操作都会从View交移给Presenter。Presenter会执行相应的应用程序逻辑，并且对Model进行相应的操作；而这时候Model执行完业务逻辑以后，也是通过观察者模式把自己变更的消息传递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，通过View提供的接口更新界面。</span><br><span class=\"line\">3.MVVM</span><br><span class=\"line\">M:Model</span><br><span class=\"line\">V:View</span><br><span class=\"line\">VM:Model of View</span><br><span class=\"line\">调用关系：MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"43-检测数据类型\"><a href=\"#43-检测数据类型\" class=\"headerlink\" title=\"43 检测数据类型\"></a>43 检测数据类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.typeof</span><br><span class=\"line\">对于基本类型，除 null 以外，均可以返回正确的结果。</span><br><span class=\"line\">对于引用类型，除 function 以外，一律返回 object 类型。</span><br><span class=\"line\">对于 null ，返回 object 类型。</span><br><span class=\"line\">对于 function 返回  function 类型。</span><br><span class=\"line\">2.instanceof</span><br><span class=\"line\">instanceof 检测的是原型,instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</span><br><span class=\"line\">function F()&#123;&#125;</span><br><span class=\"line\">var f=new F()</span><br><span class=\"line\">console.log(f instanceof F) //true</span><br><span class=\"line\">[] instanceof Array; // true</span><br><span class=\"line\">[] instanceof Object; // true</span><br><span class=\"line\">3.constructor</span><br><span class=\"line\">console.log(&#x27;&#x27;.constructor)   //ƒ String() &#123; [native code] &#125;</span><br><span class=\"line\">4.toString</span><br><span class=\"line\">console.log(Object.prototype.toString.call(&#x27;&#x27;))   //[object String]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"44-git\"><a href=\"#44-git\" class=\"headerlink\" title=\"44 git\"></a>44 git</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.GIT 初始化</span><br><span class=\"line\"># git 初始化的指令</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">2.GIT 暂存区</span><br><span class=\"line\"># 把文件夹下的 index.txt 文本放在暂存区</span><br><span class=\"line\">$ git add index.txt</span><br><span class=\"line\"># 把文件夹下所有的内容都放在暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">3.GIT 历史区</span><br><span class=\"line\"># 把暂存区的内容放到历史区</span><br><span class=\"line\">$ git commit -m &quot;我是第一个版本&quot;</span><br><span class=\"line\"># 查看当前历史区版本信息</span><br><span class=\"line\">$ git log</span><br><span class=\"line\">4.GIT 分支</span><br><span class=\"line\"># 开辟一个 login 分支</span><br><span class=\"line\">$ git branch login</span><br><span class=\"line\"># 查看当前分支情况</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"># 切换到 login 分支</span><br><span class=\"line\">$ git checkout login</span><br><span class=\"line\"># 把 login 的内容合并到自己的分支(需要切换到其他主分支master)</span><br><span class=\"line\">$ git merge login</span><br><span class=\"line\"># 删除 login 分支(需要切换到其他分支)</span><br><span class=\"line\">$ git branch -d login</span><br><span class=\"line\">5.GIT 克隆</span><br><span class=\"line\"># 直接克隆仓库</span><br><span class=\"line\">$ git clone https://github.com/jquery/jquery.git</span><br><span class=\"line\">6.GIT 下拉</span><br><span class=\"line\"># 拉取远程最新代码</span><br><span class=\"line\">$ git pull</span><br><span class=\"line\">7.上传</span><br><span class=\"line\"># 上传内容</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\"># 表示把内容上传到 origin 这个地址</span><br><span class=\"line\"># master 是上传到远程的 master 分支</span><br><span class=\"line\"># 第二次上传</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"45-sass和less\"><a href=\"#45-sass和less\" class=\"headerlink\" title=\"45 sass和less\"></a>45 sass和less</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义变量的符号不同，less 是用@，sass 使用\\$</span><br><span class=\"line\">变量的作用域不同，less 在全局定义，就作用在全局，在代码块中定义，就作用于整个代码块。而 sass 只作用域全局。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"46-nodejs\"><a href=\"#46-nodejs\" class=\"headerlink\" title=\"46 nodejs\"></a>46 nodejs</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.核心模块</span><br><span class=\"line\">(1)http模块（搭建服务器）</span><br><span class=\"line\">const http = require(&quot;http&quot;);</span><br><span class=\"line\">// request  请求对象  --- 获取请求对象的资源</span><br><span class=\"line\">// responese 相应对象  --- 我需要给前端返回什么</span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(function (req, res) &#123;</span><br><span class=\"line\">      console.log(req.url, &quot;res&quot;);</span><br><span class=\"line\">      console.log(req.headers,&quot;header&quot;)</span><br><span class=\"line\">      res.end(&quot;ok&quot;);  // 必须要有结尾的</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(8089, function () &#123;</span><br><span class=\"line\">    console.log(&quot;启动成功&quot; + 8089);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">(2)url模块</span><br><span class=\"line\">cosnt url = require(&quot;url&quot;)</span><br><span class=\"line\">url.parse(地址,true/false)  // 地址栏转成对象    true表示将query字符串转对象</span><br><span class=\"line\">url.toString()        // 讲对象转成字符串</span><br><span class=\"line\">(3)path模块</span><br><span class=\"line\">path.resolve(&#x27;资源路径&#x27;,&#x27;资源路径&#x27;)   会拼接绝对路径  会自带 当前跟目录</span><br><span class=\"line\">path.join() 路径合并  不会携带根目录</span><br><span class=\"line\">__dirname  获取当前根目录的绝对路径</span><br><span class=\"line\">(4)fs模块</span><br><span class=\"line\">fs 分同步异步</span><br><span class=\"line\">异步  一般都有回调函数   结果为回调函数的参数</span><br><span class=\"line\">同步  返回值为回调函数的解构</span><br><span class=\"line\">fs.writeFile()</span><br><span class=\"line\">fs.WirteFileSync()</span><br><span class=\"line\">fs.readFile()</span><br><span class=\"line\">fs.readFileSync()</span><br><span class=\"line\">2.commonjs规范</span><br><span class=\"line\">暴露模块     module.exports    export default     export</span><br><span class=\"line\">加载模块\t require           import from       import &#123;&#125; from</span><br><span class=\"line\">3.使用express</span><br><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">const app = express();</span><br><span class=\"line\">// app.use()</span><br><span class=\"line\">// 所有的请求都会经过这个回调函数</span><br><span class=\"line\">app.use(function (req, res, next) &#123;</span><br><span class=\"line\">  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// post请求参数</span><br><span class=\"line\">// 作用向req.body 添加post请求参数</span><br><span class=\"line\">app.use(express.urlencoded());   // application/x-www-form-urlencoded</span><br><span class=\"line\">app.use(express.json());         //application/json</span><br><span class=\"line\">// 路由</span><br><span class=\"line\">app.get(function(req,res)&#123;</span><br><span class=\"line\">\t请求参数  req.query</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(8080, function () &#123;</span><br><span class=\"line\">  console.log(&quot;启动8080&quot;);</span><br><span class=\"line\">&#125;);\t</span><br><span class=\"line\">4.上传文件</span><br><span class=\"line\">const multer = require(&quot;multer&quot;);</span><br><span class=\"line\">let destUrl = path.join(__dirname, &quot;../&quot;, &quot;public/imgs&quot;);</span><br><span class=\"line\">const upl = multer(&#123;</span><br><span class=\"line\">  dest: destUrl, //生成图片的路径</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.post(&quot;/&quot;, upl.any(&quot;file&quot;), function (req, res) &#123;</span><br><span class=\"line\">  console.log(req.files, &quot;file&quot;);</span><br><span class=\"line\">  res.send(&#123;</span><br><span class=\"line\">    code: 200,</span><br><span class=\"line\">    msg: &quot;上传成功&quot;,</span><br><span class=\"line\">    imgs: imgs,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">5. mongoose</span><br><span class=\"line\">// 连接数据库</span><br><span class=\"line\">const mongoose = require(&quot;mongoose&quot;);</span><br><span class=\"line\">const url = &quot;mongodb://127.0.0.1/topic&quot;; // 数据库名默认端口号 27017</span><br><span class=\"line\">mongoose.connect(url);</span><br><span class=\"line\">mongoose.connection.once(&quot;open&quot;, () =&gt; &#123;</span><br><span class=\"line\">  console.log(url + &quot;数据库链接成功&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = mongoose;</span><br><span class=\"line\">// 导出数据模型</span><br><span class=\"line\">const mongoose = require(&quot;./mongoose&quot;);</span><br><span class=\"line\">const &#123; Schema &#125; = mongoose;</span><br><span class=\"line\">let personSchema = new Schema(&#123;</span><br><span class=\"line\">  username: String,</span><br><span class=\"line\">  pass: String,</span><br><span class=\"line\">  create_at: String,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">let UsersModel = mongoose.model(&quot;user&quot;, personSchema, &quot;users&quot;); // &quot;users&quot;数据表名</span><br><span class=\"line\">module.exports = UsersModel;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"47-react-hooks\"><a href=\"#47-react-hooks\" class=\"headerlink\" title=\"47 react-hooks\"></a>47 react-hooks</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用hooks</span><br><span class=\"line\">1.useState()</span><br><span class=\"line\">当给 setCount 传入一个与 count 相同的原始值时，组件不会重新渲染。当传递一个对象时，无论是否一样都会渲染</span><br><span class=\"line\">useState()方法可以传递值也可以传递函数，可延迟初始化，此函数在多次渲染时只运行一次。</span><br><span class=\"line\">2.useEffect</span><br><span class=\"line\">函数组件中执行副作用操作。副作用: 数据获取，数据订阅，以及手动更改 React 组件中的 DOM 都属于副作用。</span><br><span class=\"line\">3.useMemo</span><br><span class=\"line\">使用 useMemo 方法可以避免无用方法的调用,</span><br><span class=\"line\">4.useCallback</span><br><span class=\"line\">useCallback 解决的是传入子组件参数过度变化导致子组件过度渲染的问题</span><br><span class=\"line\">5.useContext</span><br><span class=\"line\">用来向所有后代组件传递 props</span><br><span class=\"line\">6.useRef</span><br><span class=\"line\">获取组件实例对象或者是DOM对象</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"48-缓存\"><a href=\"#48-缓存\" class=\"headerlink\" title=\"48 缓存\"></a>48 缓存</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">强制缓存优先于协商缓存进行</span><br><span class=\"line\">1.强制缓存</span><br><span class=\"line\">Cache-Control优先于Expires</span><br><span class=\"line\">2.协商缓存</span><br><span class=\"line\">协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存。</span><br><span class=\"line\">Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)</span><br><span class=\"line\">If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200</span><br><span class=\"line\">Etag / If-None-Match 优先级高于 Last-Modified / If-Modified-Since</span><br><span class=\"line\">3.存储位置</span><br><span class=\"line\">内存缓存优先硬盘缓存</span><br><span class=\"line\">在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取；而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"49-数组扁平化\"><a href=\"#49-数组扁平化\" class=\"headerlink\" title=\"49 数组扁平化\"></a>49 数组扁平化</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/wind-lanyan/p/9044130.html</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"50-通用柯里化函数\"><a href=\"#50-通用柯里化函数\" class=\"headerlink\" title=\"50 通用柯里化函数\"></a>50 通用柯里化函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//toString方法如果是直接调用那就返回当前函数的字符串，如果等于一个函数那就返回一个函数是直接可以被调用的</span><br><span class=\"line\">//通用的柯力化函数</span><br><span class=\"line\">function curry()&#123;</span><br><span class=\"line\">    //首先收集当前第一次传来的参数</span><br><span class=\"line\">    let _args = Array.prototype.slice.call(arguments)</span><br><span class=\"line\">    //收集二次或多次函数调用参数</span><br><span class=\"line\">    let _collectArgs = function ()&#123;</span><br><span class=\"line\">        _args.push(...arguments)</span><br><span class=\"line\">        return _collectArgs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //难点 _collectArgs.toString()这样直接返回当前的函数的字符串 例如@1 </span><br><span class=\"line\">    //难点  _collectArgs.toString = function()&#123;&#125; 返回这个函数会在自己执行</span><br><span class=\"line\">    //难点toString隐式转换的特性</span><br><span class=\"line\">    //闭包缓存当前参数</span><br><span class=\"line\">    //还可以通过fn.length做性能优化</span><br><span class=\"line\">    _collectArgs.toString = function()&#123;</span><br><span class=\"line\">        return _args.reduce((a,b)=&gt;&#123;</span><br><span class=\"line\">            return a+b</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _collectArgs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当传入不同的任何格式参数都参与计算</span><br><span class=\"line\">//curry(1,2)(2)(3)</span><br><span class=\"line\">console.log(curry(1)(2)(3))</span><br><span class=\"line\">//例如@1</span><br><span class=\"line\">//当前的函数变成字符串修改里面的内容 还有就是返回当前对象类型</span><br><span class=\"line\">function x() &#123; alert(&#x27;asdf&#x27;); &#125;</span><br><span class=\"line\">eval(x.toString().replace(&#x27;asdf&#x27;,&#x27;hello 打工人&#x27;));</span><br><span class=\"line\">x();</span><br><span class=\"line\"></span><br><span class=\"line\">————————————————</span><br><span class=\"line\">版权声明：本文为CSDN博主「wy勇敢的心」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class=\"line\">原文链接：https://blog.csdn.net/wangyun_gogo/article/details/109453414</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"51有效大括号（leetcode-20）\"><a href=\"#51有效大括号（leetcode-20）\" class=\"headerlink\" title=\"51有效大括号（leetcode 20）\"></a>51有效大括号（leetcode 20）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isValid = function(str)&#123;</span><br><span class=\"line\">   var map = &#123;</span><br><span class=\"line\">     &quot;&#123;&quot;:&quot;&#125;&quot;,</span><br><span class=\"line\">     &quot;[&quot;:&quot;]&quot;,</span><br><span class=\"line\">     &quot;(&quot;:&quot;)&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if(str.length % 2 === 1) return false;</span><br><span class=\"line\">   var res = [];</span><br><span class=\"line\">   for(var i = 0;i &lt; str.length;i++)&#123;</span><br><span class=\"line\">     if(map[str[i]])&#123;</span><br><span class=\"line\">       res.push(str[i]);</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">       var a = res[res.length-1];</span><br><span class=\"line\">       if(map[a] == str[i]) &#123;</span><br><span class=\"line\">         res.pop()</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">         return false;</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return res.length===0;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"52检索url参数\"><a href=\"#52检索url参数\" class=\"headerlink\" title=\"52检索url参数\"></a>52检索url参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function query() &#123;</span><br><span class=\"line\">      let url = window.location.search.split(&quot;?&quot;)[1];</span><br><span class=\"line\">      let params = url.split(&quot;&amp;&quot;);</span><br><span class=\"line\">      const param = &#123;&#125;;</span><br><span class=\"line\">      params.forEach((i) =&gt; &#123;</span><br><span class=\"line\">          let item = i.split(&quot;=&quot;);</span><br><span class=\"line\">          param[item[0]] = item[1];</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      console.log(param);</span><br><span class=\"line\">      return param;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"53大数相加\"><a href=\"#53大数相加\" class=\"headerlink\" title=\"53大数相加\"></a>53大数相加</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function bigSum(a, b) &#123;</span><br><span class=\"line\">        // 已 12345 和 678 为例</span><br><span class=\"line\">        // 我们需要先把他们转换为位数相同，不够补零，记住要统一加一位，为了两个最大的位数相加后可能需要进位</span><br><span class=\"line\">        // 12345 =&gt;  012345    678 =&gt; 000678</span><br><span class=\"line\">        // 然后让各自的个位个位相加，十位与十位相加   5 + 8 = 3  （1为进位） 4 + 7 + 1 = 2 （1） .....</span><br><span class=\"line\">        a = &#x27;0&#x27; + a</span><br><span class=\"line\">        b = &#x27;0&#x27; + b</span><br><span class=\"line\">        let aArr = a.split(&#x27;&#x27;)</span><br><span class=\"line\">        let bArr = b.split(&#x27;&#x27;)</span><br><span class=\"line\">        let carry = 0</span><br><span class=\"line\">        let res = []</span><br><span class=\"line\">        let length = Math.max(aArr.length, bArr.length)</span><br><span class=\"line\">        let distance = aArr.length - bArr.length</span><br><span class=\"line\">        if (distance &gt; 0) &#123;</span><br><span class=\"line\">            for (let i = 0; i &lt; distance; i++) &#123;</span><br><span class=\"line\">                bArr.unshift(&#x27;0&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for (let i = 0; i &lt; Math.abs(distance); i++) &#123;</span><br><span class=\"line\">                aArr.unshift(&#x27;0&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (let i = length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            let sum = Number(aArr[i]) + Number(bArr[i]) + Number(carry)</span><br><span class=\"line\">            carry = sum &gt;= 10 ? 1 : 0</span><br><span class=\"line\">            sum = sum &gt;= 10 ? parseInt(sum % 10) : sum</span><br><span class=\"line\">            res.unshift(sum)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res.join(&#x27;&#x27;).replace(/^0/, &#x27;&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(bigSum(&#x27;9007199254740993&#x27;, &#x27;1&#x27;))</span><br><span class=\"line\">// 注意： 传参时就需传入字符串，如果是数字类，在传参时就已经出现精度丢失</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.jianshu.com/p/c373943f0e9e</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"54-http协议\"><a href=\"#54-http协议\" class=\"headerlink\" title=\"54 http协议\"></a>54 http协议</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.http/1.0</span><br><span class=\"line\">   限制每次连接只处理一个请求，无状态：协议对于事务处理没有记忆能力。客户端向服务器请求服务时，只需传送请求方法和路径。HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</span><br><span class=\"line\">2.http/1.1</span><br><span class=\"line\">\t增加了持久连接的方法，在一个TCP连接上可以传输多个http请求，只要浏览器或者服务器没有明确断开，该TCP连接会一直保持。浏览器为每个域名最多维护6个TCP持久连接。</span><br><span class=\"line\">3.http/2.0</span><br><span class=\"line\">\t影响http/1.1效率的三个主要因素：TCP的满启动、多条TCP连接竞争带宽和队头堵塞。</span><br><span class=\"line\">\t引入多路复用机制：同一个连接并发处理多个请求。通过在协议栈中添加二进制分帧层来实现。能够实现请求的优先级、服务器推送、头部压缩等特性。</span><br><span class=\"line\">\t头部压缩：使用HPACK算法进行压缩。</span><br><span class=\"line\">\t服务器推送：页面请求资源a.css，接到服务器资源同时会返回a.js，存到缓存中，下次不用重复访问服务器。</span><br><span class=\"line\">4.https</span><br><span class=\"line\">HTTPS 在传输的过程中会涉及到三个密钥：</span><br><span class=\"line\">- 服务器端的公钥和私钥，用来进行非对称加密</span><br><span class=\"line\">- 客户端生成的随机密钥，用来进行对称加密</span><br><span class=\"line\">一个 HTTPS 请求实际上包含了两次 HTTP 传输，可以细分为 8 步。</span><br><span class=\"line\">1. 客户端向服务器发起 HTTPS 请求，连接到服务器的 443 端口</span><br><span class=\"line\">2. 服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。</span><br><span class=\"line\">3. 服务器将自己的公钥发送给客户端。</span><br><span class=\"line\">4. 客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么 HTTPS 传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为 client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS 中的第一次 HTTP 请求结束。</span><br><span class=\"line\">5. 客户端会发起 HTTPS 中的第二个 HTTP 请求，将加密之后的客户端密钥发送给服务器。</span><br><span class=\"line\">6. 服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。</span><br><span class=\"line\">7. 然后服务器将加密后的密文发送给客户端。</span><br><span class=\"line\">8. 客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样 HTTPS 中的第二个 HTTP 请求结束，整个 HTTPS 传输完成。</span><br></pre></td></tr></table></figure>"},{"title":"NPM指令","date":"2020-11-15T13:00:00.000Z","_content":"\n#### 一 npm 常用操作\n\n##### 1.查看npm版本\n\n```\nnpm -v\n```\n\n##### 2.查看当前电脑 IP 信息\n\n```\nipconfig\n```\n\n##### 3.npm全局安装\n\n```\n-g：--global 的简写  全局安装\nnpm install jquery -g\n```\n<!-- more -->\n##### 4.npm全局安装卸载\n\n```\nnpm uninstall jquery -g\n```\n\n##### 5.npm运行\n\n```\n npm start:npm run start 的简写\n```\n\n##### 6.npm本地安装-S\n\n```\nnpm i xx -S：npm install xx --save 的简写\n项目（运行时、发布到生产环境时）依赖；例：antd , element , react...\n安装包信息会写入 dependencies 中\n```\n\n##### 7.npm本地安装-D\n\n```\nnpm i xx -D：npm install xx --save-dev的简写\n工程构建（开发时、“打包”时）依赖 ；例：xxx-cli , less-loader , babel-loader...\n安装包信息写入 devDependencies 中\n```\n\n##### 7.   .npmrc文件\n\n```\nnpm config edit\n```\n\n\n\n#### 二 nrm\n\n##### 1.nrm安装\n\n```\n表示安装一个全局 nrm\nnpm i nrm -g\n```\n\n##### 2.nrm版本\n\n```\nnrm --version\n```\n\n##### 3.nrm检测镜像源地址\n\n```\n表示查看 nrm 镜像源地址网速\nnrm test\n```\n\n##### 4. nrm查看镜像源地址\n\n```\nnrm ls\n```\n\n##### 5.nrm切换镜像源\n\n```\n表示切换到 taobao 镜像源地址\nnrm use taobao\n```\n\n#### 三 vue脚手架 \n\n##### 1.全局安装vue脚手架\n\n```\nnpm i @vue/cli -g\n```\n\n##### 2.查看vue版本\n\n```\nvue --version\n```\n\n##### 3.全局安装yarn（vue创建项目可能需要yarn工具下载）\n\n```\nnpm i yarn -g\n```\n\n##### 4.创建vue项目\n\n```\nvue create 项目名称\n第一步 Manually select features 手动选择功能\n第二步 Linter / Formatter 勾掉\n      Babel,Choose Vue version 保留\n      Router,Vuex, CSS Pre-processors（Sass/SCSS(with node-sass)） 按需选择\n第三步 选择 2.x\n第四步 Use history mode for router? 是使用history模式/否使用哈希模式 Y\n第五步 选择 In package.json\n第六步 Save this as a preset for future projects? 是否保存设置 N\n```\n\n##### 5.进入项目文件夹\n\n```\ncd 文件名\n```\n\n##### 6.启动项目\n\n```\n默认 npm run serve\n```\n\n#### 四 下载路由\n\n```\nnpm i vue-router -S\n```\n\n#### 五 vueX\n\n##### 1.vueX下载\n\n```\nnpm i vuex -S\n```\n\n##### 2.持久化插件（本地存储）\n\n```\nnpm i vuex-persistedstate -S\n```\n\n#### 六 下载swiper\n\n```\nnpm i swiper@5.4.5 -S\n```\n\n#### 七 下载jquery\n\n```\nnpm i jquery -S\n```\n\n#### 八 下载axios\n\n```\nnpm i axios -S\n```\n\n#### 九 下载element-ui\n\n```\nnpm i element-ui -S\n```\n\n#### 十  Json-server(模拟服务器)\n\n##### 1.下载json-server\n\n```\n全局安装json-server\nnpm i json-server -g \n```\n\n##### 2.启动json文件\n\n```\n进入json所在的文件夹运行cmd\njson-server ./db.json\n```\n\n##### 3.编辑脚本到packjson文件里面启动json-server\n\n```\nscripts\n\tdev : json-server  文件地址   --port 3001   --host 192.168.8.74  --watch(json修改的时候自动重启)\n```\n\n#### 十一 mockjs  模拟数据\n\n```\n下载mockjs\nnpm i mockjs -S\n```\n\n#### 十二 创建package.json\n\n```\n创建package.json\nnpm init -y  \n```\n\n#### 十三 node-dev(每次修改文件，自动重启服务器)\n\n##### 1. 下载node-dev\n\n```\nnpm i node-dev -S\n```\n\n##### 2. 编辑启动命令到packjson文件里面\n\n```\n\"scripts\":{\n\t\"dev\" : \"node-dev server(服务文件名.js后缀可省略)\"(原来是\"node server\")\n}\n```\n\n##### 3.启动服务\n\n```\nnpm run dev\n```\n\n#### 十四 express(nodejs框架)\n\n##### 1. 下载express\n\n```\nnpm i express -S\n```\n\n##### 2. 下载express中间件（向req.body添加post请求参数，毫无用处，直接设置app.use(express.urlencoded());app.use(express.json());能达到一样效果，没用为啥要讲？）\n\n```\nnpm i body-parser -S\n```\n\n##### 3.  下载md5(密码加密)\n\n```\nnpm i md5 -S\n```\n\n##### 4. jsonwebtoken 插件(用户凭证token)    \n\n```\n下载jsonwebtoken 插件\nnpm i jsonwebtoken -S \n```\n\n##### 5. multer 插件(上传文件)\n\n```\nnpm i multer -S\n```\n\n#### 十五 express脚手架\n\n##### 1.下载express生成器\n\n```\n全局安装express生成器\nnpm i express-generator -g\n```\n\n##### 2.创建express脚手架\n\n```\nexpress 项目名\n```\n\n#### 十六 mongodb(非关系型数据库)\n\n##### 1. 添加全局环境\n\n```\n把C:\\Program Files\\MongoDB\\Server\\3.0\\bin添加到环境变量的path中\n```\n\n##### 2. 在C盘建data/db文件夹\n\n##### 3. 启动数据库\n\n```\nmongod(出现27017说明成功)\n```\n\n##### 3. 查看数据库\n\n```\nmongo(操作命令详见菜鸟MongoDB)\n1 show dbs 查看数据库\n2 use 数据库名 切换数据库，没有就创建\n3 db 进入数据库\n4 show collections 查看数据表\n5 db.数据表名字.drop() 删除数据表\n6 db.数据表名字.find() 查看数据表内容\n7 db.数据表名字.remove({条件}) 删除数据表指定内容\n```\n\n#### 十七 mongoose(在nodejs里操作mongodb数据库)\n\n```\n下载mongoose\nnpm i mongoose -S\n```\n\n#### 十八 下载富文本编辑器\n\n```\nnpm i wangeditor -S\n```\n\n#### 十九 webpack(打包工具 ,打包js,打包html,打包css,打包压缩图片)\n\n##### 1. 下载webpack\n\n```\n全局安装webpack\nnpm i webpack@4.32.2 webpack-cli@3.3.2 -g\n```\n\n##### 2. 本地安装webpack\n\n```\n本地安装webpack\nnpm i webpack@4.32.2 webpack-cli@3.3.2 -D\n```\n\n##### 2.  打包css(在js中require css文件)\n\n```\nnpm i style-loader css-loader -D\n```\n\n##### 3. 打包scss(在js中require scss文件)\n\n```\nnpm i sass-loader node-sass -D\n```\n\n##### 4.  HtmlWebpackPlugin(自动生成HTML文件index.html)\n\n```\nnpm install --save-dev html-webpack-plugin\n```\n\n##### 5. webpack-dev-server(webpack配置服务器)\n\n```\nnpm i webpack-dev-server -D\n```\n\n#### 二十 快捷键\n\n```\nvbc+tab键   --Vue快捷键\nrcc+tab键   --React快捷键\n```\n\n#### 二十一  react指令\n\n##### 1. 创建react项目(脚手架)\n\n```\n进入要创建项目的文件夹，执行\nnpx create-react-app 项目名\n```\n\n##### 2. 在react脚手架中使用scss\n\n```\nnpm i node-sass -S\n```\n\n##### 3. 在react脚手架中使用路由\n\n```\nnpm i react-router-dom -S\n```\n\n##### 4. 在react脚手架中使用redux\n\n```\n下载redux\nnpm  i redux -S\n使用redux中间件thunk(可以执行异步请求)\nnpm i redux-thunk -S\n使用redux中间件logger(可以打印日志)\nnpm i redux-logger -S\n```\n\n##### 5.  在react脚手架中使用react-redux\n\n```\n下载redux\nnpm  i redux -S\n下载react-redux\nnpm i react-redux -S\n```\n\n##### 6. 在react脚手架中使用Ant Design(UI框架)\n\n```\n下载Ant Design\nnpm i antd -S\n```\n\n#### 二十二 nuxt(vue的一种脚手架)\n\n##### 1. 创建nuxt项目\n\n```\nnpx create-nuxt-app 项目名\n```\n\n#### 二十三 anywhere\n\n```\n下载anywhere\nnpm i anywhere -g\nnpm i anywhere\n启动anywhere\nanywhere\n```\n\n#### 二十四 npm更改仓库源\n\n```\n云漾私服npm地址\nnpm config set registry http://10.0.60.5:8081/repository/npm-group/ 废弃\nnpm config set registry http://maven.00bang.cn:8081/repository/npm-group/\n改为淘宝镜像\nnpm config set registry http://registry.npm.taobao.org/\n改为npm官方地址\nnpm config set registry http://registry.npmjs.org\n```\n\n#### 二十五 工作\n\n```\n 切换开发分支\n git checkout master-branch-develop\n```\n\n#### 二十六 nvm\n\n```\nnvm 安装地址https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7\n(先卸载node，第一个目录为nvm安装位置，第二个为node安装位置)\nnvm install 13.0.1    安装node.js 13.0.1版本 会安装对应版本的npm\nnvm use 13.0.1        使用node.js 13.0.1版本\nnvm install 14.16.0    安装node.js 14.16.0版本 会安装对应版本的npm\nnvm use 14.16.0       使用node.js 14.16.0版本\n```\n\n#### 二十七 jsdoc\n\n```\n全局安装jsdoc\n%sudo npm i -g jsdoc \n生成jsdoc文件\n%jsdoc publisher/manager.js publisher/live.js \n```\n\n#### 二十八 md文档生成html\n\n```\n全局安装i5ting_toc\nsudo npm install i5ting_toc -g\n生成同级目录文档\n%i5ting_toc -f README.md  \n```\n\n#### 二十九 git配别名查看分支\n\n```\ngit config --global alias.lol 'log --oneline --decorate --graph --all' \n```\n\n#### 三十 thinkjs\n\n```\nnpm install -g think-cli\n安装完全局会有thinkjs命令\nthinkjs new 项目名       创建一个thinkjs脚手架\nthinkjs --help          查看thinkjs命令\n```\n\n#### 三十一 hexo\n\n```\nnpm install -g hexo-cli    安装hexo脚手架\nnpm init                   创建hexo项目\n进入项目hexo server         启动本地服务\nhexo new \"新文章\"           创建一篇新博文\nnpm install hexo-deployer-git --save   安装部署依赖\nhexo deploy                一键部署\n注：需要设置deploy:\n  type: git\n  repo: git@github.com:kuangxiaowang/kuangxiaowang.github.io.git\n  branch: main(必须是github仓库默认分支！！！)\n```\n\n","source":"_posts/NPM 指令.md","raw":"---\ntitle: NPM指令\ndate: 2020-11-15 21:00:00\ntags: \n      - 指令\n      - 学习\ncategories: 指令\n---\n\n#### 一 npm 常用操作\n\n##### 1.查看npm版本\n\n```\nnpm -v\n```\n\n##### 2.查看当前电脑 IP 信息\n\n```\nipconfig\n```\n\n##### 3.npm全局安装\n\n```\n-g：--global 的简写  全局安装\nnpm install jquery -g\n```\n<!-- more -->\n##### 4.npm全局安装卸载\n\n```\nnpm uninstall jquery -g\n```\n\n##### 5.npm运行\n\n```\n npm start:npm run start 的简写\n```\n\n##### 6.npm本地安装-S\n\n```\nnpm i xx -S：npm install xx --save 的简写\n项目（运行时、发布到生产环境时）依赖；例：antd , element , react...\n安装包信息会写入 dependencies 中\n```\n\n##### 7.npm本地安装-D\n\n```\nnpm i xx -D：npm install xx --save-dev的简写\n工程构建（开发时、“打包”时）依赖 ；例：xxx-cli , less-loader , babel-loader...\n安装包信息写入 devDependencies 中\n```\n\n##### 7.   .npmrc文件\n\n```\nnpm config edit\n```\n\n\n\n#### 二 nrm\n\n##### 1.nrm安装\n\n```\n表示安装一个全局 nrm\nnpm i nrm -g\n```\n\n##### 2.nrm版本\n\n```\nnrm --version\n```\n\n##### 3.nrm检测镜像源地址\n\n```\n表示查看 nrm 镜像源地址网速\nnrm test\n```\n\n##### 4. nrm查看镜像源地址\n\n```\nnrm ls\n```\n\n##### 5.nrm切换镜像源\n\n```\n表示切换到 taobao 镜像源地址\nnrm use taobao\n```\n\n#### 三 vue脚手架 \n\n##### 1.全局安装vue脚手架\n\n```\nnpm i @vue/cli -g\n```\n\n##### 2.查看vue版本\n\n```\nvue --version\n```\n\n##### 3.全局安装yarn（vue创建项目可能需要yarn工具下载）\n\n```\nnpm i yarn -g\n```\n\n##### 4.创建vue项目\n\n```\nvue create 项目名称\n第一步 Manually select features 手动选择功能\n第二步 Linter / Formatter 勾掉\n      Babel,Choose Vue version 保留\n      Router,Vuex, CSS Pre-processors（Sass/SCSS(with node-sass)） 按需选择\n第三步 选择 2.x\n第四步 Use history mode for router? 是使用history模式/否使用哈希模式 Y\n第五步 选择 In package.json\n第六步 Save this as a preset for future projects? 是否保存设置 N\n```\n\n##### 5.进入项目文件夹\n\n```\ncd 文件名\n```\n\n##### 6.启动项目\n\n```\n默认 npm run serve\n```\n\n#### 四 下载路由\n\n```\nnpm i vue-router -S\n```\n\n#### 五 vueX\n\n##### 1.vueX下载\n\n```\nnpm i vuex -S\n```\n\n##### 2.持久化插件（本地存储）\n\n```\nnpm i vuex-persistedstate -S\n```\n\n#### 六 下载swiper\n\n```\nnpm i swiper@5.4.5 -S\n```\n\n#### 七 下载jquery\n\n```\nnpm i jquery -S\n```\n\n#### 八 下载axios\n\n```\nnpm i axios -S\n```\n\n#### 九 下载element-ui\n\n```\nnpm i element-ui -S\n```\n\n#### 十  Json-server(模拟服务器)\n\n##### 1.下载json-server\n\n```\n全局安装json-server\nnpm i json-server -g \n```\n\n##### 2.启动json文件\n\n```\n进入json所在的文件夹运行cmd\njson-server ./db.json\n```\n\n##### 3.编辑脚本到packjson文件里面启动json-server\n\n```\nscripts\n\tdev : json-server  文件地址   --port 3001   --host 192.168.8.74  --watch(json修改的时候自动重启)\n```\n\n#### 十一 mockjs  模拟数据\n\n```\n下载mockjs\nnpm i mockjs -S\n```\n\n#### 十二 创建package.json\n\n```\n创建package.json\nnpm init -y  \n```\n\n#### 十三 node-dev(每次修改文件，自动重启服务器)\n\n##### 1. 下载node-dev\n\n```\nnpm i node-dev -S\n```\n\n##### 2. 编辑启动命令到packjson文件里面\n\n```\n\"scripts\":{\n\t\"dev\" : \"node-dev server(服务文件名.js后缀可省略)\"(原来是\"node server\")\n}\n```\n\n##### 3.启动服务\n\n```\nnpm run dev\n```\n\n#### 十四 express(nodejs框架)\n\n##### 1. 下载express\n\n```\nnpm i express -S\n```\n\n##### 2. 下载express中间件（向req.body添加post请求参数，毫无用处，直接设置app.use(express.urlencoded());app.use(express.json());能达到一样效果，没用为啥要讲？）\n\n```\nnpm i body-parser -S\n```\n\n##### 3.  下载md5(密码加密)\n\n```\nnpm i md5 -S\n```\n\n##### 4. jsonwebtoken 插件(用户凭证token)    \n\n```\n下载jsonwebtoken 插件\nnpm i jsonwebtoken -S \n```\n\n##### 5. multer 插件(上传文件)\n\n```\nnpm i multer -S\n```\n\n#### 十五 express脚手架\n\n##### 1.下载express生成器\n\n```\n全局安装express生成器\nnpm i express-generator -g\n```\n\n##### 2.创建express脚手架\n\n```\nexpress 项目名\n```\n\n#### 十六 mongodb(非关系型数据库)\n\n##### 1. 添加全局环境\n\n```\n把C:\\Program Files\\MongoDB\\Server\\3.0\\bin添加到环境变量的path中\n```\n\n##### 2. 在C盘建data/db文件夹\n\n##### 3. 启动数据库\n\n```\nmongod(出现27017说明成功)\n```\n\n##### 3. 查看数据库\n\n```\nmongo(操作命令详见菜鸟MongoDB)\n1 show dbs 查看数据库\n2 use 数据库名 切换数据库，没有就创建\n3 db 进入数据库\n4 show collections 查看数据表\n5 db.数据表名字.drop() 删除数据表\n6 db.数据表名字.find() 查看数据表内容\n7 db.数据表名字.remove({条件}) 删除数据表指定内容\n```\n\n#### 十七 mongoose(在nodejs里操作mongodb数据库)\n\n```\n下载mongoose\nnpm i mongoose -S\n```\n\n#### 十八 下载富文本编辑器\n\n```\nnpm i wangeditor -S\n```\n\n#### 十九 webpack(打包工具 ,打包js,打包html,打包css,打包压缩图片)\n\n##### 1. 下载webpack\n\n```\n全局安装webpack\nnpm i webpack@4.32.2 webpack-cli@3.3.2 -g\n```\n\n##### 2. 本地安装webpack\n\n```\n本地安装webpack\nnpm i webpack@4.32.2 webpack-cli@3.3.2 -D\n```\n\n##### 2.  打包css(在js中require css文件)\n\n```\nnpm i style-loader css-loader -D\n```\n\n##### 3. 打包scss(在js中require scss文件)\n\n```\nnpm i sass-loader node-sass -D\n```\n\n##### 4.  HtmlWebpackPlugin(自动生成HTML文件index.html)\n\n```\nnpm install --save-dev html-webpack-plugin\n```\n\n##### 5. webpack-dev-server(webpack配置服务器)\n\n```\nnpm i webpack-dev-server -D\n```\n\n#### 二十 快捷键\n\n```\nvbc+tab键   --Vue快捷键\nrcc+tab键   --React快捷键\n```\n\n#### 二十一  react指令\n\n##### 1. 创建react项目(脚手架)\n\n```\n进入要创建项目的文件夹，执行\nnpx create-react-app 项目名\n```\n\n##### 2. 在react脚手架中使用scss\n\n```\nnpm i node-sass -S\n```\n\n##### 3. 在react脚手架中使用路由\n\n```\nnpm i react-router-dom -S\n```\n\n##### 4. 在react脚手架中使用redux\n\n```\n下载redux\nnpm  i redux -S\n使用redux中间件thunk(可以执行异步请求)\nnpm i redux-thunk -S\n使用redux中间件logger(可以打印日志)\nnpm i redux-logger -S\n```\n\n##### 5.  在react脚手架中使用react-redux\n\n```\n下载redux\nnpm  i redux -S\n下载react-redux\nnpm i react-redux -S\n```\n\n##### 6. 在react脚手架中使用Ant Design(UI框架)\n\n```\n下载Ant Design\nnpm i antd -S\n```\n\n#### 二十二 nuxt(vue的一种脚手架)\n\n##### 1. 创建nuxt项目\n\n```\nnpx create-nuxt-app 项目名\n```\n\n#### 二十三 anywhere\n\n```\n下载anywhere\nnpm i anywhere -g\nnpm i anywhere\n启动anywhere\nanywhere\n```\n\n#### 二十四 npm更改仓库源\n\n```\n云漾私服npm地址\nnpm config set registry http://10.0.60.5:8081/repository/npm-group/ 废弃\nnpm config set registry http://maven.00bang.cn:8081/repository/npm-group/\n改为淘宝镜像\nnpm config set registry http://registry.npm.taobao.org/\n改为npm官方地址\nnpm config set registry http://registry.npmjs.org\n```\n\n#### 二十五 工作\n\n```\n 切换开发分支\n git checkout master-branch-develop\n```\n\n#### 二十六 nvm\n\n```\nnvm 安装地址https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7\n(先卸载node，第一个目录为nvm安装位置，第二个为node安装位置)\nnvm install 13.0.1    安装node.js 13.0.1版本 会安装对应版本的npm\nnvm use 13.0.1        使用node.js 13.0.1版本\nnvm install 14.16.0    安装node.js 14.16.0版本 会安装对应版本的npm\nnvm use 14.16.0       使用node.js 14.16.0版本\n```\n\n#### 二十七 jsdoc\n\n```\n全局安装jsdoc\n%sudo npm i -g jsdoc \n生成jsdoc文件\n%jsdoc publisher/manager.js publisher/live.js \n```\n\n#### 二十八 md文档生成html\n\n```\n全局安装i5ting_toc\nsudo npm install i5ting_toc -g\n生成同级目录文档\n%i5ting_toc -f README.md  \n```\n\n#### 二十九 git配别名查看分支\n\n```\ngit config --global alias.lol 'log --oneline --decorate --graph --all' \n```\n\n#### 三十 thinkjs\n\n```\nnpm install -g think-cli\n安装完全局会有thinkjs命令\nthinkjs new 项目名       创建一个thinkjs脚手架\nthinkjs --help          查看thinkjs命令\n```\n\n#### 三十一 hexo\n\n```\nnpm install -g hexo-cli    安装hexo脚手架\nnpm init                   创建hexo项目\n进入项目hexo server         启动本地服务\nhexo new \"新文章\"           创建一篇新博文\nnpm install hexo-deployer-git --save   安装部署依赖\nhexo deploy                一键部署\n注：需要设置deploy:\n  type: git\n  repo: git@github.com:kuangxiaowang/kuangxiaowang.github.io.git\n  branch: main(必须是github仓库默认分支！！！)\n```\n\n","slug":"NPM 指令","published":1,"updated":"2022-03-30T02:20:24.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7pol4000318vq9g244882","content":"<h4 id=\"一-npm-常用操作\"><a href=\"#一-npm-常用操作\" class=\"headerlink\" title=\"一 npm 常用操作\"></a>一 npm 常用操作</h4><h5 id=\"1-查看npm版本\"><a href=\"#1-查看npm版本\" class=\"headerlink\" title=\"1.查看npm版本\"></a>1.查看npm版本</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-查看当前电脑-IP-信息\"><a href=\"#2-查看当前电脑-IP-信息\" class=\"headerlink\" title=\"2.查看当前电脑 IP 信息\"></a>2.查看当前电脑 IP 信息</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-npm全局安装\"><a href=\"#3-npm全局安装\" class=\"headerlink\" title=\"3.npm全局安装\"></a>3.npm全局安装</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-g：--global 的简写  全局安装</span><br><span class=\"line\">npm install jquery -g</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h5 id=\"4-npm全局安装卸载\"><a href=\"#4-npm全局安装卸载\" class=\"headerlink\" title=\"4.npm全局安装卸载\"></a>4.npm全局安装卸载</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall jquery -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-npm运行\"><a href=\"#5-npm运行\" class=\"headerlink\" title=\"5.npm运行\"></a>5.npm运行</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start:npm run start 的简写</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-npm本地安装-S\"><a href=\"#6-npm本地安装-S\" class=\"headerlink\" title=\"6.npm本地安装-S\"></a>6.npm本地安装-S</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i xx -S：npm install xx --save 的简写</span><br><span class=\"line\">项目（运行时、发布到生产环境时）依赖；例：antd , element , react...</span><br><span class=\"line\">安装包信息会写入 dependencies 中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-npm本地安装-D\"><a href=\"#7-npm本地安装-D\" class=\"headerlink\" title=\"7.npm本地安装-D\"></a>7.npm本地安装-D</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i xx -D：npm install xx --save-dev的简写</span><br><span class=\"line\">工程构建（开发时、“打包”时）依赖 ；例：xxx-cli , less-loader , babel-loader...</span><br><span class=\"line\">安装包信息写入 devDependencies 中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-npmrc文件\"><a href=\"#7-npmrc文件\" class=\"headerlink\" title=\"7.   .npmrc文件\"></a>7.   .npmrc文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config edit</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"二-nrm\"><a href=\"#二-nrm\" class=\"headerlink\" title=\"二 nrm\"></a>二 nrm</h4><h5 id=\"1-nrm安装\"><a href=\"#1-nrm安装\" class=\"headerlink\" title=\"1.nrm安装\"></a>1.nrm安装</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示安装一个全局 nrm</span><br><span class=\"line\">npm i nrm -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-nrm版本\"><a href=\"#2-nrm版本\" class=\"headerlink\" title=\"2.nrm版本\"></a>2.nrm版本</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm --version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-nrm检测镜像源地址\"><a href=\"#3-nrm检测镜像源地址\" class=\"headerlink\" title=\"3.nrm检测镜像源地址\"></a>3.nrm检测镜像源地址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示查看 nrm 镜像源地址网速</span><br><span class=\"line\">nrm test</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-nrm查看镜像源地址\"><a href=\"#4-nrm查看镜像源地址\" class=\"headerlink\" title=\"4. nrm查看镜像源地址\"></a>4. nrm查看镜像源地址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-nrm切换镜像源\"><a href=\"#5-nrm切换镜像源\" class=\"headerlink\" title=\"5.nrm切换镜像源\"></a>5.nrm切换镜像源</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示切换到 taobao 镜像源地址</span><br><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三-vue脚手架\"><a href=\"#三-vue脚手架\" class=\"headerlink\" title=\"三 vue脚手架\"></a>三 vue脚手架</h4><h5 id=\"1-全局安装vue脚手架\"><a href=\"#1-全局安装vue脚手架\" class=\"headerlink\" title=\"1.全局安装vue脚手架\"></a>1.全局安装vue脚手架</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @vue/cli -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-查看vue版本\"><a href=\"#2-查看vue版本\" class=\"headerlink\" title=\"2.查看vue版本\"></a>2.查看vue版本</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue --version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-全局安装yarn（vue创建项目可能需要yarn工具下载）\"><a href=\"#3-全局安装yarn（vue创建项目可能需要yarn工具下载）\" class=\"headerlink\" title=\"3.全局安装yarn（vue创建项目可能需要yarn工具下载）\"></a>3.全局安装yarn（vue创建项目可能需要yarn工具下载）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i yarn -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-创建vue项目\"><a href=\"#4-创建vue项目\" class=\"headerlink\" title=\"4.创建vue项目\"></a>4.创建vue项目</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create 项目名称</span><br><span class=\"line\">第一步 Manually select features 手动选择功能</span><br><span class=\"line\">第二步 Linter / Formatter 勾掉</span><br><span class=\"line\">      Babel,Choose Vue version 保留</span><br><span class=\"line\">      Router,Vuex, CSS Pre-processors（Sass/SCSS(with node-sass)） 按需选择</span><br><span class=\"line\">第三步 选择 2.x</span><br><span class=\"line\">第四步 Use history mode for router? 是使用history模式/否使用哈希模式 Y</span><br><span class=\"line\">第五步 选择 In package.json</span><br><span class=\"line\">第六步 Save this as a preset for future projects? 是否保存设置 N</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-进入项目文件夹\"><a href=\"#5-进入项目文件夹\" class=\"headerlink\" title=\"5.进入项目文件夹\"></a>5.进入项目文件夹</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 文件名</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-启动项目\"><a href=\"#6-启动项目\" class=\"headerlink\" title=\"6.启动项目\"></a>6.启动项目</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认 npm run serve</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-下载路由\"><a href=\"#四-下载路由\" class=\"headerlink\" title=\"四 下载路由\"></a>四 下载路由</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue-router -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五-vueX\"><a href=\"#五-vueX\" class=\"headerlink\" title=\"五 vueX\"></a>五 vueX</h4><h5 id=\"1-vueX下载\"><a href=\"#1-vueX下载\" class=\"headerlink\" title=\"1.vueX下载\"></a>1.vueX下载</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuex -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-持久化插件（本地存储）\"><a href=\"#2-持久化插件（本地存储）\" class=\"headerlink\" title=\"2.持久化插件（本地存储）\"></a>2.持久化插件（本地存储）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuex-persistedstate -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六-下载swiper\"><a href=\"#六-下载swiper\" class=\"headerlink\" title=\"六 下载swiper\"></a>六 下载swiper</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i swiper@5.4.5 -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七-下载jquery\"><a href=\"#七-下载jquery\" class=\"headerlink\" title=\"七 下载jquery\"></a>七 下载jquery</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"八-下载axios\"><a href=\"#八-下载axios\" class=\"headerlink\" title=\"八 下载axios\"></a>八 下载axios</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i axios -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"九-下载element-ui\"><a href=\"#九-下载element-ui\" class=\"headerlink\" title=\"九 下载element-ui\"></a>九 下载element-ui</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i element-ui -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十-Json-server-模拟服务器\"><a href=\"#十-Json-server-模拟服务器\" class=\"headerlink\" title=\"十  Json-server(模拟服务器)\"></a>十  Json-server(模拟服务器)</h4><h5 id=\"1-下载json-server\"><a href=\"#1-下载json-server\" class=\"headerlink\" title=\"1.下载json-server\"></a>1.下载json-server</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装json-server</span><br><span class=\"line\">npm i json-server -g </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-启动json文件\"><a href=\"#2-启动json文件\" class=\"headerlink\" title=\"2.启动json文件\"></a>2.启动json文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入json所在的文件夹运行cmd</span><br><span class=\"line\">json-server ./db.json</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-编辑脚本到packjson文件里面启动json-server\"><a href=\"#3-编辑脚本到packjson文件里面启动json-server\" class=\"headerlink\" title=\"3.编辑脚本到packjson文件里面启动json-server\"></a>3.编辑脚本到packjson文件里面启动json-server</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts</span><br><span class=\"line\">\tdev : json-server  文件地址   --port 3001   --host 192.168.8.74  --watch(json修改的时候自动重启)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十一-mockjs-模拟数据\"><a href=\"#十一-mockjs-模拟数据\" class=\"headerlink\" title=\"十一 mockjs  模拟数据\"></a>十一 mockjs  模拟数据</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载mockjs</span><br><span class=\"line\">npm i mockjs -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十二-创建package-json\"><a href=\"#十二-创建package-json\" class=\"headerlink\" title=\"十二 创建package.json\"></a>十二 创建package.json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建package.json</span><br><span class=\"line\">npm init -y  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十三-node-dev-每次修改文件，自动重启服务器\"><a href=\"#十三-node-dev-每次修改文件，自动重启服务器\" class=\"headerlink\" title=\"十三 node-dev(每次修改文件，自动重启服务器)\"></a>十三 node-dev(每次修改文件，自动重启服务器)</h4><h5 id=\"1-下载node-dev\"><a href=\"#1-下载node-dev\" class=\"headerlink\" title=\"1. 下载node-dev\"></a>1. 下载node-dev</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-dev -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-编辑启动命令到packjson文件里面\"><a href=\"#2-编辑启动命令到packjson文件里面\" class=\"headerlink\" title=\"2. 编辑启动命令到packjson文件里面\"></a>2. 编辑启动命令到packjson文件里面</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;:&#123;</span><br><span class=\"line\">\t&quot;dev&quot; : &quot;node-dev server(服务文件名.js后缀可省略)&quot;(原来是&quot;node server&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-启动服务\"><a href=\"#3-启动服务\" class=\"headerlink\" title=\"3.启动服务\"></a>3.启动服务</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十四-express-nodejs框架\"><a href=\"#十四-express-nodejs框架\" class=\"headerlink\" title=\"十四 express(nodejs框架)\"></a>十四 express(nodejs框架)</h4><h5 id=\"1-下载express\"><a href=\"#1-下载express\" class=\"headerlink\" title=\"1. 下载express\"></a>1. 下载express</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-下载express中间件（向req-body添加post请求参数，毫无用处，直接设置app-use-express-urlencoded-app-use-express-json-能达到一样效果，没用为啥要讲？）\"><a href=\"#2-下载express中间件（向req-body添加post请求参数，毫无用处，直接设置app-use-express-urlencoded-app-use-express-json-能达到一样效果，没用为啥要讲？）\" class=\"headerlink\" title=\"2. 下载express中间件（向req.body添加post请求参数，毫无用处，直接设置app.use(express.urlencoded());app.use(express.json());能达到一样效果，没用为啥要讲？）\"></a>2. 下载express中间件（向req.body添加post请求参数，毫无用处，直接设置app.use(express.urlencoded());app.use(express.json());能达到一样效果，没用为啥要讲？）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i body-parser -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-下载md5-密码加密\"><a href=\"#3-下载md5-密码加密\" class=\"headerlink\" title=\"3.  下载md5(密码加密)\"></a>3.  下载md5(密码加密)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i md5 -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-jsonwebtoken-插件-用户凭证token\"><a href=\"#4-jsonwebtoken-插件-用户凭证token\" class=\"headerlink\" title=\"4. jsonwebtoken 插件(用户凭证token)\"></a>4. jsonwebtoken 插件(用户凭证token)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载jsonwebtoken 插件</span><br><span class=\"line\">npm i jsonwebtoken -S </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-multer-插件-上传文件\"><a href=\"#5-multer-插件-上传文件\" class=\"headerlink\" title=\"5. multer 插件(上传文件)\"></a>5. multer 插件(上传文件)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i multer -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十五-express脚手架\"><a href=\"#十五-express脚手架\" class=\"headerlink\" title=\"十五 express脚手架\"></a>十五 express脚手架</h4><h5 id=\"1-下载express生成器\"><a href=\"#1-下载express生成器\" class=\"headerlink\" title=\"1.下载express生成器\"></a>1.下载express生成器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装express生成器</span><br><span class=\"line\">npm i express-generator -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建express脚手架\"><a href=\"#2-创建express脚手架\" class=\"headerlink\" title=\"2.创建express脚手架\"></a>2.创建express脚手架</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express 项目名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十六-mongodb-非关系型数据库\"><a href=\"#十六-mongodb-非关系型数据库\" class=\"headerlink\" title=\"十六 mongodb(非关系型数据库)\"></a>十六 mongodb(非关系型数据库)</h4><h5 id=\"1-添加全局环境\"><a href=\"#1-添加全局环境\" class=\"headerlink\" title=\"1. 添加全局环境\"></a>1. 添加全局环境</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把C:\\Program Files\\MongoDB\\Server\\3.0\\bin添加到环境变量的path中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-在C盘建data-db文件夹\"><a href=\"#2-在C盘建data-db文件夹\" class=\"headerlink\" title=\"2. 在C盘建data/db文件夹\"></a>2. 在C盘建data/db文件夹</h5><h5 id=\"3-启动数据库\"><a href=\"#3-启动数据库\" class=\"headerlink\" title=\"3. 启动数据库\"></a>3. 启动数据库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod(出现27017说明成功)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-查看数据库\"><a href=\"#3-查看数据库\" class=\"headerlink\" title=\"3. 查看数据库\"></a>3. 查看数据库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo(操作命令详见菜鸟MongoDB)</span><br><span class=\"line\">1 show dbs 查看数据库</span><br><span class=\"line\">2 use 数据库名 切换数据库，没有就创建</span><br><span class=\"line\">3 db 进入数据库</span><br><span class=\"line\">4 show collections 查看数据表</span><br><span class=\"line\">5 db.数据表名字.drop() 删除数据表</span><br><span class=\"line\">6 db.数据表名字.find() 查看数据表内容</span><br><span class=\"line\">7 db.数据表名字.remove(&#123;条件&#125;) 删除数据表指定内容</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十七-mongoose-在nodejs里操作mongodb数据库\"><a href=\"#十七-mongoose-在nodejs里操作mongodb数据库\" class=\"headerlink\" title=\"十七 mongoose(在nodejs里操作mongodb数据库)\"></a>十七 mongoose(在nodejs里操作mongodb数据库)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载mongoose</span><br><span class=\"line\">npm i mongoose -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十八-下载富文本编辑器\"><a href=\"#十八-下载富文本编辑器\" class=\"headerlink\" title=\"十八 下载富文本编辑器\"></a>十八 下载富文本编辑器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i wangeditor -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十九-webpack-打包工具-打包js-打包html-打包css-打包压缩图片\"><a href=\"#十九-webpack-打包工具-打包js-打包html-打包css-打包压缩图片\" class=\"headerlink\" title=\"十九 webpack(打包工具 ,打包js,打包html,打包css,打包压缩图片)\"></a>十九 webpack(打包工具 ,打包js,打包html,打包css,打包压缩图片)</h4><h5 id=\"1-下载webpack\"><a href=\"#1-下载webpack\" class=\"headerlink\" title=\"1. 下载webpack\"></a>1. 下载webpack</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装webpack</span><br><span class=\"line\">npm i webpack@4.32.2 webpack-cli@3.3.2 -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-本地安装webpack\"><a href=\"#2-本地安装webpack\" class=\"headerlink\" title=\"2. 本地安装webpack\"></a>2. 本地安装webpack</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地安装webpack</span><br><span class=\"line\">npm i webpack@4.32.2 webpack-cli@3.3.2 -D</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-打包css-在js中require-css文件\"><a href=\"#2-打包css-在js中require-css文件\" class=\"headerlink\" title=\"2.  打包css(在js中require css文件)\"></a>2.  打包css(在js中require css文件)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-打包scss-在js中require-scss文件\"><a href=\"#3-打包scss-在js中require-scss文件\" class=\"headerlink\" title=\"3. 打包scss(在js中require scss文件)\"></a>3. 打包scss(在js中require scss文件)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sass-loader node-sass -D</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-HtmlWebpackPlugin-自动生成HTML文件index-html\"><a href=\"#4-HtmlWebpackPlugin-自动生成HTML文件index-html\" class=\"headerlink\" title=\"4.  HtmlWebpackPlugin(自动生成HTML文件index.html)\"></a>4.  HtmlWebpackPlugin(自动生成HTML文件index.html)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-webpack-dev-server-webpack配置服务器\"><a href=\"#5-webpack-dev-server-webpack配置服务器\" class=\"headerlink\" title=\"5. webpack-dev-server(webpack配置服务器)\"></a>5. webpack-dev-server(webpack配置服务器)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十-快捷键\"><a href=\"#二十-快捷键\" class=\"headerlink\" title=\"二十 快捷键\"></a>二十 快捷键</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vbc+tab键   --Vue快捷键</span><br><span class=\"line\">rcc+tab键   --React快捷键</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十一-react指令\"><a href=\"#二十一-react指令\" class=\"headerlink\" title=\"二十一  react指令\"></a>二十一  react指令</h4><h5 id=\"1-创建react项目-脚手架\"><a href=\"#1-创建react项目-脚手架\" class=\"headerlink\" title=\"1. 创建react项目(脚手架)\"></a>1. 创建react项目(脚手架)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入要创建项目的文件夹，执行</span><br><span class=\"line\">npx create-react-app 项目名</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-在react脚手架中使用scss\"><a href=\"#2-在react脚手架中使用scss\" class=\"headerlink\" title=\"2. 在react脚手架中使用scss\"></a>2. 在react脚手架中使用scss</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-sass -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-在react脚手架中使用路由\"><a href=\"#3-在react脚手架中使用路由\" class=\"headerlink\" title=\"3. 在react脚手架中使用路由\"></a>3. 在react脚手架中使用路由</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-router-dom -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-在react脚手架中使用redux\"><a href=\"#4-在react脚手架中使用redux\" class=\"headerlink\" title=\"4. 在react脚手架中使用redux\"></a>4. 在react脚手架中使用redux</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载redux</span><br><span class=\"line\">npm  i redux -S</span><br><span class=\"line\">使用redux中间件thunk(可以执行异步请求)</span><br><span class=\"line\">npm i redux-thunk -S</span><br><span class=\"line\">使用redux中间件logger(可以打印日志)</span><br><span class=\"line\">npm i redux-logger -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-在react脚手架中使用react-redux\"><a href=\"#5-在react脚手架中使用react-redux\" class=\"headerlink\" title=\"5.  在react脚手架中使用react-redux\"></a>5.  在react脚手架中使用react-redux</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载redux</span><br><span class=\"line\">npm  i redux -S</span><br><span class=\"line\">下载react-redux</span><br><span class=\"line\">npm i react-redux -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-在react脚手架中使用Ant-Design-UI框架\"><a href=\"#6-在react脚手架中使用Ant-Design-UI框架\" class=\"headerlink\" title=\"6. 在react脚手架中使用Ant Design(UI框架)\"></a>6. 在react脚手架中使用Ant Design(UI框架)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载Ant Design</span><br><span class=\"line\">npm i antd -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十二-nuxt-vue的一种脚手架\"><a href=\"#二十二-nuxt-vue的一种脚手架\" class=\"headerlink\" title=\"二十二 nuxt(vue的一种脚手架)\"></a>二十二 nuxt(vue的一种脚手架)</h4><h5 id=\"1-创建nuxt项目\"><a href=\"#1-创建nuxt项目\" class=\"headerlink\" title=\"1. 创建nuxt项目\"></a>1. 创建nuxt项目</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-nuxt-app 项目名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十三-anywhere\"><a href=\"#二十三-anywhere\" class=\"headerlink\" title=\"二十三 anywhere\"></a>二十三 anywhere</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载anywhere</span><br><span class=\"line\">npm i anywhere -g</span><br><span class=\"line\">npm i anywhere</span><br><span class=\"line\">启动anywhere</span><br><span class=\"line\">anywhere</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十四-npm更改仓库源\"><a href=\"#二十四-npm更改仓库源\" class=\"headerlink\" title=\"二十四 npm更改仓库源\"></a>二十四 npm更改仓库源</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云漾私服npm地址</span><br><span class=\"line\">npm config set registry http://10.0.60.5:8081/repository/npm-group/ 废弃</span><br><span class=\"line\">npm config set registry http://maven.00bang.cn:8081/repository/npm-group/</span><br><span class=\"line\">改为淘宝镜像</span><br><span class=\"line\">npm config set registry http://registry.npm.taobao.org/</span><br><span class=\"line\">改为npm官方地址</span><br><span class=\"line\">npm config set registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十五-工作\"><a href=\"#二十五-工作\" class=\"headerlink\" title=\"二十五 工作\"></a>二十五 工作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">切换开发分支</span><br><span class=\"line\">git checkout master-branch-develop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十六-nvm\"><a href=\"#二十六-nvm\" class=\"headerlink\" title=\"二十六 nvm\"></a>二十六 nvm</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm 安装地址https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7</span><br><span class=\"line\">(先卸载node，第一个目录为nvm安装位置，第二个为node安装位置)</span><br><span class=\"line\">nvm install 13.0.1    安装node.js 13.0.1版本 会安装对应版本的npm</span><br><span class=\"line\">nvm use 13.0.1        使用node.js 13.0.1版本</span><br><span class=\"line\">nvm install 14.16.0    安装node.js 14.16.0版本 会安装对应版本的npm</span><br><span class=\"line\">nvm use 14.16.0       使用node.js 14.16.0版本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十七-jsdoc\"><a href=\"#二十七-jsdoc\" class=\"headerlink\" title=\"二十七 jsdoc\"></a>二十七 jsdoc</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装jsdoc</span><br><span class=\"line\">%sudo npm i -g jsdoc </span><br><span class=\"line\">生成jsdoc文件</span><br><span class=\"line\">%jsdoc publisher/manager.js publisher/live.js </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十八-md文档生成html\"><a href=\"#二十八-md文档生成html\" class=\"headerlink\" title=\"二十八 md文档生成html\"></a>二十八 md文档生成html</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装i5ting_toc</span><br><span class=\"line\">sudo npm install i5ting_toc -g</span><br><span class=\"line\">生成同级目录文档</span><br><span class=\"line\">%i5ting_toc -f README.md  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十九-git配别名查看分支\"><a href=\"#二十九-git配别名查看分支\" class=\"headerlink\" title=\"二十九 git配别名查看分支\"></a>二十九 git配别名查看分支</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lol &#x27;log --oneline --decorate --graph --all&#x27; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三十-thinkjs\"><a href=\"#三十-thinkjs\" class=\"headerlink\" title=\"三十 thinkjs\"></a>三十 thinkjs</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g think-cli</span><br><span class=\"line\">安装完全局会有thinkjs命令</span><br><span class=\"line\">thinkjs new 项目名       创建一个thinkjs脚手架</span><br><span class=\"line\">thinkjs --help          查看thinkjs命令</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三十一-hexo\"><a href=\"#三十一-hexo\" class=\"headerlink\" title=\"三十一 hexo\"></a>三十一 hexo</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli    安装hexo脚手架</span><br><span class=\"line\">npm init                   创建hexo项目</span><br><span class=\"line\">进入项目hexo server         启动本地服务</span><br><span class=\"line\">hexo new &quot;新文章&quot;           创建一篇新博文</span><br><span class=\"line\">npm install hexo-deployer-git --save   安装部署依赖</span><br><span class=\"line\">hexo deploy                一键部署</span><br><span class=\"line\">注：需要设置deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:kuangxiaowang/kuangxiaowang.github.io.git</span><br><span class=\"line\">  branch: main(必须是github仓库默认分支！！！)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h4 id=\"一-npm-常用操作\"><a href=\"#一-npm-常用操作\" class=\"headerlink\" title=\"一 npm 常用操作\"></a>一 npm 常用操作</h4><h5 id=\"1-查看npm版本\"><a href=\"#1-查看npm版本\" class=\"headerlink\" title=\"1.查看npm版本\"></a>1.查看npm版本</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-查看当前电脑-IP-信息\"><a href=\"#2-查看当前电脑-IP-信息\" class=\"headerlink\" title=\"2.查看当前电脑 IP 信息\"></a>2.查看当前电脑 IP 信息</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-npm全局安装\"><a href=\"#3-npm全局安装\" class=\"headerlink\" title=\"3.npm全局安装\"></a>3.npm全局安装</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-g：--global 的简写  全局安装</span><br><span class=\"line\">npm install jquery -g</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"4-npm全局安装卸载\"><a href=\"#4-npm全局安装卸载\" class=\"headerlink\" title=\"4.npm全局安装卸载\"></a>4.npm全局安装卸载</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall jquery -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-npm运行\"><a href=\"#5-npm运行\" class=\"headerlink\" title=\"5.npm运行\"></a>5.npm运行</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start:npm run start 的简写</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-npm本地安装-S\"><a href=\"#6-npm本地安装-S\" class=\"headerlink\" title=\"6.npm本地安装-S\"></a>6.npm本地安装-S</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i xx -S：npm install xx --save 的简写</span><br><span class=\"line\">项目（运行时、发布到生产环境时）依赖；例：antd , element , react...</span><br><span class=\"line\">安装包信息会写入 dependencies 中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-npm本地安装-D\"><a href=\"#7-npm本地安装-D\" class=\"headerlink\" title=\"7.npm本地安装-D\"></a>7.npm本地安装-D</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i xx -D：npm install xx --save-dev的简写</span><br><span class=\"line\">工程构建（开发时、“打包”时）依赖 ；例：xxx-cli , less-loader , babel-loader...</span><br><span class=\"line\">安装包信息写入 devDependencies 中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-npmrc文件\"><a href=\"#7-npmrc文件\" class=\"headerlink\" title=\"7.   .npmrc文件\"></a>7.   .npmrc文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config edit</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"二-nrm\"><a href=\"#二-nrm\" class=\"headerlink\" title=\"二 nrm\"></a>二 nrm</h4><h5 id=\"1-nrm安装\"><a href=\"#1-nrm安装\" class=\"headerlink\" title=\"1.nrm安装\"></a>1.nrm安装</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示安装一个全局 nrm</span><br><span class=\"line\">npm i nrm -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-nrm版本\"><a href=\"#2-nrm版本\" class=\"headerlink\" title=\"2.nrm版本\"></a>2.nrm版本</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm --version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-nrm检测镜像源地址\"><a href=\"#3-nrm检测镜像源地址\" class=\"headerlink\" title=\"3.nrm检测镜像源地址\"></a>3.nrm检测镜像源地址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示查看 nrm 镜像源地址网速</span><br><span class=\"line\">nrm test</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-nrm查看镜像源地址\"><a href=\"#4-nrm查看镜像源地址\" class=\"headerlink\" title=\"4. nrm查看镜像源地址\"></a>4. nrm查看镜像源地址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-nrm切换镜像源\"><a href=\"#5-nrm切换镜像源\" class=\"headerlink\" title=\"5.nrm切换镜像源\"></a>5.nrm切换镜像源</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示切换到 taobao 镜像源地址</span><br><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三-vue脚手架\"><a href=\"#三-vue脚手架\" class=\"headerlink\" title=\"三 vue脚手架\"></a>三 vue脚手架</h4><h5 id=\"1-全局安装vue脚手架\"><a href=\"#1-全局安装vue脚手架\" class=\"headerlink\" title=\"1.全局安装vue脚手架\"></a>1.全局安装vue脚手架</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @vue/cli -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-查看vue版本\"><a href=\"#2-查看vue版本\" class=\"headerlink\" title=\"2.查看vue版本\"></a>2.查看vue版本</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue --version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-全局安装yarn（vue创建项目可能需要yarn工具下载）\"><a href=\"#3-全局安装yarn（vue创建项目可能需要yarn工具下载）\" class=\"headerlink\" title=\"3.全局安装yarn（vue创建项目可能需要yarn工具下载）\"></a>3.全局安装yarn（vue创建项目可能需要yarn工具下载）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i yarn -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-创建vue项目\"><a href=\"#4-创建vue项目\" class=\"headerlink\" title=\"4.创建vue项目\"></a>4.创建vue项目</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create 项目名称</span><br><span class=\"line\">第一步 Manually select features 手动选择功能</span><br><span class=\"line\">第二步 Linter / Formatter 勾掉</span><br><span class=\"line\">      Babel,Choose Vue version 保留</span><br><span class=\"line\">      Router,Vuex, CSS Pre-processors（Sass/SCSS(with node-sass)） 按需选择</span><br><span class=\"line\">第三步 选择 2.x</span><br><span class=\"line\">第四步 Use history mode for router? 是使用history模式/否使用哈希模式 Y</span><br><span class=\"line\">第五步 选择 In package.json</span><br><span class=\"line\">第六步 Save this as a preset for future projects? 是否保存设置 N</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-进入项目文件夹\"><a href=\"#5-进入项目文件夹\" class=\"headerlink\" title=\"5.进入项目文件夹\"></a>5.进入项目文件夹</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 文件名</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-启动项目\"><a href=\"#6-启动项目\" class=\"headerlink\" title=\"6.启动项目\"></a>6.启动项目</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认 npm run serve</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-下载路由\"><a href=\"#四-下载路由\" class=\"headerlink\" title=\"四 下载路由\"></a>四 下载路由</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue-router -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五-vueX\"><a href=\"#五-vueX\" class=\"headerlink\" title=\"五 vueX\"></a>五 vueX</h4><h5 id=\"1-vueX下载\"><a href=\"#1-vueX下载\" class=\"headerlink\" title=\"1.vueX下载\"></a>1.vueX下载</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuex -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-持久化插件（本地存储）\"><a href=\"#2-持久化插件（本地存储）\" class=\"headerlink\" title=\"2.持久化插件（本地存储）\"></a>2.持久化插件（本地存储）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuex-persistedstate -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六-下载swiper\"><a href=\"#六-下载swiper\" class=\"headerlink\" title=\"六 下载swiper\"></a>六 下载swiper</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i swiper@5.4.5 -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七-下载jquery\"><a href=\"#七-下载jquery\" class=\"headerlink\" title=\"七 下载jquery\"></a>七 下载jquery</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"八-下载axios\"><a href=\"#八-下载axios\" class=\"headerlink\" title=\"八 下载axios\"></a>八 下载axios</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i axios -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"九-下载element-ui\"><a href=\"#九-下载element-ui\" class=\"headerlink\" title=\"九 下载element-ui\"></a>九 下载element-ui</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i element-ui -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十-Json-server-模拟服务器\"><a href=\"#十-Json-server-模拟服务器\" class=\"headerlink\" title=\"十  Json-server(模拟服务器)\"></a>十  Json-server(模拟服务器)</h4><h5 id=\"1-下载json-server\"><a href=\"#1-下载json-server\" class=\"headerlink\" title=\"1.下载json-server\"></a>1.下载json-server</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装json-server</span><br><span class=\"line\">npm i json-server -g </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-启动json文件\"><a href=\"#2-启动json文件\" class=\"headerlink\" title=\"2.启动json文件\"></a>2.启动json文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入json所在的文件夹运行cmd</span><br><span class=\"line\">json-server ./db.json</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-编辑脚本到packjson文件里面启动json-server\"><a href=\"#3-编辑脚本到packjson文件里面启动json-server\" class=\"headerlink\" title=\"3.编辑脚本到packjson文件里面启动json-server\"></a>3.编辑脚本到packjson文件里面启动json-server</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts</span><br><span class=\"line\">\tdev : json-server  文件地址   --port 3001   --host 192.168.8.74  --watch(json修改的时候自动重启)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十一-mockjs-模拟数据\"><a href=\"#十一-mockjs-模拟数据\" class=\"headerlink\" title=\"十一 mockjs  模拟数据\"></a>十一 mockjs  模拟数据</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载mockjs</span><br><span class=\"line\">npm i mockjs -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十二-创建package-json\"><a href=\"#十二-创建package-json\" class=\"headerlink\" title=\"十二 创建package.json\"></a>十二 创建package.json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建package.json</span><br><span class=\"line\">npm init -y  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十三-node-dev-每次修改文件，自动重启服务器\"><a href=\"#十三-node-dev-每次修改文件，自动重启服务器\" class=\"headerlink\" title=\"十三 node-dev(每次修改文件，自动重启服务器)\"></a>十三 node-dev(每次修改文件，自动重启服务器)</h4><h5 id=\"1-下载node-dev\"><a href=\"#1-下载node-dev\" class=\"headerlink\" title=\"1. 下载node-dev\"></a>1. 下载node-dev</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-dev -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-编辑启动命令到packjson文件里面\"><a href=\"#2-编辑启动命令到packjson文件里面\" class=\"headerlink\" title=\"2. 编辑启动命令到packjson文件里面\"></a>2. 编辑启动命令到packjson文件里面</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;:&#123;</span><br><span class=\"line\">\t&quot;dev&quot; : &quot;node-dev server(服务文件名.js后缀可省略)&quot;(原来是&quot;node server&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-启动服务\"><a href=\"#3-启动服务\" class=\"headerlink\" title=\"3.启动服务\"></a>3.启动服务</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十四-express-nodejs框架\"><a href=\"#十四-express-nodejs框架\" class=\"headerlink\" title=\"十四 express(nodejs框架)\"></a>十四 express(nodejs框架)</h4><h5 id=\"1-下载express\"><a href=\"#1-下载express\" class=\"headerlink\" title=\"1. 下载express\"></a>1. 下载express</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-下载express中间件（向req-body添加post请求参数，毫无用处，直接设置app-use-express-urlencoded-app-use-express-json-能达到一样效果，没用为啥要讲？）\"><a href=\"#2-下载express中间件（向req-body添加post请求参数，毫无用处，直接设置app-use-express-urlencoded-app-use-express-json-能达到一样效果，没用为啥要讲？）\" class=\"headerlink\" title=\"2. 下载express中间件（向req.body添加post请求参数，毫无用处，直接设置app.use(express.urlencoded());app.use(express.json());能达到一样效果，没用为啥要讲？）\"></a>2. 下载express中间件（向req.body添加post请求参数，毫无用处，直接设置app.use(express.urlencoded());app.use(express.json());能达到一样效果，没用为啥要讲？）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i body-parser -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-下载md5-密码加密\"><a href=\"#3-下载md5-密码加密\" class=\"headerlink\" title=\"3.  下载md5(密码加密)\"></a>3.  下载md5(密码加密)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i md5 -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-jsonwebtoken-插件-用户凭证token\"><a href=\"#4-jsonwebtoken-插件-用户凭证token\" class=\"headerlink\" title=\"4. jsonwebtoken 插件(用户凭证token)\"></a>4. jsonwebtoken 插件(用户凭证token)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载jsonwebtoken 插件</span><br><span class=\"line\">npm i jsonwebtoken -S </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-multer-插件-上传文件\"><a href=\"#5-multer-插件-上传文件\" class=\"headerlink\" title=\"5. multer 插件(上传文件)\"></a>5. multer 插件(上传文件)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i multer -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十五-express脚手架\"><a href=\"#十五-express脚手架\" class=\"headerlink\" title=\"十五 express脚手架\"></a>十五 express脚手架</h4><h5 id=\"1-下载express生成器\"><a href=\"#1-下载express生成器\" class=\"headerlink\" title=\"1.下载express生成器\"></a>1.下载express生成器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装express生成器</span><br><span class=\"line\">npm i express-generator -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建express脚手架\"><a href=\"#2-创建express脚手架\" class=\"headerlink\" title=\"2.创建express脚手架\"></a>2.创建express脚手架</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express 项目名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十六-mongodb-非关系型数据库\"><a href=\"#十六-mongodb-非关系型数据库\" class=\"headerlink\" title=\"十六 mongodb(非关系型数据库)\"></a>十六 mongodb(非关系型数据库)</h4><h5 id=\"1-添加全局环境\"><a href=\"#1-添加全局环境\" class=\"headerlink\" title=\"1. 添加全局环境\"></a>1. 添加全局环境</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把C:\\Program Files\\MongoDB\\Server\\3.0\\bin添加到环境变量的path中</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-在C盘建data-db文件夹\"><a href=\"#2-在C盘建data-db文件夹\" class=\"headerlink\" title=\"2. 在C盘建data/db文件夹\"></a>2. 在C盘建data/db文件夹</h5><h5 id=\"3-启动数据库\"><a href=\"#3-启动数据库\" class=\"headerlink\" title=\"3. 启动数据库\"></a>3. 启动数据库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod(出现27017说明成功)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-查看数据库\"><a href=\"#3-查看数据库\" class=\"headerlink\" title=\"3. 查看数据库\"></a>3. 查看数据库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo(操作命令详见菜鸟MongoDB)</span><br><span class=\"line\">1 show dbs 查看数据库</span><br><span class=\"line\">2 use 数据库名 切换数据库，没有就创建</span><br><span class=\"line\">3 db 进入数据库</span><br><span class=\"line\">4 show collections 查看数据表</span><br><span class=\"line\">5 db.数据表名字.drop() 删除数据表</span><br><span class=\"line\">6 db.数据表名字.find() 查看数据表内容</span><br><span class=\"line\">7 db.数据表名字.remove(&#123;条件&#125;) 删除数据表指定内容</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十七-mongoose-在nodejs里操作mongodb数据库\"><a href=\"#十七-mongoose-在nodejs里操作mongodb数据库\" class=\"headerlink\" title=\"十七 mongoose(在nodejs里操作mongodb数据库)\"></a>十七 mongoose(在nodejs里操作mongodb数据库)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载mongoose</span><br><span class=\"line\">npm i mongoose -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十八-下载富文本编辑器\"><a href=\"#十八-下载富文本编辑器\" class=\"headerlink\" title=\"十八 下载富文本编辑器\"></a>十八 下载富文本编辑器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i wangeditor -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"十九-webpack-打包工具-打包js-打包html-打包css-打包压缩图片\"><a href=\"#十九-webpack-打包工具-打包js-打包html-打包css-打包压缩图片\" class=\"headerlink\" title=\"十九 webpack(打包工具 ,打包js,打包html,打包css,打包压缩图片)\"></a>十九 webpack(打包工具 ,打包js,打包html,打包css,打包压缩图片)</h4><h5 id=\"1-下载webpack\"><a href=\"#1-下载webpack\" class=\"headerlink\" title=\"1. 下载webpack\"></a>1. 下载webpack</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装webpack</span><br><span class=\"line\">npm i webpack@4.32.2 webpack-cli@3.3.2 -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-本地安装webpack\"><a href=\"#2-本地安装webpack\" class=\"headerlink\" title=\"2. 本地安装webpack\"></a>2. 本地安装webpack</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地安装webpack</span><br><span class=\"line\">npm i webpack@4.32.2 webpack-cli@3.3.2 -D</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-打包css-在js中require-css文件\"><a href=\"#2-打包css-在js中require-css文件\" class=\"headerlink\" title=\"2.  打包css(在js中require css文件)\"></a>2.  打包css(在js中require css文件)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-打包scss-在js中require-scss文件\"><a href=\"#3-打包scss-在js中require-scss文件\" class=\"headerlink\" title=\"3. 打包scss(在js中require scss文件)\"></a>3. 打包scss(在js中require scss文件)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sass-loader node-sass -D</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-HtmlWebpackPlugin-自动生成HTML文件index-html\"><a href=\"#4-HtmlWebpackPlugin-自动生成HTML文件index-html\" class=\"headerlink\" title=\"4.  HtmlWebpackPlugin(自动生成HTML文件index.html)\"></a>4.  HtmlWebpackPlugin(自动生成HTML文件index.html)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-webpack-dev-server-webpack配置服务器\"><a href=\"#5-webpack-dev-server-webpack配置服务器\" class=\"headerlink\" title=\"5. webpack-dev-server(webpack配置服务器)\"></a>5. webpack-dev-server(webpack配置服务器)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十-快捷键\"><a href=\"#二十-快捷键\" class=\"headerlink\" title=\"二十 快捷键\"></a>二十 快捷键</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vbc+tab键   --Vue快捷键</span><br><span class=\"line\">rcc+tab键   --React快捷键</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十一-react指令\"><a href=\"#二十一-react指令\" class=\"headerlink\" title=\"二十一  react指令\"></a>二十一  react指令</h4><h5 id=\"1-创建react项目-脚手架\"><a href=\"#1-创建react项目-脚手架\" class=\"headerlink\" title=\"1. 创建react项目(脚手架)\"></a>1. 创建react项目(脚手架)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入要创建项目的文件夹，执行</span><br><span class=\"line\">npx create-react-app 项目名</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-在react脚手架中使用scss\"><a href=\"#2-在react脚手架中使用scss\" class=\"headerlink\" title=\"2. 在react脚手架中使用scss\"></a>2. 在react脚手架中使用scss</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-sass -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-在react脚手架中使用路由\"><a href=\"#3-在react脚手架中使用路由\" class=\"headerlink\" title=\"3. 在react脚手架中使用路由\"></a>3. 在react脚手架中使用路由</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-router-dom -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-在react脚手架中使用redux\"><a href=\"#4-在react脚手架中使用redux\" class=\"headerlink\" title=\"4. 在react脚手架中使用redux\"></a>4. 在react脚手架中使用redux</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载redux</span><br><span class=\"line\">npm  i redux -S</span><br><span class=\"line\">使用redux中间件thunk(可以执行异步请求)</span><br><span class=\"line\">npm i redux-thunk -S</span><br><span class=\"line\">使用redux中间件logger(可以打印日志)</span><br><span class=\"line\">npm i redux-logger -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-在react脚手架中使用react-redux\"><a href=\"#5-在react脚手架中使用react-redux\" class=\"headerlink\" title=\"5.  在react脚手架中使用react-redux\"></a>5.  在react脚手架中使用react-redux</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载redux</span><br><span class=\"line\">npm  i redux -S</span><br><span class=\"line\">下载react-redux</span><br><span class=\"line\">npm i react-redux -S</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-在react脚手架中使用Ant-Design-UI框架\"><a href=\"#6-在react脚手架中使用Ant-Design-UI框架\" class=\"headerlink\" title=\"6. 在react脚手架中使用Ant Design(UI框架)\"></a>6. 在react脚手架中使用Ant Design(UI框架)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载Ant Design</span><br><span class=\"line\">npm i antd -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十二-nuxt-vue的一种脚手架\"><a href=\"#二十二-nuxt-vue的一种脚手架\" class=\"headerlink\" title=\"二十二 nuxt(vue的一种脚手架)\"></a>二十二 nuxt(vue的一种脚手架)</h4><h5 id=\"1-创建nuxt项目\"><a href=\"#1-创建nuxt项目\" class=\"headerlink\" title=\"1. 创建nuxt项目\"></a>1. 创建nuxt项目</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-nuxt-app 项目名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十三-anywhere\"><a href=\"#二十三-anywhere\" class=\"headerlink\" title=\"二十三 anywhere\"></a>二十三 anywhere</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载anywhere</span><br><span class=\"line\">npm i anywhere -g</span><br><span class=\"line\">npm i anywhere</span><br><span class=\"line\">启动anywhere</span><br><span class=\"line\">anywhere</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十四-npm更改仓库源\"><a href=\"#二十四-npm更改仓库源\" class=\"headerlink\" title=\"二十四 npm更改仓库源\"></a>二十四 npm更改仓库源</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">云漾私服npm地址</span><br><span class=\"line\">npm config set registry http://10.0.60.5:8081/repository/npm-group/ 废弃</span><br><span class=\"line\">npm config set registry http://maven.00bang.cn:8081/repository/npm-group/</span><br><span class=\"line\">改为淘宝镜像</span><br><span class=\"line\">npm config set registry http://registry.npm.taobao.org/</span><br><span class=\"line\">改为npm官方地址</span><br><span class=\"line\">npm config set registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十五-工作\"><a href=\"#二十五-工作\" class=\"headerlink\" title=\"二十五 工作\"></a>二十五 工作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">切换开发分支</span><br><span class=\"line\">git checkout master-branch-develop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十六-nvm\"><a href=\"#二十六-nvm\" class=\"headerlink\" title=\"二十六 nvm\"></a>二十六 nvm</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm 安装地址https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7</span><br><span class=\"line\">(先卸载node，第一个目录为nvm安装位置，第二个为node安装位置)</span><br><span class=\"line\">nvm install 13.0.1    安装node.js 13.0.1版本 会安装对应版本的npm</span><br><span class=\"line\">nvm use 13.0.1        使用node.js 13.0.1版本</span><br><span class=\"line\">nvm install 14.16.0    安装node.js 14.16.0版本 会安装对应版本的npm</span><br><span class=\"line\">nvm use 14.16.0       使用node.js 14.16.0版本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十七-jsdoc\"><a href=\"#二十七-jsdoc\" class=\"headerlink\" title=\"二十七 jsdoc\"></a>二十七 jsdoc</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装jsdoc</span><br><span class=\"line\">%sudo npm i -g jsdoc </span><br><span class=\"line\">生成jsdoc文件</span><br><span class=\"line\">%jsdoc publisher/manager.js publisher/live.js </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十八-md文档生成html\"><a href=\"#二十八-md文档生成html\" class=\"headerlink\" title=\"二十八 md文档生成html\"></a>二十八 md文档生成html</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装i5ting_toc</span><br><span class=\"line\">sudo npm install i5ting_toc -g</span><br><span class=\"line\">生成同级目录文档</span><br><span class=\"line\">%i5ting_toc -f README.md  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二十九-git配别名查看分支\"><a href=\"#二十九-git配别名查看分支\" class=\"headerlink\" title=\"二十九 git配别名查看分支\"></a>二十九 git配别名查看分支</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lol &#x27;log --oneline --decorate --graph --all&#x27; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三十-thinkjs\"><a href=\"#三十-thinkjs\" class=\"headerlink\" title=\"三十 thinkjs\"></a>三十 thinkjs</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g think-cli</span><br><span class=\"line\">安装完全局会有thinkjs命令</span><br><span class=\"line\">thinkjs new 项目名       创建一个thinkjs脚手架</span><br><span class=\"line\">thinkjs --help          查看thinkjs命令</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三十一-hexo\"><a href=\"#三十一-hexo\" class=\"headerlink\" title=\"三十一 hexo\"></a>三十一 hexo</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli    安装hexo脚手架</span><br><span class=\"line\">npm init                   创建hexo项目</span><br><span class=\"line\">进入项目hexo server         启动本地服务</span><br><span class=\"line\">hexo new &quot;新文章&quot;           创建一篇新博文</span><br><span class=\"line\">npm install hexo-deployer-git --save   安装部署依赖</span><br><span class=\"line\">hexo deploy                一键部署</span><br><span class=\"line\">注：需要设置deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:kuangxiaowang/kuangxiaowang.github.io.git</span><br><span class=\"line\">  branch: main(必须是github仓库默认分支！！！)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl1d7pol2000218vq6y98dwpi","category_id":"cl1d7pol5000418vqb15k7dex","_id":"cl1d7pol8000818vq4isg6pkm"},{"post_id":"cl1d7pol4000318vq9g244882","category_id":"cl1d7pol7000618vq3jtxelw2","_id":"cl1d7pol9000c18vqe1k73apy"}],"PostTag":[{"post_id":"cl1d7pol2000218vq6y98dwpi","tag_id":"cl1d7pol6000518vqbiltfaph","_id":"cl1d7pol9000a18vq0awy5hme"},{"post_id":"cl1d7pol2000218vq6y98dwpi","tag_id":"cl1d7pol7000718vq16029u9j","_id":"cl1d7pol9000b18vq83aa3wzx"},{"post_id":"cl1d7pol4000318vq9g244882","tag_id":"cl1d7pol8000918vq0j0qcyah","_id":"cl1d7pola000e18vq92od50od"},{"post_id":"cl1d7pol4000318vq9g244882","tag_id":"cl1d7pol7000718vq16029u9j","_id":"cl1d7pola000f18vqhgt85ics"}],"Tag":[{"name":"面试","_id":"cl1d7pol6000518vqbiltfaph"},{"name":"学习","_id":"cl1d7pol7000718vq16029u9j"},{"name":"指令","_id":"cl1d7pol8000918vq0j0qcyah"}]}}